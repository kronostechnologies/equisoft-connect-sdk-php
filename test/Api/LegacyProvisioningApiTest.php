<?php
/**
 * LegacyProvisioningApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0-equisoft1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Equisoft\SDK\EquisoftConnect\Test\Api;

use \Equisoft\SDK\EquisoftConnect\Configuration;
use \Equisoft\SDK\EquisoftConnect\ApiException;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * LegacyProvisioningApiTest Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LegacyProvisioningApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for legacyProvisioningActivateUser
     *
     * Activate a user..
     *
     */
    public function testLegacyProvisioningActivateUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningAddOrganization
     *
     * Add a new organization..
     *
     */
    public function testLegacyProvisioningAddOrganization()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningAddUser
     *
     * Add a new user..
     *
     */
    public function testLegacyProvisioningAddUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningChangeDatabaseProfile
     *
     * Change database profile..
     *
     */
    public function testLegacyProvisioningChangeDatabaseProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningClearCache
     *
     * Clear cache..
     *
     */
    public function testLegacyProvisioningClearCache()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningCloseUserSession
     *
     * Close all sessions open for a user..
     *
     */
    public function testLegacyProvisioningCloseUserSession()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningDeactivateUser
     *
     * Deactivate a user..
     *
     */
    public function testLegacyProvisioningDeactivateUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningDeleteOrganization
     *
     * Delete an organization..
     *
     */
    public function testLegacyProvisioningDeleteOrganization()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningDeleteUser
     *
     * Delete a user..
     *
     */
    public function testLegacyProvisioningDeleteUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningEnableContactPersonalizedFieldsModule
     *
     * Enable Contact Personalized Fields module for a database..
     *
     */
    public function testLegacyProvisioningEnableContactPersonalizedFieldsModule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningEnableFnaForUser
     *
     * Enable FNA for user..
     *
     */
    public function testLegacyProvisioningEnableFnaForUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningGetCrmGatewaysAccessReport
     *
     * Get a report of active accesses for all CRM datagateways..
     *
     */
    public function testLegacyProvisioningGetCrmGatewaysAccessReport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningGetFFGatewaysAccessReport
     *
     * Get a report of active accesses for all FF datagateways..
     *
     */
    public function testLegacyProvisioningGetFFGatewaysAccessReport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningGetGatewayArchiveByDate
     *
     * Get the archives for a given gateway at the given date..
     *
     */
    public function testLegacyProvisioningGetGatewayArchiveByDate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningGetGatewayArchiveListByDate
     *
     * Get the archives list for a given gateway at the given date..
     *
     */
    public function testLegacyProvisioningGetGatewayArchiveListByDate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningGetLoginLog
     *
     * Get the login log based on given options..
     *
     */
    public function testLegacyProvisioningGetLoginLog()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningGetMoveUserToOrganizationStatus
     *
     * Get the progression status of a previous call to moveUserToOrganization..
     *
     */
    public function testLegacyProvisioningGetMoveUserToOrganizationStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningGetOrganization
     *
     * Get all informations about an organization..
     *
     */
    public function testLegacyProvisioningGetOrganization()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningGetOrganizationList
     *
     * List all organizations..
     *
     */
    public function testLegacyProvisioningGetOrganizationList()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningGetOrganizationStatus
     *
     * Return the state of a given database..
     *
     */
    public function testLegacyProvisioningGetOrganizationStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningGetSyncControlDataForAllDatabaseStatus
     *
     * Get the progression status of a previous call to moveUserToOrganization..
     *
     */
    public function testLegacyProvisioningGetSyncControlDataForAllDatabaseStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningGetUser
     *
     * Get all informations about a user..
     *
     */
    public function testLegacyProvisioningGetUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningGetUserList
     *
     * List all users in an organization..
     *
     */
    public function testLegacyProvisioningGetUserList()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningGetWebuserDatabaseListByValue
     *
     * Get a list of webuser's databases..
     *
     */
    public function testLegacyProvisioningGetWebuserDatabaseListByValue()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningMonitorDatagateways
     *
     * Monitor stats of the datagateways for a given environment..
     *
     */
    public function testLegacyProvisioningMonitorDatagateways()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningMoveUserToOrganization
     *
     * Move a user to another organization..
     *
     */
    public function testLegacyProvisioningMoveUserToOrganization()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningSyncControlData
     *
     * Sync one database pilotage..
     *
     */
    public function testLegacyProvisioningSyncControlData()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningSyncControlDataForAllDatabase
     *
     * Use gearman to sync all database for a given profile..
     *
     */
    public function testLegacyProvisioningSyncControlDataForAllDatabase()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningUnlockUser
     *
     * Unlock a user..
     *
     */
    public function testLegacyProvisioningUnlockUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyProvisioningUpdateUser
     *
     * Update a user..
     *
     */
    public function testLegacyProvisioningUpdateUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
