<?php
/**
 * InvestmentsAsset
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-equisoft1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * InvestmentsAsset Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvestmentsAsset implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'investments.Asset';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'assetType' => 'string',
        'assetTypeDescription' => '\Equisoft\SDK\EquisoftConnect\Model\Translation[]',
        'cusip' => 'string',
        'isin' => 'string',
        'tickerSymbolCode' => 'string',
        'marketValue' => 'float',
        'marketValueUpdateDate' => '\DateTime',
        'bookValue' => 'float',
        'notes' => 'string',
        'status' => 'string',
        'reviewDate' => '\DateTime',
        'openedDate' => '\DateTime',
        'closedDate' => '\DateTime',
        'quantity' => 'float',
        'quantityUpdateDate' => '\DateTime',
        'price' => 'float',
        'priceUpdateDate' => '\DateTime',
        'faceValue' => 'float',
        'faceValueDate' => '\DateTime',
        'maturityValue' => 'float',
        'maturityDate' => '\DateTime',
        'interestRateFixed' => 'float',
        'interestFrequency' => 'string',
        'redeemable' => 'string',
        'product' => '\Equisoft\SDK\EquisoftConnect\Model\InvestmentsProduct',
        'cannexFund' => '\Equisoft\SDK\EquisoftConnect\Model\InvestmentsCannexFund'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'assetType' => null,
        'assetTypeDescription' => null,
        'cusip' => null,
        'isin' => null,
        'tickerSymbolCode' => null,
        'marketValue' => 'float',
        'marketValueUpdateDate' => 'date',
        'bookValue' => 'float',
        'notes' => null,
        'status' => null,
        'reviewDate' => 'date',
        'openedDate' => 'date',
        'closedDate' => 'date',
        'quantity' => 'float',
        'quantityUpdateDate' => 'date',
        'price' => 'float',
        'priceUpdateDate' => 'date',
        'faceValue' => 'float',
        'faceValueDate' => 'date',
        'maturityValue' => 'float',
        'maturityDate' => 'date',
        'interestRateFixed' => 'float',
        'interestFrequency' => null,
        'redeemable' => null,
        'product' => null,
        'cannexFund' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'assetType' => false,
        'assetTypeDescription' => false,
        'cusip' => false,
        'isin' => false,
        'tickerSymbolCode' => false,
        'marketValue' => false,
        'marketValueUpdateDate' => false,
        'bookValue' => false,
        'notes' => false,
        'status' => false,
        'reviewDate' => false,
        'openedDate' => false,
        'closedDate' => false,
        'quantity' => true,
        'quantityUpdateDate' => true,
        'price' => true,
        'priceUpdateDate' => true,
        'faceValue' => true,
        'faceValueDate' => true,
        'maturityValue' => true,
        'maturityDate' => true,
        'interestRateFixed' => true,
        'interestFrequency' => true,
        'redeemable' => true,
        'product' => true,
        'cannexFund' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'assetType' => 'assetType',
        'assetTypeDescription' => 'assetTypeDescription',
        'cusip' => 'cusip',
        'isin' => 'isin',
        'tickerSymbolCode' => 'tickerSymbolCode',
        'marketValue' => 'marketValue',
        'marketValueUpdateDate' => 'marketValueUpdateDate',
        'bookValue' => 'bookValue',
        'notes' => 'notes',
        'status' => 'status',
        'reviewDate' => 'reviewDate',
        'openedDate' => 'openedDate',
        'closedDate' => 'closedDate',
        'quantity' => 'quantity',
        'quantityUpdateDate' => 'quantityUpdateDate',
        'price' => 'price',
        'priceUpdateDate' => 'priceUpdateDate',
        'faceValue' => 'faceValue',
        'faceValueDate' => 'faceValueDate',
        'maturityValue' => 'maturityValue',
        'maturityDate' => 'maturityDate',
        'interestRateFixed' => 'interestRateFixed',
        'interestFrequency' => 'interestFrequency',
        'redeemable' => 'redeemable',
        'product' => 'product',
        'cannexFund' => 'cannexFund'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'assetType' => 'setAssetType',
        'assetTypeDescription' => 'setAssetTypeDescription',
        'cusip' => 'setCusip',
        'isin' => 'setIsin',
        'tickerSymbolCode' => 'setTickerSymbolCode',
        'marketValue' => 'setMarketValue',
        'marketValueUpdateDate' => 'setMarketValueUpdateDate',
        'bookValue' => 'setBookValue',
        'notes' => 'setNotes',
        'status' => 'setStatus',
        'reviewDate' => 'setReviewDate',
        'openedDate' => 'setOpenedDate',
        'closedDate' => 'setClosedDate',
        'quantity' => 'setQuantity',
        'quantityUpdateDate' => 'setQuantityUpdateDate',
        'price' => 'setPrice',
        'priceUpdateDate' => 'setPriceUpdateDate',
        'faceValue' => 'setFaceValue',
        'faceValueDate' => 'setFaceValueDate',
        'maturityValue' => 'setMaturityValue',
        'maturityDate' => 'setMaturityDate',
        'interestRateFixed' => 'setInterestRateFixed',
        'interestFrequency' => 'setInterestFrequency',
        'redeemable' => 'setRedeemable',
        'product' => 'setProduct',
        'cannexFund' => 'setCannexFund'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'assetType' => 'getAssetType',
        'assetTypeDescription' => 'getAssetTypeDescription',
        'cusip' => 'getCusip',
        'isin' => 'getIsin',
        'tickerSymbolCode' => 'getTickerSymbolCode',
        'marketValue' => 'getMarketValue',
        'marketValueUpdateDate' => 'getMarketValueUpdateDate',
        'bookValue' => 'getBookValue',
        'notes' => 'getNotes',
        'status' => 'getStatus',
        'reviewDate' => 'getReviewDate',
        'openedDate' => 'getOpenedDate',
        'closedDate' => 'getClosedDate',
        'quantity' => 'getQuantity',
        'quantityUpdateDate' => 'getQuantityUpdateDate',
        'price' => 'getPrice',
        'priceUpdateDate' => 'getPriceUpdateDate',
        'faceValue' => 'getFaceValue',
        'faceValueDate' => 'getFaceValueDate',
        'maturityValue' => 'getMaturityValue',
        'maturityDate' => 'getMaturityDate',
        'interestRateFixed' => 'getInterestRateFixed',
        'interestFrequency' => 'getInterestFrequency',
        'redeemable' => 'getRedeemable',
        'product' => 'getProduct',
        'cannexFund' => 'getCannexFund'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('assetType', $data ?? [], null);
        $this->setIfExists('assetTypeDescription', $data ?? [], null);
        $this->setIfExists('cusip', $data ?? [], null);
        $this->setIfExists('isin', $data ?? [], null);
        $this->setIfExists('tickerSymbolCode', $data ?? [], null);
        $this->setIfExists('marketValue', $data ?? [], null);
        $this->setIfExists('marketValueUpdateDate', $data ?? [], null);
        $this->setIfExists('bookValue', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('reviewDate', $data ?? [], null);
        $this->setIfExists('openedDate', $data ?? [], null);
        $this->setIfExists('closedDate', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('quantityUpdateDate', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('priceUpdateDate', $data ?? [], null);
        $this->setIfExists('faceValue', $data ?? [], null);
        $this->setIfExists('faceValueDate', $data ?? [], null);
        $this->setIfExists('maturityValue', $data ?? [], null);
        $this->setIfExists('maturityDate', $data ?? [], null);
        $this->setIfExists('interestRateFixed', $data ?? [], null);
        $this->setIfExists('interestFrequency', $data ?? [], null);
        $this->setIfExists('redeemable', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('cannexFund', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets assetType
     *
     * @return string|null
     */
    public function getAssetType()
    {
        return $this->container['assetType'];
    }

    /**
     * Sets assetType
     *
     * @param string|null $assetType assetType
     *
     * @return self
     */
    public function setAssetType($assetType)
    {
        if (is_null($assetType)) {
            throw new \InvalidArgumentException('non-nullable assetType cannot be null');
        }
        $this->container['assetType'] = $assetType;

        return $this;
    }

    /**
     * Gets assetTypeDescription
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\Translation[]|null
     */
    public function getAssetTypeDescription()
    {
        return $this->container['assetTypeDescription'];
    }

    /**
     * Sets assetTypeDescription
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\Translation[]|null $assetTypeDescription assetTypeDescription
     *
     * @return self
     */
    public function setAssetTypeDescription($assetTypeDescription)
    {
        if (is_null($assetTypeDescription)) {
            throw new \InvalidArgumentException('non-nullable assetTypeDescription cannot be null');
        }
        $this->container['assetTypeDescription'] = $assetTypeDescription;

        return $this;
    }

    /**
     * Gets cusip
     *
     * @return string|null
     */
    public function getCusip()
    {
        return $this->container['cusip'];
    }

    /**
     * Sets cusip
     *
     * @param string|null $cusip cusip
     *
     * @return self
     */
    public function setCusip($cusip)
    {
        if (is_null($cusip)) {
            throw new \InvalidArgumentException('non-nullable cusip cannot be null');
        }
        $this->container['cusip'] = $cusip;

        return $this;
    }

    /**
     * Gets isin
     *
     * @return string|null
     */
    public function getIsin()
    {
        return $this->container['isin'];
    }

    /**
     * Sets isin
     *
     * @param string|null $isin isin
     *
     * @return self
     */
    public function setIsin($isin)
    {
        if (is_null($isin)) {
            throw new \InvalidArgumentException('non-nullable isin cannot be null');
        }
        $this->container['isin'] = $isin;

        return $this;
    }

    /**
     * Gets tickerSymbolCode
     *
     * @return string|null
     */
    public function getTickerSymbolCode()
    {
        return $this->container['tickerSymbolCode'];
    }

    /**
     * Sets tickerSymbolCode
     *
     * @param string|null $tickerSymbolCode tickerSymbolCode
     *
     * @return self
     */
    public function setTickerSymbolCode($tickerSymbolCode)
    {
        if (is_null($tickerSymbolCode)) {
            throw new \InvalidArgumentException('non-nullable tickerSymbolCode cannot be null');
        }
        $this->container['tickerSymbolCode'] = $tickerSymbolCode;

        return $this;
    }

    /**
     * Gets marketValue
     *
     * @return float|null
     */
    public function getMarketValue()
    {
        return $this->container['marketValue'];
    }

    /**
     * Sets marketValue
     *
     * @param float|null $marketValue marketValue
     *
     * @return self
     */
    public function setMarketValue($marketValue)
    {
        if (is_null($marketValue)) {
            throw new \InvalidArgumentException('non-nullable marketValue cannot be null');
        }
        $this->container['marketValue'] = $marketValue;

        return $this;
    }

    /**
     * Gets marketValueUpdateDate
     *
     * @return \DateTime|null
     */
    public function getMarketValueUpdateDate()
    {
        return $this->container['marketValueUpdateDate'];
    }

    /**
     * Sets marketValueUpdateDate
     *
     * @param \DateTime|null $marketValueUpdateDate marketValueUpdateDate
     *
     * @return self
     */
    public function setMarketValueUpdateDate($marketValueUpdateDate)
    {
        if (is_null($marketValueUpdateDate)) {
            throw new \InvalidArgumentException('non-nullable marketValueUpdateDate cannot be null');
        }
        $this->container['marketValueUpdateDate'] = $marketValueUpdateDate;

        return $this;
    }

    /**
     * Gets bookValue
     *
     * @return float|null
     */
    public function getBookValue()
    {
        return $this->container['bookValue'];
    }

    /**
     * Sets bookValue
     *
     * @param float|null $bookValue bookValue
     *
     * @return self
     */
    public function setBookValue($bookValue)
    {
        if (is_null($bookValue)) {
            throw new \InvalidArgumentException('non-nullable bookValue cannot be null');
        }
        $this->container['bookValue'] = $bookValue;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets reviewDate
     *
     * @return \DateTime|null
     */
    public function getReviewDate()
    {
        return $this->container['reviewDate'];
    }

    /**
     * Sets reviewDate
     *
     * @param \DateTime|null $reviewDate reviewDate
     *
     * @return self
     */
    public function setReviewDate($reviewDate)
    {
        if (is_null($reviewDate)) {
            throw new \InvalidArgumentException('non-nullable reviewDate cannot be null');
        }
        $this->container['reviewDate'] = $reviewDate;

        return $this;
    }

    /**
     * Gets openedDate
     *
     * @return \DateTime|null
     */
    public function getOpenedDate()
    {
        return $this->container['openedDate'];
    }

    /**
     * Sets openedDate
     *
     * @param \DateTime|null $openedDate openedDate
     *
     * @return self
     */
    public function setOpenedDate($openedDate)
    {
        if (is_null($openedDate)) {
            throw new \InvalidArgumentException('non-nullable openedDate cannot be null');
        }
        $this->container['openedDate'] = $openedDate;

        return $this;
    }

    /**
     * Gets closedDate
     *
     * @return \DateTime|null
     */
    public function getClosedDate()
    {
        return $this->container['closedDate'];
    }

    /**
     * Sets closedDate
     *
     * @param \DateTime|null $closedDate closedDate
     *
     * @return self
     */
    public function setClosedDate($closedDate)
    {
        if (is_null($closedDate)) {
            throw new \InvalidArgumentException('non-nullable closedDate cannot be null');
        }
        $this->container['closedDate'] = $closedDate;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            array_push($this->openAPINullablesSetToNull, 'quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantityUpdateDate
     *
     * @return \DateTime|null
     */
    public function getQuantityUpdateDate()
    {
        return $this->container['quantityUpdateDate'];
    }

    /**
     * Sets quantityUpdateDate
     *
     * @param \DateTime|null $quantityUpdateDate quantityUpdateDate
     *
     * @return self
     */
    public function setQuantityUpdateDate($quantityUpdateDate)
    {
        if (is_null($quantityUpdateDate)) {
            array_push($this->openAPINullablesSetToNull, 'quantityUpdateDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantityUpdateDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quantityUpdateDate'] = $quantityUpdateDate;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            array_push($this->openAPINullablesSetToNull, 'price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets priceUpdateDate
     *
     * @return \DateTime|null
     */
    public function getPriceUpdateDate()
    {
        return $this->container['priceUpdateDate'];
    }

    /**
     * Sets priceUpdateDate
     *
     * @param \DateTime|null $priceUpdateDate priceUpdateDate
     *
     * @return self
     */
    public function setPriceUpdateDate($priceUpdateDate)
    {
        if (is_null($priceUpdateDate)) {
            array_push($this->openAPINullablesSetToNull, 'priceUpdateDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priceUpdateDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priceUpdateDate'] = $priceUpdateDate;

        return $this;
    }

    /**
     * Gets faceValue
     *
     * @return float|null
     */
    public function getFaceValue()
    {
        return $this->container['faceValue'];
    }

    /**
     * Sets faceValue
     *
     * @param float|null $faceValue faceValue
     *
     * @return self
     */
    public function setFaceValue($faceValue)
    {
        if (is_null($faceValue)) {
            array_push($this->openAPINullablesSetToNull, 'faceValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('faceValue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['faceValue'] = $faceValue;

        return $this;
    }

    /**
     * Gets faceValueDate
     *
     * @return \DateTime|null
     */
    public function getFaceValueDate()
    {
        return $this->container['faceValueDate'];
    }

    /**
     * Sets faceValueDate
     *
     * @param \DateTime|null $faceValueDate faceValueDate
     *
     * @return self
     */
    public function setFaceValueDate($faceValueDate)
    {
        if (is_null($faceValueDate)) {
            array_push($this->openAPINullablesSetToNull, 'faceValueDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('faceValueDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['faceValueDate'] = $faceValueDate;

        return $this;
    }

    /**
     * Gets maturityValue
     *
     * @return float|null
     */
    public function getMaturityValue()
    {
        return $this->container['maturityValue'];
    }

    /**
     * Sets maturityValue
     *
     * @param float|null $maturityValue maturityValue
     *
     * @return self
     */
    public function setMaturityValue($maturityValue)
    {
        if (is_null($maturityValue)) {
            array_push($this->openAPINullablesSetToNull, 'maturityValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maturityValue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maturityValue'] = $maturityValue;

        return $this;
    }

    /**
     * Gets maturityDate
     *
     * @return \DateTime|null
     */
    public function getMaturityDate()
    {
        return $this->container['maturityDate'];
    }

    /**
     * Sets maturityDate
     *
     * @param \DateTime|null $maturityDate maturityDate
     *
     * @return self
     */
    public function setMaturityDate($maturityDate)
    {
        if (is_null($maturityDate)) {
            array_push($this->openAPINullablesSetToNull, 'maturityDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maturityDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maturityDate'] = $maturityDate;

        return $this;
    }

    /**
     * Gets interestRateFixed
     *
     * @return float|null
     */
    public function getInterestRateFixed()
    {
        return $this->container['interestRateFixed'];
    }

    /**
     * Sets interestRateFixed
     *
     * @param float|null $interestRateFixed interestRateFixed
     *
     * @return self
     */
    public function setInterestRateFixed($interestRateFixed)
    {
        if (is_null($interestRateFixed)) {
            array_push($this->openAPINullablesSetToNull, 'interestRateFixed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('interestRateFixed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['interestRateFixed'] = $interestRateFixed;

        return $this;
    }

    /**
     * Gets interestFrequency
     *
     * @return string|null
     */
    public function getInterestFrequency()
    {
        return $this->container['interestFrequency'];
    }

    /**
     * Sets interestFrequency
     *
     * @param string|null $interestFrequency interestFrequency
     *
     * @return self
     */
    public function setInterestFrequency($interestFrequency)
    {
        if (is_null($interestFrequency)) {
            array_push($this->openAPINullablesSetToNull, 'interestFrequency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('interestFrequency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['interestFrequency'] = $interestFrequency;

        return $this;
    }

    /**
     * Gets redeemable
     *
     * @return string|null
     */
    public function getRedeemable()
    {
        return $this->container['redeemable'];
    }

    /**
     * Sets redeemable
     *
     * @param string|null $redeemable redeemable
     *
     * @return self
     */
    public function setRedeemable($redeemable)
    {
        if (is_null($redeemable)) {
            array_push($this->openAPINullablesSetToNull, 'redeemable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redeemable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redeemable'] = $redeemable;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\InvestmentsProduct|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\InvestmentsProduct|null $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            array_push($this->openAPINullablesSetToNull, 'product');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets cannexFund
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\InvestmentsCannexFund|null
     */
    public function getCannexFund()
    {
        return $this->container['cannexFund'];
    }

    /**
     * Sets cannexFund
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\InvestmentsCannexFund|null $cannexFund cannexFund
     *
     * @return self
     */
    public function setCannexFund($cannexFund)
    {
        if (is_null($cannexFund)) {
            array_push($this->openAPINullablesSetToNull, 'cannexFund');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cannexFund', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cannexFund'] = $cannexFund;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


