<?php
/**
 * DatabasesDatabase
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-equisoft4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * DatabasesDatabase Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DatabasesDatabase implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'databases.Database';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'uuid' => 'string',
        'databaseName' => 'string',
        'displayName' => 'string',
        'profileName' => 'string',
        'state' => 'string',
        'datagatewayEnabled' => 'bool',
        'isMultiUser' => 'bool',
        'equisoftPlanEnabled' => 'bool',
        'distributorCode' => 'string',
        'chargebeeCustomerId' => 'string',
        'organizationUuid' => 'string',
        'billable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'uuid' => null,
        'databaseName' => null,
        'displayName' => null,
        'profileName' => null,
        'state' => null,
        'datagatewayEnabled' => null,
        'isMultiUser' => null,
        'equisoftPlanEnabled' => null,
        'distributorCode' => null,
        'chargebeeCustomerId' => null,
        'organizationUuid' => null,
        'billable' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'uuid' => false,
		'databaseName' => false,
		'displayName' => false,
		'profileName' => false,
		'state' => false,
		'datagatewayEnabled' => false,
		'isMultiUser' => false,
		'equisoftPlanEnabled' => false,
		'distributorCode' => true,
		'chargebeeCustomerId' => true,
		'organizationUuid' => true,
		'billable' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'uuid' => 'uuid',
        'databaseName' => 'databaseName',
        'displayName' => 'displayName',
        'profileName' => 'profileName',
        'state' => 'state',
        'datagatewayEnabled' => 'datagatewayEnabled',
        'isMultiUser' => 'isMultiUser',
        'equisoftPlanEnabled' => 'equisoftPlanEnabled',
        'distributorCode' => 'distributorCode',
        'chargebeeCustomerId' => 'chargebeeCustomerId',
        'organizationUuid' => 'organizationUuid',
        'billable' => 'billable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'uuid' => 'setUuid',
        'databaseName' => 'setDatabaseName',
        'displayName' => 'setDisplayName',
        'profileName' => 'setProfileName',
        'state' => 'setState',
        'datagatewayEnabled' => 'setDatagatewayEnabled',
        'isMultiUser' => 'setIsMultiUser',
        'equisoftPlanEnabled' => 'setEquisoftPlanEnabled',
        'distributorCode' => 'setDistributorCode',
        'chargebeeCustomerId' => 'setChargebeeCustomerId',
        'organizationUuid' => 'setOrganizationUuid',
        'billable' => 'setBillable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'uuid' => 'getUuid',
        'databaseName' => 'getDatabaseName',
        'displayName' => 'getDisplayName',
        'profileName' => 'getProfileName',
        'state' => 'getState',
        'datagatewayEnabled' => 'getDatagatewayEnabled',
        'isMultiUser' => 'getIsMultiUser',
        'equisoftPlanEnabled' => 'getEquisoftPlanEnabled',
        'distributorCode' => 'getDistributorCode',
        'chargebeeCustomerId' => 'getChargebeeCustomerId',
        'organizationUuid' => 'getOrganizationUuid',
        'billable' => 'getBillable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('databaseName', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('profileName', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('datagatewayEnabled', $data ?? [], null);
        $this->setIfExists('isMultiUser', $data ?? [], null);
        $this->setIfExists('equisoftPlanEnabled', $data ?? [], null);
        $this->setIfExists('distributorCode', $data ?? [], null);
        $this->setIfExists('chargebeeCustomerId', $data ?? [], null);
        $this->setIfExists('organizationUuid', $data ?? [], null);
        $this->setIfExists('billable', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['uuid'] === null) {
            $invalidProperties[] = "'uuid' can't be null";
        }
        if ($this->container['databaseName'] === null) {
            $invalidProperties[] = "'databaseName' can't be null";
        }
        if ($this->container['displayName'] === null) {
            $invalidProperties[] = "'displayName' can't be null";
        }
        if ($this->container['profileName'] === null) {
            $invalidProperties[] = "'profileName' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['datagatewayEnabled'] === null) {
            $invalidProperties[] = "'datagatewayEnabled' can't be null";
        }
        if ($this->container['isMultiUser'] === null) {
            $invalidProperties[] = "'isMultiUser' can't be null";
        }
        if ($this->container['billable'] === null) {
            $invalidProperties[] = "'billable' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid Uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets databaseName
     *
     * @return string
     */
    public function getDatabaseName()
    {
        return $this->container['databaseName'];
    }

    /**
     * Sets databaseName
     *
     * @param string $databaseName Database name
     *
     * @return self
     */
    public function setDatabaseName($databaseName)
    {
        if (is_null($databaseName)) {
            throw new \InvalidArgumentException('non-nullable databaseName cannot be null');
        }
        $this->container['databaseName'] = $databaseName;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string $displayName Display name
     *
     * @return self
     */
    public function setDisplayName($displayName)
    {
        if (is_null($displayName)) {
            throw new \InvalidArgumentException('non-nullable displayName cannot be null');
        }
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets profileName
     *
     * @return string
     */
    public function getProfileName()
    {
        return $this->container['profileName'];
    }

    /**
     * Sets profileName
     *
     * @param string $profileName Profile name
     *
     * @return self
     */
    public function setProfileName($profileName)
    {
        if (is_null($profileName)) {
            throw new \InvalidArgumentException('non-nullable profileName cannot be null');
        }
        $this->container['profileName'] = $profileName;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Database state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets datagatewayEnabled
     *
     * @return bool
     */
    public function getDatagatewayEnabled()
    {
        return $this->container['datagatewayEnabled'];
    }

    /**
     * Sets datagatewayEnabled
     *
     * @param bool $datagatewayEnabled Is Datagateway Enabled
     *
     * @return self
     */
    public function setDatagatewayEnabled($datagatewayEnabled)
    {
        if (is_null($datagatewayEnabled)) {
            throw new \InvalidArgumentException('non-nullable datagatewayEnabled cannot be null');
        }
        $this->container['datagatewayEnabled'] = $datagatewayEnabled;

        return $this;
    }

    /**
     * Gets isMultiUser
     *
     * @return bool
     */
    public function getIsMultiUser()
    {
        return $this->container['isMultiUser'];
    }

    /**
     * Sets isMultiUser
     *
     * @param bool $isMultiUser Is Multi User
     *
     * @return self
     */
    public function setIsMultiUser($isMultiUser)
    {
        if (is_null($isMultiUser)) {
            throw new \InvalidArgumentException('non-nullable isMultiUser cannot be null');
        }
        $this->container['isMultiUser'] = $isMultiUser;

        return $this;
    }

    /**
     * Gets equisoftPlanEnabled
     *
     * @return bool|null
     */
    public function getEquisoftPlanEnabled()
    {
        return $this->container['equisoftPlanEnabled'];
    }

    /**
     * Sets equisoftPlanEnabled
     *
     * @param bool|null $equisoftPlanEnabled Is Equisoft Plan Enabled
     *
     * @return self
     */
    public function setEquisoftPlanEnabled($equisoftPlanEnabled)
    {
        if (is_null($equisoftPlanEnabled)) {
            throw new \InvalidArgumentException('non-nullable equisoftPlanEnabled cannot be null');
        }
        $this->container['equisoftPlanEnabled'] = $equisoftPlanEnabled;

        return $this;
    }

    /**
     * Gets distributorCode
     *
     * @return string|null
     */
    public function getDistributorCode()
    {
        return $this->container['distributorCode'];
    }

    /**
     * Sets distributorCode
     *
     * @param string|null $distributorCode Distributor Code
     *
     * @return self
     */
    public function setDistributorCode($distributorCode)
    {
        if (is_null($distributorCode)) {
            array_push($this->openAPINullablesSetToNull, 'distributorCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('distributorCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['distributorCode'] = $distributorCode;

        return $this;
    }

    /**
     * Gets chargebeeCustomerId
     *
     * @return string|null
     */
    public function getChargebeeCustomerId()
    {
        return $this->container['chargebeeCustomerId'];
    }

    /**
     * Sets chargebeeCustomerId
     *
     * @param string|null $chargebeeCustomerId Chargebee Customer Id
     *
     * @return self
     */
    public function setChargebeeCustomerId($chargebeeCustomerId)
    {
        if (is_null($chargebeeCustomerId)) {
            array_push($this->openAPINullablesSetToNull, 'chargebeeCustomerId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chargebeeCustomerId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['chargebeeCustomerId'] = $chargebeeCustomerId;

        return $this;
    }

    /**
     * Gets organizationUuid
     *
     * @return string|null
     */
    public function getOrganizationUuid()
    {
        return $this->container['organizationUuid'];
    }

    /**
     * Sets organizationUuid
     *
     * @param string|null $organizationUuid Organization uuid
     *
     * @return self
     */
    public function setOrganizationUuid($organizationUuid)
    {
        if (is_null($organizationUuid)) {
            array_push($this->openAPINullablesSetToNull, 'organizationUuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organizationUuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organizationUuid'] = $organizationUuid;

        return $this;
    }

    /**
     * Gets billable
     *
     * @return bool
     */
    public function getBillable()
    {
        return $this->container['billable'];
    }

    /**
     * Sets billable
     *
     * @param bool $billable Is Database Billable
     *
     * @return self
     */
    public function setBillable($billable)
    {
        if (is_null($billable)) {
            throw new \InvalidArgumentException('non-nullable billable cannot be null');
        }
        $this->container['billable'] = $billable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


