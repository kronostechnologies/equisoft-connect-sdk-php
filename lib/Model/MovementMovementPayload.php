<?php
/**
 * MovementMovementPayload
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-equisoft1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * MovementMovementPayload Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MovementMovementPayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'type';
    public const DISCRIMINATOR_MAP = [
        "CLIENTBASE_USING_DISTLIST" => "MovementClientBaseUsingDistributionListMovementPayload",
        "CLIENTBASE_USING_FILE" => "MovementClientBaseUsingFileMovementPayload",
        "COPY" => "MovementCopyMovementPayload",
        "MOVE" => "MovementMoveMovementPayload",
    ];

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'movement.MovementPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => '\Equisoft\SDK\EquisoftConnect\Model\MovementMovementType',
        'date' => 'string',
        'sourceDatabase' => 'string',
        'destinationDatabase' => 'string',
        'users' => 'string[]',
        'options' => '\Equisoft\SDK\EquisoftConnect\Model\MovementOptions',
        'userTuples' => '\Equisoft\SDK\EquisoftConnect\Model\MovementUserTuplePayload[]',
        'sourceUser' => 'string',
        'sourceDistributionList' => 'string',
        'destinationUser' => 'string',
        'transferOption' => 'string',
        'capsilFile' => 'string',
        'univerisFile' => 'string',
        'dataphileFile' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'date' => null,
        'sourceDatabase' => null,
        'destinationDatabase' => null,
        'users' => null,
        'options' => null,
        'userTuples' => null,
        'sourceUser' => null,
        'sourceDistributionList' => null,
        'destinationUser' => null,
        'transferOption' => null,
        'capsilFile' => null,
        'univerisFile' => null,
        'dataphileFile' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'date' => false,
        'sourceDatabase' => false,
        'destinationDatabase' => false,
        'users' => false,
        'options' => false,
        'userTuples' => false,
        'sourceUser' => false,
        'sourceDistributionList' => false,
        'destinationUser' => false,
        'transferOption' => true,
        'capsilFile' => true,
        'univerisFile' => true,
        'dataphileFile' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'date' => 'date',
        'sourceDatabase' => 'sourceDatabase',
        'destinationDatabase' => 'destinationDatabase',
        'users' => 'users',
        'options' => 'options',
        'userTuples' => 'userTuples',
        'sourceUser' => 'sourceUser',
        'sourceDistributionList' => 'sourceDistributionList',
        'destinationUser' => 'destinationUser',
        'transferOption' => 'transferOption',
        'capsilFile' => 'capsilFile',
        'univerisFile' => 'univerisFile',
        'dataphileFile' => 'dataphileFile'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'date' => 'setDate',
        'sourceDatabase' => 'setSourceDatabase',
        'destinationDatabase' => 'setDestinationDatabase',
        'users' => 'setUsers',
        'options' => 'setOptions',
        'userTuples' => 'setUserTuples',
        'sourceUser' => 'setSourceUser',
        'sourceDistributionList' => 'setSourceDistributionList',
        'destinationUser' => 'setDestinationUser',
        'transferOption' => 'setTransferOption',
        'capsilFile' => 'setCapsilFile',
        'univerisFile' => 'setUniverisFile',
        'dataphileFile' => 'setDataphileFile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'date' => 'getDate',
        'sourceDatabase' => 'getSourceDatabase',
        'destinationDatabase' => 'getDestinationDatabase',
        'users' => 'getUsers',
        'options' => 'getOptions',
        'userTuples' => 'getUserTuples',
        'sourceUser' => 'getSourceUser',
        'sourceDistributionList' => 'getSourceDistributionList',
        'destinationUser' => 'getDestinationUser',
        'transferOption' => 'getTransferOption',
        'capsilFile' => 'getCapsilFile',
        'univerisFile' => 'getUniverisFile',
        'dataphileFile' => 'getDataphileFile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TRANSFER_OPTION_COPY = 'COPY';
    public const TRANSFER_OPTION_TRANSFER = 'TRANSFER';
    public const TRANSFER_OPTION_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransferOptionAllowableValues()
    {
        return [
            self::TRANSFER_OPTION_COPY,
            self::TRANSFER_OPTION_TRANSFER,
            self::TRANSFER_OPTION_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('sourceDatabase', $data ?? [], null);
        $this->setIfExists('destinationDatabase', $data ?? [], null);
        $this->setIfExists('users', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('userTuples', $data ?? [], null);
        $this->setIfExists('sourceUser', $data ?? [], null);
        $this->setIfExists('sourceDistributionList', $data ?? [], null);
        $this->setIfExists('destinationUser', $data ?? [], null);
        $this->setIfExists('transferOption', $data ?? [], null);
        $this->setIfExists('capsilFile', $data ?? [], null);
        $this->setIfExists('univerisFile', $data ?? [], null);
        $this->setIfExists('dataphileFile', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['type'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sourceDatabase'] === null) {
            $invalidProperties[] = "'sourceDatabase' can't be null";
        }
        if ($this->container['destinationDatabase'] === null) {
            $invalidProperties[] = "'destinationDatabase' can't be null";
        }
        if ($this->container['users'] === null) {
            $invalidProperties[] = "'users' can't be null";
        }
        if ($this->container['userTuples'] === null) {
            $invalidProperties[] = "'userTuples' can't be null";
        }
        if ($this->container['sourceUser'] === null) {
            $invalidProperties[] = "'sourceUser' can't be null";
        }
        if ($this->container['destinationUser'] === null) {
            $invalidProperties[] = "'destinationUser' can't be null";
        }
        if ($this->container['transferOption'] === null) {
            $invalidProperties[] = "'transferOption' can't be null";
        }
        $allowedValues = $this->getTransferOptionAllowableValues();
        if (!is_null($this->container['transferOption']) && !in_array($this->container['transferOption'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transferOption', must be one of '%s'",
                $this->container['transferOption'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementMovementType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementMovementType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date Movement date.
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets sourceDatabase
     *
     * @return string
     */
    public function getSourceDatabase()
    {
        return $this->container['sourceDatabase'];
    }

    /**
     * Sets sourceDatabase
     *
     * @param string $sourceDatabase Source database full name.
     *
     * @return self
     */
    public function setSourceDatabase($sourceDatabase)
    {
        if (is_null($sourceDatabase)) {
            throw new \InvalidArgumentException('non-nullable sourceDatabase cannot be null');
        }
        $this->container['sourceDatabase'] = $sourceDatabase;

        return $this;
    }

    /**
     * Gets destinationDatabase
     *
     * @return string
     */
    public function getDestinationDatabase()
    {
        return $this->container['destinationDatabase'];
    }

    /**
     * Sets destinationDatabase
     *
     * @param string $destinationDatabase Destination database full name.
     *
     * @return self
     */
    public function setDestinationDatabase($destinationDatabase)
    {
        if (is_null($destinationDatabase)) {
            throw new \InvalidArgumentException('non-nullable destinationDatabase cannot be null');
        }
        $this->container['destinationDatabase'] = $destinationDatabase;

        return $this;
    }

    /**
     * Gets users
     *
     * @return string[]
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param string[] $users List of users id.
     *
     * @return self
     */
    public function setUsers($users)
    {
        if (is_null($users)) {
            throw new \InvalidArgumentException('non-nullable users cannot be null');
        }
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementOptions|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementOptions|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets userTuples
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementUserTuplePayload[]
     */
    public function getUserTuples()
    {
        return $this->container['userTuples'];
    }

    /**
     * Sets userTuples
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementUserTuplePayload[] $userTuples User tuples.
     *
     * @return self
     */
    public function setUserTuples($userTuples)
    {
        if (is_null($userTuples)) {
            throw new \InvalidArgumentException('non-nullable userTuples cannot be null');
        }
        $this->container['userTuples'] = $userTuples;

        return $this;
    }

    /**
     * Gets sourceUser
     *
     * @return string
     */
    public function getSourceUser()
    {
        return $this->container['sourceUser'];
    }

    /**
     * Sets sourceUser
     *
     * @param string $sourceUser Source user id.
     *
     * @return self
     */
    public function setSourceUser($sourceUser)
    {
        if (is_null($sourceUser)) {
            throw new \InvalidArgumentException('non-nullable sourceUser cannot be null');
        }
        $this->container['sourceUser'] = $sourceUser;

        return $this;
    }

    /**
     * Gets sourceDistributionList
     *
     * @return string|null
     */
    public function getSourceDistributionList()
    {
        return $this->container['sourceDistributionList'];
    }

    /**
     * Sets sourceDistributionList
     *
     * @param string|null $sourceDistributionList Source distribution list.
     *
     * @return self
     */
    public function setSourceDistributionList($sourceDistributionList)
    {
        if (is_null($sourceDistributionList)) {
            throw new \InvalidArgumentException('non-nullable sourceDistributionList cannot be null');
        }
        $this->container['sourceDistributionList'] = $sourceDistributionList;

        return $this;
    }

    /**
     * Gets destinationUser
     *
     * @return string
     */
    public function getDestinationUser()
    {
        return $this->container['destinationUser'];
    }

    /**
     * Sets destinationUser
     *
     * @param string $destinationUser Destination user id.
     *
     * @return self
     */
    public function setDestinationUser($destinationUser)
    {
        if (is_null($destinationUser)) {
            throw new \InvalidArgumentException('non-nullable destinationUser cannot be null');
        }
        $this->container['destinationUser'] = $destinationUser;

        return $this;
    }

    /**
     * Gets transferOption
     *
     * @return string
     */
    public function getTransferOption()
    {
        return $this->container['transferOption'];
    }

    /**
     * Sets transferOption
     *
     * @param string $transferOption Transfer option.
     *
     * @return self
     */
    public function setTransferOption($transferOption)
    {
        if (is_null($transferOption)) {
            array_push($this->openAPINullablesSetToNull, 'transferOption');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transferOption', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTransferOptionAllowableValues();
        if (!is_null($transferOption) && !in_array($transferOption, $allowedValues, true)) {
            $transferOption = self::TRANSFER_OPTION_UNKNOWN_DEFAULT_OPEN_API;
        }
        $this->container['transferOption'] = $transferOption;

        return $this;
    }

    /**
     * Gets capsilFile
     *
     * @return string|null
     */
    public function getCapsilFile()
    {
        return $this->container['capsilFile'];
    }

    /**
     * Sets capsilFile
     *
     * @param string|null $capsilFile Path to the Capsil file.
     *
     * @return self
     */
    public function setCapsilFile($capsilFile)
    {
        if (is_null($capsilFile)) {
            array_push($this->openAPINullablesSetToNull, 'capsilFile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('capsilFile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['capsilFile'] = $capsilFile;

        return $this;
    }

    /**
     * Gets univerisFile
     *
     * @return string|null
     * @deprecated
     */
    public function getUniverisFile()
    {
        return $this->container['univerisFile'];
    }

    /**
     * Sets univerisFile
     *
     * @param string|null $univerisFile Path to the Univeris file. Deprecated: Univeris file is not supported anymore and will be removed in a future version.
     *
     * @return self
     * @deprecated
     */
    public function setUniverisFile($univerisFile)
    {
        if (is_null($univerisFile)) {
            array_push($this->openAPINullablesSetToNull, 'univerisFile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('univerisFile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['univerisFile'] = $univerisFile;

        return $this;
    }

    /**
     * Gets dataphileFile
     *
     * @return string|null
     */
    public function getDataphileFile()
    {
        return $this->container['dataphileFile'];
    }

    /**
     * Sets dataphileFile
     *
     * @param string|null $dataphileFile Path to the Dataphile.
     *
     * @return self
     */
    public function setDataphileFile($dataphileFile)
    {
        if (is_null($dataphileFile)) {
            array_push($this->openAPINullablesSetToNull, 'dataphileFile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dataphileFile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dataphileFile'] = $dataphileFile;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


