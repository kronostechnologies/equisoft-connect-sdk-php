<?php
/**
 * ContactsContact
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * ContactsContact Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ContactsContact implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'contacts.Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'uuid' => 'string',
        'contactType' => 'string',
        'displayName' => 'string',
        'sortName' => 'string',
        'notes' => 'string',
        'notesAdditionalInformation' => 'string',
        'creationDate' => '\DateTime',
        'lastUpdateDate' => '\DateTime',
        'identification' => '\Equisoft\SDK\EquisoftConnect\Model\ContactContactIdentification',
        'additionalInformation' => '\Equisoft\SDK\EquisoftConnect\Model\ContactContactAdditionalInformation',
        'currentMaritalStatus' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsContactCurrentMaritalStatus',
        'currentOccupation' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsContactCurrentOccupation',
        'segmentation' => '\Equisoft\SDK\EquisoftConnect\Model\ContactContactSegmentation',
        'addresses' => '\Equisoft\SDK\EquisoftConnect\Model\ContactContactAddress[]',
        'phones' => '\Equisoft\SDK\EquisoftConnect\Model\ContactContactPhone[]',
        'emails' => '\Equisoft\SDK\EquisoftConnect\Model\ContactContactEmail[]',
        'websites' => '\Equisoft\SDK\EquisoftConnect\Model\ContactContactWebsite[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'uuid' => null,
        'contactType' => null,
        'displayName' => null,
        'sortName' => null,
        'notes' => null,
        'notesAdditionalInformation' => null,
        'creationDate' => 'date-time',
        'lastUpdateDate' => 'date-time',
        'identification' => null,
        'additionalInformation' => null,
        'currentMaritalStatus' => null,
        'currentOccupation' => null,
        'segmentation' => null,
        'addresses' => null,
        'phones' => null,
        'emails' => null,
        'websites' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'uuid' => 'uuid',
        'contactType' => 'contactType',
        'displayName' => 'displayName',
        'sortName' => 'sortName',
        'notes' => 'notes',
        'notesAdditionalInformation' => 'notesAdditionalInformation',
        'creationDate' => 'creationDate',
        'lastUpdateDate' => 'lastUpdateDate',
        'identification' => 'identification',
        'additionalInformation' => 'additionalInformation',
        'currentMaritalStatus' => 'currentMaritalStatus',
        'currentOccupation' => 'currentOccupation',
        'segmentation' => 'segmentation',
        'addresses' => 'addresses',
        'phones' => 'phones',
        'emails' => 'emails',
        'websites' => 'websites'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'uuid' => 'setUuid',
        'contactType' => 'setContactType',
        'displayName' => 'setDisplayName',
        'sortName' => 'setSortName',
        'notes' => 'setNotes',
        'notesAdditionalInformation' => 'setNotesAdditionalInformation',
        'creationDate' => 'setCreationDate',
        'lastUpdateDate' => 'setLastUpdateDate',
        'identification' => 'setIdentification',
        'additionalInformation' => 'setAdditionalInformation',
        'currentMaritalStatus' => 'setCurrentMaritalStatus',
        'currentOccupation' => 'setCurrentOccupation',
        'segmentation' => 'setSegmentation',
        'addresses' => 'setAddresses',
        'phones' => 'setPhones',
        'emails' => 'setEmails',
        'websites' => 'setWebsites'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'uuid' => 'getUuid',
        'contactType' => 'getContactType',
        'displayName' => 'getDisplayName',
        'sortName' => 'getSortName',
        'notes' => 'getNotes',
        'notesAdditionalInformation' => 'getNotesAdditionalInformation',
        'creationDate' => 'getCreationDate',
        'lastUpdateDate' => 'getLastUpdateDate',
        'identification' => 'getIdentification',
        'additionalInformation' => 'getAdditionalInformation',
        'currentMaritalStatus' => 'getCurrentMaritalStatus',
        'currentOccupation' => 'getCurrentOccupation',
        'segmentation' => 'getSegmentation',
        'addresses' => 'getAddresses',
        'phones' => 'getPhones',
        'emails' => 'getEmails',
        'websites' => 'getWebsites'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['uuid'] = $data['uuid'] ?? null;
        $this->container['contactType'] = $data['contactType'] ?? null;
        $this->container['displayName'] = $data['displayName'] ?? null;
        $this->container['sortName'] = $data['sortName'] ?? null;
        $this->container['notes'] = $data['notes'] ?? null;
        $this->container['notesAdditionalInformation'] = $data['notesAdditionalInformation'] ?? null;
        $this->container['creationDate'] = $data['creationDate'] ?? null;
        $this->container['lastUpdateDate'] = $data['lastUpdateDate'] ?? null;
        $this->container['identification'] = $data['identification'] ?? null;
        $this->container['additionalInformation'] = $data['additionalInformation'] ?? null;
        $this->container['currentMaritalStatus'] = $data['currentMaritalStatus'] ?? null;
        $this->container['currentOccupation'] = $data['currentOccupation'] ?? null;
        $this->container['segmentation'] = $data['segmentation'] ?? null;
        $this->container['addresses'] = $data['addresses'] ?? null;
        $this->container['phones'] = $data['phones'] ?? null;
        $this->container['emails'] = $data['emails'] ?? null;
        $this->container['websites'] = $data['websites'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['uuid'] === null) {
            $invalidProperties[] = "'uuid' can't be null";
        }
        if ($this->container['contactType'] === null) {
            $invalidProperties[] = "'contactType' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets contactType
     *
     * @return string
     */
    public function getContactType()
    {
        return $this->container['contactType'];
    }

    /**
     * Sets contactType
     *
     * @param string $contactType contactType
     *
     * @return self
     */
    public function setContactType($contactType)
    {
        $this->container['contactType'] = $contactType;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName displayName
     *
     * @return self
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets sortName
     *
     * @return string|null
     */
    public function getSortName()
    {
        return $this->container['sortName'];
    }

    /**
     * Sets sortName
     *
     * @param string|null $sortName sortName
     *
     * @return self
     */
    public function setSortName($sortName)
    {
        $this->container['sortName'] = $sortName;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets notesAdditionalInformation
     *
     * @return string|null
     */
    public function getNotesAdditionalInformation()
    {
        return $this->container['notesAdditionalInformation'];
    }

    /**
     * Sets notesAdditionalInformation
     *
     * @param string|null $notesAdditionalInformation notesAdditionalInformation
     *
     * @return self
     */
    public function setNotesAdditionalInformation($notesAdditionalInformation)
    {
        $this->container['notesAdditionalInformation'] = $notesAdditionalInformation;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime|null $creationDate creationDate
     *
     * @return self
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets lastUpdateDate
     *
     * @return \DateTime|null
     */
    public function getLastUpdateDate()
    {
        return $this->container['lastUpdateDate'];
    }

    /**
     * Sets lastUpdateDate
     *
     * @param \DateTime|null $lastUpdateDate lastUpdateDate
     *
     * @return self
     */
    public function setLastUpdateDate($lastUpdateDate)
    {
        $this->container['lastUpdateDate'] = $lastUpdateDate;

        return $this;
    }

    /**
     * Gets identification
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactContactIdentification|null
     */
    public function getIdentification()
    {
        return $this->container['identification'];
    }

    /**
     * Sets identification
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactContactIdentification|null $identification identification
     *
     * @return self
     */
    public function setIdentification($identification)
    {
        $this->container['identification'] = $identification;

        return $this;
    }

    /**
     * Gets additionalInformation
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactContactAdditionalInformation|null
     */
    public function getAdditionalInformation()
    {
        return $this->container['additionalInformation'];
    }

    /**
     * Sets additionalInformation
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactContactAdditionalInformation|null $additionalInformation additionalInformation
     *
     * @return self
     */
    public function setAdditionalInformation($additionalInformation)
    {
        $this->container['additionalInformation'] = $additionalInformation;

        return $this;
    }

    /**
     * Gets currentMaritalStatus
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsContactCurrentMaritalStatus|null
     */
    public function getCurrentMaritalStatus()
    {
        return $this->container['currentMaritalStatus'];
    }

    /**
     * Sets currentMaritalStatus
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsContactCurrentMaritalStatus|null $currentMaritalStatus currentMaritalStatus
     *
     * @return self
     */
    public function setCurrentMaritalStatus($currentMaritalStatus)
    {
        $this->container['currentMaritalStatus'] = $currentMaritalStatus;

        return $this;
    }

    /**
     * Gets currentOccupation
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsContactCurrentOccupation|null
     */
    public function getCurrentOccupation()
    {
        return $this->container['currentOccupation'];
    }

    /**
     * Sets currentOccupation
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsContactCurrentOccupation|null $currentOccupation currentOccupation
     *
     * @return self
     */
    public function setCurrentOccupation($currentOccupation)
    {
        $this->container['currentOccupation'] = $currentOccupation;

        return $this;
    }

    /**
     * Gets segmentation
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactContactSegmentation|null
     */
    public function getSegmentation()
    {
        return $this->container['segmentation'];
    }

    /**
     * Sets segmentation
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactContactSegmentation|null $segmentation segmentation
     *
     * @return self
     */
    public function setSegmentation($segmentation)
    {
        $this->container['segmentation'] = $segmentation;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactContactAddress[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactContactAddress[]|null $addresses List of contact's addresses
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactContactPhone[]|null
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactContactPhone[]|null $phones List of contact's phones
     *
     * @return self
     */
    public function setPhones($phones)
    {
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactContactEmail[]|null
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactContactEmail[]|null $emails List of contact's emails
     *
     * @return self
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets websites
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactContactWebsite[]|null
     */
    public function getWebsites()
    {
        return $this->container['websites'];
    }

    /**
     * Sets websites
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactContactWebsite[]|null $websites List of contact's websites
     *
     * @return self
     */
    public function setWebsites($websites)
    {
        $this->container['websites'] = $websites;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


