<?php
/**
 * ContactsContact
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-equisoft-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * ContactsContact Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContactsContact implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'contacts.Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'uuid' => 'string',
        'contactType' => 'string',
        'displayName' => 'string',
        'sortName' => 'string',
        'notes' => 'string',
        'notesAdditionalInformation' => 'string',
        'creationDate' => '\DateTime',
        'lastUpdateDate' => '\DateTime',
        'identification' => '\Equisoft\SDK\EquisoftConnect\Model\ContactContactIdentification',
        'additionalInformation' => '\Equisoft\SDK\EquisoftConnect\Model\ContactContactAdditionalInformation',
        'currentMaritalStatus' => '\Equisoft\SDK\EquisoftConnect\Model\ContactContactMaritalStatus',
        'currentCivilStatus' => '\Equisoft\SDK\EquisoftConnect\Model\ContactContactMaritalStatus',
        'currentOccupation' => '\Equisoft\SDK\EquisoftConnect\Model\ContactContactOccupation',
        'segmentation' => '\Equisoft\SDK\EquisoftConnect\Model\ContactContactSegmentation',
        'addresses' => '\Equisoft\SDK\EquisoftConnect\Model\ContactContactAddress[]',
        'phones' => '\Equisoft\SDK\EquisoftConnect\Model\ContactContactPhone[]',
        'emails' => '\Equisoft\SDK\EquisoftConnect\Model\ContactContactEmail[]',
        'websites' => '\Equisoft\SDK\EquisoftConnect\Model\ContactContactWebsite[]',
        'links' => '\Equisoft\SDK\EquisoftConnect\Model\ContactLink[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'uuid' => null,
        'contactType' => null,
        'displayName' => null,
        'sortName' => null,
        'notes' => null,
        'notesAdditionalInformation' => null,
        'creationDate' => 'date-time',
        'lastUpdateDate' => 'date-time',
        'identification' => null,
        'additionalInformation' => null,
        'currentMaritalStatus' => null,
        'currentCivilStatus' => null,
        'currentOccupation' => null,
        'segmentation' => null,
        'addresses' => null,
        'phones' => null,
        'emails' => null,
        'websites' => null,
        'links' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'uuid' => false,
		'contactType' => false,
		'displayName' => false,
		'sortName' => false,
		'notes' => false,
		'notesAdditionalInformation' => false,
		'creationDate' => true,
		'lastUpdateDate' => true,
		'identification' => false,
		'additionalInformation' => false,
		'currentMaritalStatus' => true,
		'currentCivilStatus' => true,
		'currentOccupation' => true,
		'segmentation' => false,
		'addresses' => false,
		'phones' => false,
		'emails' => false,
		'websites' => false,
		'links' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'uuid' => 'uuid',
        'contactType' => 'contactType',
        'displayName' => 'displayName',
        'sortName' => 'sortName',
        'notes' => 'notes',
        'notesAdditionalInformation' => 'notesAdditionalInformation',
        'creationDate' => 'creationDate',
        'lastUpdateDate' => 'lastUpdateDate',
        'identification' => 'identification',
        'additionalInformation' => 'additionalInformation',
        'currentMaritalStatus' => 'currentMaritalStatus',
        'currentCivilStatus' => 'currentCivilStatus',
        'currentOccupation' => 'currentOccupation',
        'segmentation' => 'segmentation',
        'addresses' => 'addresses',
        'phones' => 'phones',
        'emails' => 'emails',
        'websites' => 'websites',
        'links' => 'links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'uuid' => 'setUuid',
        'contactType' => 'setContactType',
        'displayName' => 'setDisplayName',
        'sortName' => 'setSortName',
        'notes' => 'setNotes',
        'notesAdditionalInformation' => 'setNotesAdditionalInformation',
        'creationDate' => 'setCreationDate',
        'lastUpdateDate' => 'setLastUpdateDate',
        'identification' => 'setIdentification',
        'additionalInformation' => 'setAdditionalInformation',
        'currentMaritalStatus' => 'setCurrentMaritalStatus',
        'currentCivilStatus' => 'setCurrentCivilStatus',
        'currentOccupation' => 'setCurrentOccupation',
        'segmentation' => 'setSegmentation',
        'addresses' => 'setAddresses',
        'phones' => 'setPhones',
        'emails' => 'setEmails',
        'websites' => 'setWebsites',
        'links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'uuid' => 'getUuid',
        'contactType' => 'getContactType',
        'displayName' => 'getDisplayName',
        'sortName' => 'getSortName',
        'notes' => 'getNotes',
        'notesAdditionalInformation' => 'getNotesAdditionalInformation',
        'creationDate' => 'getCreationDate',
        'lastUpdateDate' => 'getLastUpdateDate',
        'identification' => 'getIdentification',
        'additionalInformation' => 'getAdditionalInformation',
        'currentMaritalStatus' => 'getCurrentMaritalStatus',
        'currentCivilStatus' => 'getCurrentCivilStatus',
        'currentOccupation' => 'getCurrentOccupation',
        'segmentation' => 'getSegmentation',
        'addresses' => 'getAddresses',
        'phones' => 'getPhones',
        'emails' => 'getEmails',
        'websites' => 'getWebsites',
        'links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('contactType', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('sortName', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('notesAdditionalInformation', $data ?? [], null);
        $this->setIfExists('creationDate', $data ?? [], null);
        $this->setIfExists('lastUpdateDate', $data ?? [], null);
        $this->setIfExists('identification', $data ?? [], null);
        $this->setIfExists('additionalInformation', $data ?? [], null);
        $this->setIfExists('currentMaritalStatus', $data ?? [], null);
        $this->setIfExists('currentCivilStatus', $data ?? [], null);
        $this->setIfExists('currentOccupation', $data ?? [], null);
        $this->setIfExists('segmentation', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('phones', $data ?? [], null);
        $this->setIfExists('emails', $data ?? [], null);
        $this->setIfExists('websites', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['uuid'] === null) {
            $invalidProperties[] = "'uuid' can't be null";
        }
        if ($this->container['contactType'] === null) {
            $invalidProperties[] = "'contactType' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Contact unique numeric identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid Contact unique string identifier
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets contactType
     *
     * @return string
     */
    public function getContactType()
    {
        return $this->container['contactType'];
    }

    /**
     * Sets contactType
     *
     * @param string $contactType Contact type ('CUS','OTHER')
     *
     * @return self
     */
    public function setContactType($contactType)
    {
        if (is_null($contactType)) {
            throw new \InvalidArgumentException('non-nullable contactType cannot be null');
        }
        $this->container['contactType'] = $contactType;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName Contact complete name (\"[Last name] [First Name]\") or company Name for 'Organization' contact
     *
     * @return self
     */
    public function setDisplayName($displayName)
    {
        if (is_null($displayName)) {
            throw new \InvalidArgumentException('non-nullable displayName cannot be null');
        }
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets sortName
     *
     * @return string|null
     */
    public function getSortName()
    {
        return $this->container['sortName'];
    }

    /**
     * Sets sortName
     *
     * @param string|null $sortName Contact sort name
     *
     * @return self
     */
    public function setSortName($sortName)
    {
        if (is_null($sortName)) {
            throw new \InvalidArgumentException('non-nullable sortName cannot be null');
        }
        $this->container['sortName'] = $sortName;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Contact notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets notesAdditionalInformation
     *
     * @return string|null
     */
    public function getNotesAdditionalInformation()
    {
        return $this->container['notesAdditionalInformation'];
    }

    /**
     * Sets notesAdditionalInformation
     *
     * @param string|null $notesAdditionalInformation Contact additional information related to the notes
     *
     * @return self
     */
    public function setNotesAdditionalInformation($notesAdditionalInformation)
    {
        if (is_null($notesAdditionalInformation)) {
            throw new \InvalidArgumentException('non-nullable notesAdditionalInformation cannot be null');
        }
        $this->container['notesAdditionalInformation'] = $notesAdditionalInformation;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime|null $creationDate Creation time. As defined by date-time - RFC3339
     *
     * @return self
     */
    public function setCreationDate($creationDate)
    {
        if (is_null($creationDate)) {
            array_push($this->openAPINullablesSetToNull, 'creationDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creationDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets lastUpdateDate
     *
     * @return \DateTime|null
     */
    public function getLastUpdateDate()
    {
        return $this->container['lastUpdateDate'];
    }

    /**
     * Sets lastUpdateDate
     *
     * @param \DateTime|null $lastUpdateDate Last update time. As defined by date-time - RFC3339
     *
     * @return self
     */
    public function setLastUpdateDate($lastUpdateDate)
    {
        if (is_null($lastUpdateDate)) {
            array_push($this->openAPINullablesSetToNull, 'lastUpdateDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastUpdateDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastUpdateDate'] = $lastUpdateDate;

        return $this;
    }

    /**
     * Gets identification
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactContactIdentification|null
     */
    public function getIdentification()
    {
        return $this->container['identification'];
    }

    /**
     * Sets identification
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactContactIdentification|null $identification identification
     *
     * @return self
     */
    public function setIdentification($identification)
    {
        if (is_null($identification)) {
            throw new \InvalidArgumentException('non-nullable identification cannot be null');
        }
        $this->container['identification'] = $identification;

        return $this;
    }

    /**
     * Gets additionalInformation
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactContactAdditionalInformation|null
     */
    public function getAdditionalInformation()
    {
        return $this->container['additionalInformation'];
    }

    /**
     * Sets additionalInformation
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactContactAdditionalInformation|null $additionalInformation additionalInformation
     *
     * @return self
     */
    public function setAdditionalInformation($additionalInformation)
    {
        if (is_null($additionalInformation)) {
            throw new \InvalidArgumentException('non-nullable additionalInformation cannot be null');
        }
        $this->container['additionalInformation'] = $additionalInformation;

        return $this;
    }

    /**
     * Gets currentMaritalStatus
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactContactMaritalStatus|null
     */
    public function getCurrentMaritalStatus()
    {
        return $this->container['currentMaritalStatus'];
    }

    /**
     * Sets currentMaritalStatus
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactContactMaritalStatus|null $currentMaritalStatus currentMaritalStatus
     *
     * @return self
     */
    public function setCurrentMaritalStatus($currentMaritalStatus)
    {
        if (is_null($currentMaritalStatus)) {
            array_push($this->openAPINullablesSetToNull, 'currentMaritalStatus');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currentMaritalStatus', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currentMaritalStatus'] = $currentMaritalStatus;

        return $this;
    }

    /**
     * Gets currentCivilStatus
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactContactMaritalStatus|null
     */
    public function getCurrentCivilStatus()
    {
        return $this->container['currentCivilStatus'];
    }

    /**
     * Sets currentCivilStatus
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactContactMaritalStatus|null $currentCivilStatus currentCivilStatus
     *
     * @return self
     */
    public function setCurrentCivilStatus($currentCivilStatus)
    {
        if (is_null($currentCivilStatus)) {
            array_push($this->openAPINullablesSetToNull, 'currentCivilStatus');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currentCivilStatus', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currentCivilStatus'] = $currentCivilStatus;

        return $this;
    }

    /**
     * Gets currentOccupation
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactContactOccupation|null
     */
    public function getCurrentOccupation()
    {
        return $this->container['currentOccupation'];
    }

    /**
     * Sets currentOccupation
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactContactOccupation|null $currentOccupation currentOccupation
     *
     * @return self
     */
    public function setCurrentOccupation($currentOccupation)
    {
        if (is_null($currentOccupation)) {
            array_push($this->openAPINullablesSetToNull, 'currentOccupation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currentOccupation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currentOccupation'] = $currentOccupation;

        return $this;
    }

    /**
     * Gets segmentation
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactContactSegmentation|null
     */
    public function getSegmentation()
    {
        return $this->container['segmentation'];
    }

    /**
     * Sets segmentation
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactContactSegmentation|null $segmentation segmentation
     *
     * @return self
     */
    public function setSegmentation($segmentation)
    {
        if (is_null($segmentation)) {
            throw new \InvalidArgumentException('non-nullable segmentation cannot be null');
        }
        $this->container['segmentation'] = $segmentation;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactContactAddress[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactContactAddress[]|null $addresses List of contact's addresses
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            throw new \InvalidArgumentException('non-nullable addresses cannot be null');
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactContactPhone[]|null
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactContactPhone[]|null $phones List of contact's phones
     *
     * @return self
     */
    public function setPhones($phones)
    {
        if (is_null($phones)) {
            throw new \InvalidArgumentException('non-nullable phones cannot be null');
        }
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactContactEmail[]|null
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactContactEmail[]|null $emails List of contact's emails
     *
     * @return self
     */
    public function setEmails($emails)
    {
        if (is_null($emails)) {
            throw new \InvalidArgumentException('non-nullable emails cannot be null');
        }
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets websites
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactContactWebsite[]|null
     */
    public function getWebsites()
    {
        return $this->container['websites'];
    }

    /**
     * Sets websites
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactContactWebsite[]|null $websites List of contact's websites
     *
     * @return self
     */
    public function setWebsites($websites)
    {
        if (is_null($websites)) {
            throw new \InvalidArgumentException('non-nullable websites cannot be null');
        }
        $this->container['websites'] = $websites;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactLink[]|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactLink[]|null $links List of contact's links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


