<?php
/**
 * LegacyContactAddress
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * LegacyContactAddress Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LegacyContactAddress implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'legacy.contact.Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int','main' => 'string','postal' => 'string','type' => 'string','typeId' => 'int','line1' => 'string','line2' => 'string','city' => 'string','stateProvince' => 'string','country' => 'string','postalCode' => 'string','civicNumber' => 'string','road' => 'string','extType' => 'string','extNumber' => 'string','notes' => 'string','locked' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,'main' => null,'postal' => null,'type' => null,'typeId' => null,'line1' => null,'line2' => null,'city' => null,'stateProvince' => null,'country' => null,'postalCode' => null,'civicNumber' => null,'road' => null,'extType' => null,'extNumber' => null,'notes' => null,'locked' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id','main' => 'main','postal' => 'postal','type' => 'type','typeId' => 'typeId','line1' => 'line1','line2' => 'line2','city' => 'city','stateProvince' => 'stateProvince','country' => 'country','postalCode' => 'postalCode','civicNumber' => 'civicNumber','road' => 'road','extType' => 'extType','extNumber' => 'extNumber','notes' => 'notes','locked' => 'locked'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId','main' => 'setMain','postal' => 'setPostal','type' => 'setType','typeId' => 'setTypeId','line1' => 'setLine1','line2' => 'setLine2','city' => 'setCity','stateProvince' => 'setStateProvince','country' => 'setCountry','postalCode' => 'setPostalCode','civicNumber' => 'setCivicNumber','road' => 'setRoad','extType' => 'setExtType','extNumber' => 'setExtNumber','notes' => 'setNotes','locked' => 'setLocked'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId','main' => 'getMain','postal' => 'getPostal','type' => 'getType','typeId' => 'getTypeId','line1' => 'getLine1','line2' => 'getLine2','city' => 'getCity','stateProvince' => 'getStateProvince','country' => 'getCountry','postalCode' => 'getPostalCode','civicNumber' => 'getCivicNumber','road' => 'getRoad','extType' => 'getExtType','extNumber' => 'getExtNumber','notes' => 'getNotes','locked' => 'getLocked'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['main'] = isset($data['main']) ? $data['main'] : null;
        $this->container['postal'] = isset($data['postal']) ? $data['postal'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['typeId'] = isset($data['typeId']) ? $data['typeId'] : null;
        $this->container['line1'] = isset($data['line1']) ? $data['line1'] : null;
        $this->container['line2'] = isset($data['line2']) ? $data['line2'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['stateProvince'] = isset($data['stateProvince']) ? $data['stateProvince'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['postalCode'] = isset($data['postalCode']) ? $data['postalCode'] : null;
        $this->container['civicNumber'] = isset($data['civicNumber']) ? $data['civicNumber'] : null;
        $this->container['road'] = isset($data['road']) ? $data['road'] : null;
        $this->container['extType'] = isset($data['extType']) ? $data['extType'] : null;
        $this->container['extNumber'] = isset($data['extNumber']) ? $data['extNumber'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Unique Identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets main
     *
     * @return string|null
     */
    public function getMain()
    {
        return $this->container['main'];
    }

    /**
     * Sets main
     *
     * @param string|null $main If the address is the main address or not (true|false)
     *
     * @return $this
     */
    public function setMain($main)
    {
        $this->container['main'] = $main;

        return $this;
    }

    /**
     * Gets postal
     *
     * @return string|null
     */
    public function getPostal()
    {
        return $this->container['postal'];
    }

    /**
     * Sets postal
     *
     * @param string|null $postal If the address is the postal address or not (true|false)
     *
     * @return $this
     */
    public function setPostal($postal)
    {
        $this->container['postal'] = $postal;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Address type (HOME, OFFICE, HOME2, OTHER, Custom Type Label)
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets typeId
     *
     * @return int|null
     */
    public function getTypeId()
    {
        return $this->container['typeId'];
    }

    /**
     * Sets typeId
     *
     * @param int|null $typeId Address type fieldValue id
     *
     * @return $this
     */
    public function setTypeId($typeId)
    {
        $this->container['typeId'] = $typeId;

        return $this;
    }

    /**
     * Gets line1
     *
     * @return string|null
     */
    public function getLine1()
    {
        return $this->container['line1'];
    }

    /**
     * Sets line1
     *
     * @param string|null $line1 First line of address of the contact
     *
     * @return $this
     */
    public function setLine1($line1)
    {
        $this->container['line1'] = $line1;

        return $this;
    }

    /**
     * Gets line2
     *
     * @return string|null
     */
    public function getLine2()
    {
        return $this->container['line2'];
    }

    /**
     * Sets line2
     *
     * @param string|null $line2 second line of address of the contact
     *
     * @return $this
     */
    public function setLine2($line2)
    {
        $this->container['line2'] = $line2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city of the contact
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets stateProvince
     *
     * @return string|null
     */
    public function getStateProvince()
    {
        return $this->container['stateProvince'];
    }

    /**
     * Sets stateProvince
     *
     * @param string|null $stateProvince state or province of the contact
     *
     * @return $this
     */
    public function setStateProvince($stateProvince)
    {
        $this->container['stateProvince'] = $stateProvince;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country of the contact
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     *
     * @param string|null $postalCode postalCode of the contact
     *
     * @return $this
     */
    public function setPostalCode($postalCode)
    {
        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets civicNumber
     *
     * @return string|null
     */
    public function getCivicNumber()
    {
        return $this->container['civicNumber'];
    }

    /**
     * Sets civicNumber
     *
     * @param string|null $civicNumber Industrielle Alliance Only
     *
     * @return $this
     */
    public function setCivicNumber($civicNumber)
    {
        $this->container['civicNumber'] = $civicNumber;

        return $this;
    }

    /**
     * Gets road
     *
     * @return string|null
     */
    public function getRoad()
    {
        return $this->container['road'];
    }

    /**
     * Sets road
     *
     * @param string|null $road Industrielle Alliance Only
     *
     * @return $this
     */
    public function setRoad($road)
    {
        $this->container['road'] = $road;

        return $this;
    }

    /**
     * Gets extType
     *
     * @return string|null
     */
    public function getExtType()
    {
        return $this->container['extType'];
    }

    /**
     * Sets extType
     *
     * @param string|null $extType Industrielle Alliance Only
     *
     * @return $this
     */
    public function setExtType($extType)
    {
        $this->container['extType'] = $extType;

        return $this;
    }

    /**
     * Gets extNumber
     *
     * @return string|null
     */
    public function getExtNumber()
    {
        return $this->container['extNumber'];
    }

    /**
     * Sets extNumber
     *
     * @param string|null $extNumber Industrielle Alliance Only
     *
     * @return $this
     */
    public function setExtNumber($extNumber)
    {
        $this->container['extNumber'] = $extNumber;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return string|null
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param string|null $locked true or false
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


