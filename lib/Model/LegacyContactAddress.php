<?php
/**
 * LegacyContactAddress
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * LegacyContactAddress Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LegacyContactAddress implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'legacy.contact.Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'main' => 'string',
        'postal' => 'string',
        'type' => 'string',
        'typeId' => 'int',
        'line1' => 'string',
        'line2' => 'string',
        'city' => 'string',
        'stateProvince' => 'string',
        'country' => 'string',
        'postalCode' => 'string',
        'civicNumber' => 'string',
        'road' => 'string',
        'extType' => 'string',
        'extNumber' => 'string',
        'notes' => 'string',
        'locked' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'main' => null,
        'postal' => null,
        'type' => null,
        'typeId' => null,
        'line1' => null,
        'line2' => null,
        'city' => null,
        'stateProvince' => null,
        'country' => null,
        'postalCode' => null,
        'civicNumber' => null,
        'road' => null,
        'extType' => null,
        'extNumber' => null,
        'notes' => null,
        'locked' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'main' => 'main',
        'postal' => 'postal',
        'type' => 'type',
        'typeId' => 'typeId',
        'line1' => 'line1',
        'line2' => 'line2',
        'city' => 'city',
        'stateProvince' => 'stateProvince',
        'country' => 'country',
        'postalCode' => 'postalCode',
        'civicNumber' => 'civicNumber',
        'road' => 'road',
        'extType' => 'extType',
        'extNumber' => 'extNumber',
        'notes' => 'notes',
        'locked' => 'locked'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'main' => 'setMain',
        'postal' => 'setPostal',
        'type' => 'setType',
        'typeId' => 'setTypeId',
        'line1' => 'setLine1',
        'line2' => 'setLine2',
        'city' => 'setCity',
        'stateProvince' => 'setStateProvince',
        'country' => 'setCountry',
        'postalCode' => 'setPostalCode',
        'civicNumber' => 'setCivicNumber',
        'road' => 'setRoad',
        'extType' => 'setExtType',
        'extNumber' => 'setExtNumber',
        'notes' => 'setNotes',
        'locked' => 'setLocked'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'main' => 'getMain',
        'postal' => 'getPostal',
        'type' => 'getType',
        'typeId' => 'getTypeId',
        'line1' => 'getLine1',
        'line2' => 'getLine2',
        'city' => 'getCity',
        'stateProvince' => 'getStateProvince',
        'country' => 'getCountry',
        'postalCode' => 'getPostalCode',
        'civicNumber' => 'getCivicNumber',
        'road' => 'getRoad',
        'extType' => 'getExtType',
        'extNumber' => 'getExtNumber',
        'notes' => 'getNotes',
        'locked' => 'getLocked'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MAIN_FALSE = 'false';
    public const MAIN_TRUE = 'true';
    public const MAIN_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const POSTAL_FALSE = 'false';
    public const POSTAL_TRUE = 'true';
    public const POSTAL_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const LOCKED_FALSE = 'false';
    public const LOCKED_TRUE = 'true';
    public const LOCKED_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMainAllowableValues()
    {
        return [
            self::MAIN_FALSE,
            self::MAIN_TRUE,
            self::MAIN_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPostalAllowableValues()
    {
        return [
            self::POSTAL_FALSE,
            self::POSTAL_TRUE,
            self::POSTAL_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLockedAllowableValues()
    {
        return [
            self::LOCKED_FALSE,
            self::LOCKED_TRUE,
            self::LOCKED_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['main'] = $data['main'] ?? null;
        $this->container['postal'] = $data['postal'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['typeId'] = $data['typeId'] ?? null;
        $this->container['line1'] = $data['line1'] ?? null;
        $this->container['line2'] = $data['line2'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['stateProvince'] = $data['stateProvince'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['postalCode'] = $data['postalCode'] ?? null;
        $this->container['civicNumber'] = $data['civicNumber'] ?? null;
        $this->container['road'] = $data['road'] ?? null;
        $this->container['extType'] = $data['extType'] ?? null;
        $this->container['extNumber'] = $data['extNumber'] ?? null;
        $this->container['notes'] = $data['notes'] ?? null;
        $this->container['locked'] = $data['locked'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMainAllowableValues();
        if (!is_null($this->container['main']) && !in_array($this->container['main'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'main', must be one of '%s'",
                $this->container['main'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPostalAllowableValues();
        if (!is_null($this->container['postal']) && !in_array($this->container['postal'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'postal', must be one of '%s'",
                $this->container['postal'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLockedAllowableValues();
        if (!is_null($this->container['locked']) && !in_array($this->container['locked'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'locked', must be one of '%s'",
                $this->container['locked'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Unique Identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets main
     *
     * @return string|null
     */
    public function getMain()
    {
        return $this->container['main'];
    }

    /**
     * Sets main
     *
     * @param string|null $main Is the main address.
     *
     * @return self
     */
    public function setMain($main)
    {
        $allowedValues = $this->getMainAllowableValues();
        if (!is_null($main) && !in_array($main, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'main', must be one of '%s'",
                    $main,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['main'] = $main;

        return $this;
    }

    /**
     * Gets postal
     *
     * @return string|null
     */
    public function getPostal()
    {
        return $this->container['postal'];
    }

    /**
     * Sets postal
     *
     * @param string|null $postal Is the postal address.
     *
     * @return self
     */
    public function setPostal($postal)
    {
        $allowedValues = $this->getPostalAllowableValues();
        if (!is_null($postal) && !in_array($postal, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'postal', must be one of '%s'",
                    $postal,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['postal'] = $postal;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Address type (HOME, OFFICE, HOME2, OTHER, Custom Type Label).
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets typeId
     *
     * @return int|null
     */
    public function getTypeId()
    {
        return $this->container['typeId'];
    }

    /**
     * Sets typeId
     *
     * @param int|null $typeId Address type fieldValue id.
     *
     * @return self
     */
    public function setTypeId($typeId)
    {
        $this->container['typeId'] = $typeId;

        return $this;
    }

    /**
     * Gets line1
     *
     * @return string|null
     */
    public function getLine1()
    {
        return $this->container['line1'];
    }

    /**
     * Sets line1
     *
     * @param string|null $line1 First line of address of the contact.
     *
     * @return self
     */
    public function setLine1($line1)
    {
        $this->container['line1'] = $line1;

        return $this;
    }

    /**
     * Gets line2
     *
     * @return string|null
     */
    public function getLine2()
    {
        return $this->container['line2'];
    }

    /**
     * Sets line2
     *
     * @param string|null $line2 Second line of address of the contact.
     *
     * @return self
     */
    public function setLine2($line2)
    {
        $this->container['line2'] = $line2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City of the contact.
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets stateProvince
     *
     * @return string|null
     */
    public function getStateProvince()
    {
        return $this->container['stateProvince'];
    }

    /**
     * Sets stateProvince
     *
     * @param string|null $stateProvince State or province of the contact.
     *
     * @return self
     */
    public function setStateProvince($stateProvince)
    {
        $this->container['stateProvince'] = $stateProvince;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country of the contact.
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     *
     * @param string|null $postalCode PostalCode of the contact.
     *
     * @return self
     */
    public function setPostalCode($postalCode)
    {
        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets civicNumber
     *
     * @return string|null
     */
    public function getCivicNumber()
    {
        return $this->container['civicNumber'];
    }

    /**
     * Sets civicNumber
     *
     * @param string|null $civicNumber Industrielle Alliance Only.
     *
     * @return self
     */
    public function setCivicNumber($civicNumber)
    {
        $this->container['civicNumber'] = $civicNumber;

        return $this;
    }

    /**
     * Gets road
     *
     * @return string|null
     */
    public function getRoad()
    {
        return $this->container['road'];
    }

    /**
     * Sets road
     *
     * @param string|null $road Industrielle Alliance Only.
     *
     * @return self
     */
    public function setRoad($road)
    {
        $this->container['road'] = $road;

        return $this;
    }

    /**
     * Gets extType
     *
     * @return string|null
     */
    public function getExtType()
    {
        return $this->container['extType'];
    }

    /**
     * Sets extType
     *
     * @param string|null $extType Industrielle Alliance Only.
     *
     * @return self
     */
    public function setExtType($extType)
    {
        $this->container['extType'] = $extType;

        return $this;
    }

    /**
     * Gets extNumber
     *
     * @return string|null
     */
    public function getExtNumber()
    {
        return $this->container['extNumber'];
    }

    /**
     * Sets extNumber
     *
     * @param string|null $extNumber Industrielle Alliance Only.
     *
     * @return self
     */
    public function setExtNumber($extNumber)
    {
        $this->container['extNumber'] = $extNumber;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Notes about the address.
     *
     * @return self
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return string|null
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param string|null $locked Is the address locked.
     *
     * @return self
     */
    public function setLocked($locked)
    {
        $allowedValues = $this->getLockedAllowableValues();
        if (!is_null($locked) && !in_array($locked, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'locked', must be one of '%s'",
                    $locked,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['locked'] = $locked;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


