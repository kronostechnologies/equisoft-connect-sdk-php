<?php
/**
 * LegacyContactContactPayloadItemAllOf
 *
 * PHP version 5
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * LegacyContactContactPayloadItemAllOf Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LegacyContactContactPayloadItemAllOf implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'legacy_contact_ContactPayloadItem_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'externalKey' => 'string',
        'externalKeyType' => 'string',
        'gender' => 'string',
        'sin' => 'string',
        'birthdate' => 'string',
        'smoker' => 'string',
        'smokerSince' => 'string',
        'phoneHome' => 'string',
        'phoneHomeSecond' => 'string',
        'phoneAssistant' => 'string',
        'phoneOffice' => 'string',
        'phoneOfficeSecond' => 'string',
        'phoneCell' => 'string',
        'phonePager' => 'string',
        'phoneFax' => 'string',
        'mainEmail' => 'string',
        'emailPersonal' => 'string',
        'webSite' => 'string',
        'emailBusiness' => 'string',
        'emailOther' => 'string',
        'notes' => 'string',
        'peculiarity' => 'string',
        'endFinancialYear' => 'string',
        'language' => 'string',
        'active' => 'string',
        'publish' => 'string',
        'title' => 'string',
        'suffix' => 'string',
        'civility' => 'string',
        'civilityId' => 'int',
        'personAddressed' => 'string',
        'organizationLine1' => 'string',
        'organizationLine2' => 'string',
        'department' => 'string',
        'customerNumber' => 'string',
        'birthPlace' => 'string',
        'nationality' => 'string',
        'orgDateCreated' => 'string',
        'orgDateClosed' => 'string',
        'dateEndFinancialYear' => 'string',
        'orgIdNo' => 'string',
        'orgFedNo' => 'string',
        'orgProvNo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'externalKey' => null,
        'externalKeyType' => null,
        'gender' => null,
        'sin' => null,
        'birthdate' => null,
        'smoker' => null,
        'smokerSince' => null,
        'phoneHome' => null,
        'phoneHomeSecond' => null,
        'phoneAssistant' => null,
        'phoneOffice' => null,
        'phoneOfficeSecond' => null,
        'phoneCell' => null,
        'phonePager' => null,
        'phoneFax' => null,
        'mainEmail' => null,
        'emailPersonal' => null,
        'webSite' => null,
        'emailBusiness' => null,
        'emailOther' => null,
        'notes' => null,
        'peculiarity' => null,
        'endFinancialYear' => null,
        'language' => null,
        'active' => null,
        'publish' => null,
        'title' => null,
        'suffix' => null,
        'civility' => null,
        'civilityId' => null,
        'personAddressed' => null,
        'organizationLine1' => null,
        'organizationLine2' => null,
        'department' => null,
        'customerNumber' => null,
        'birthPlace' => null,
        'nationality' => null,
        'orgDateCreated' => null,
        'orgDateClosed' => null,
        'dateEndFinancialYear' => null,
        'orgIdNo' => null,
        'orgFedNo' => null,
        'orgProvNo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'externalKey' => 'externalKey',
        'externalKeyType' => 'externalKeyType',
        'gender' => 'gender',
        'sin' => 'sin',
        'birthdate' => 'birthdate',
        'smoker' => 'smoker',
        'smokerSince' => 'smokerSince',
        'phoneHome' => 'phoneHome',
        'phoneHomeSecond' => 'phoneHomeSecond',
        'phoneAssistant' => 'phoneAssistant',
        'phoneOffice' => 'phoneOffice',
        'phoneOfficeSecond' => 'phoneOfficeSecond',
        'phoneCell' => 'phoneCell',
        'phonePager' => 'phonePager',
        'phoneFax' => 'phoneFax',
        'mainEmail' => 'mainEmail',
        'emailPersonal' => 'emailPersonal',
        'webSite' => 'webSite',
        'emailBusiness' => 'emailBusiness',
        'emailOther' => 'emailOther',
        'notes' => 'notes',
        'peculiarity' => 'peculiarity',
        'endFinancialYear' => 'endFinancialYear',
        'language' => 'language',
        'active' => 'active',
        'publish' => 'publish',
        'title' => 'title',
        'suffix' => 'suffix',
        'civility' => 'civility',
        'civilityId' => 'civilityId',
        'personAddressed' => 'personAddressed',
        'organizationLine1' => 'organizationLine1',
        'organizationLine2' => 'organizationLine2',
        'department' => 'department',
        'customerNumber' => 'customerNumber',
        'birthPlace' => 'birthPlace',
        'nationality' => 'nationality',
        'orgDateCreated' => 'orgDateCreated',
        'orgDateClosed' => 'orgDateClosed',
        'dateEndFinancialYear' => 'dateEndFinancialYear',
        'orgIdNo' => 'orgIdNo',
        'orgFedNo' => 'orgFedNo',
        'orgProvNo' => 'orgProvNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'externalKey' => 'setExternalKey',
        'externalKeyType' => 'setExternalKeyType',
        'gender' => 'setGender',
        'sin' => 'setSin',
        'birthdate' => 'setBirthdate',
        'smoker' => 'setSmoker',
        'smokerSince' => 'setSmokerSince',
        'phoneHome' => 'setPhoneHome',
        'phoneHomeSecond' => 'setPhoneHomeSecond',
        'phoneAssistant' => 'setPhoneAssistant',
        'phoneOffice' => 'setPhoneOffice',
        'phoneOfficeSecond' => 'setPhoneOfficeSecond',
        'phoneCell' => 'setPhoneCell',
        'phonePager' => 'setPhonePager',
        'phoneFax' => 'setPhoneFax',
        'mainEmail' => 'setMainEmail',
        'emailPersonal' => 'setEmailPersonal',
        'webSite' => 'setWebSite',
        'emailBusiness' => 'setEmailBusiness',
        'emailOther' => 'setEmailOther',
        'notes' => 'setNotes',
        'peculiarity' => 'setPeculiarity',
        'endFinancialYear' => 'setEndFinancialYear',
        'language' => 'setLanguage',
        'active' => 'setActive',
        'publish' => 'setPublish',
        'title' => 'setTitle',
        'suffix' => 'setSuffix',
        'civility' => 'setCivility',
        'civilityId' => 'setCivilityId',
        'personAddressed' => 'setPersonAddressed',
        'organizationLine1' => 'setOrganizationLine1',
        'organizationLine2' => 'setOrganizationLine2',
        'department' => 'setDepartment',
        'customerNumber' => 'setCustomerNumber',
        'birthPlace' => 'setBirthPlace',
        'nationality' => 'setNationality',
        'orgDateCreated' => 'setOrgDateCreated',
        'orgDateClosed' => 'setOrgDateClosed',
        'dateEndFinancialYear' => 'setDateEndFinancialYear',
        'orgIdNo' => 'setOrgIdNo',
        'orgFedNo' => 'setOrgFedNo',
        'orgProvNo' => 'setOrgProvNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'externalKey' => 'getExternalKey',
        'externalKeyType' => 'getExternalKeyType',
        'gender' => 'getGender',
        'sin' => 'getSin',
        'birthdate' => 'getBirthdate',
        'smoker' => 'getSmoker',
        'smokerSince' => 'getSmokerSince',
        'phoneHome' => 'getPhoneHome',
        'phoneHomeSecond' => 'getPhoneHomeSecond',
        'phoneAssistant' => 'getPhoneAssistant',
        'phoneOffice' => 'getPhoneOffice',
        'phoneOfficeSecond' => 'getPhoneOfficeSecond',
        'phoneCell' => 'getPhoneCell',
        'phonePager' => 'getPhonePager',
        'phoneFax' => 'getPhoneFax',
        'mainEmail' => 'getMainEmail',
        'emailPersonal' => 'getEmailPersonal',
        'webSite' => 'getWebSite',
        'emailBusiness' => 'getEmailBusiness',
        'emailOther' => 'getEmailOther',
        'notes' => 'getNotes',
        'peculiarity' => 'getPeculiarity',
        'endFinancialYear' => 'getEndFinancialYear',
        'language' => 'getLanguage',
        'active' => 'getActive',
        'publish' => 'getPublish',
        'title' => 'getTitle',
        'suffix' => 'getSuffix',
        'civility' => 'getCivility',
        'civilityId' => 'getCivilityId',
        'personAddressed' => 'getPersonAddressed',
        'organizationLine1' => 'getOrganizationLine1',
        'organizationLine2' => 'getOrganizationLine2',
        'department' => 'getDepartment',
        'customerNumber' => 'getCustomerNumber',
        'birthPlace' => 'getBirthPlace',
        'nationality' => 'getNationality',
        'orgDateCreated' => 'getOrgDateCreated',
        'orgDateClosed' => 'getOrgDateClosed',
        'dateEndFinancialYear' => 'getDateEndFinancialYear',
        'orgIdNo' => 'getOrgIdNo',
        'orgFedNo' => 'getOrgFedNo',
        'orgProvNo' => 'getOrgProvNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['externalKey'] = isset($data['externalKey']) ? $data['externalKey'] : null;
        $this->container['externalKeyType'] = isset($data['externalKeyType']) ? $data['externalKeyType'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['sin'] = isset($data['sin']) ? $data['sin'] : null;
        $this->container['birthdate'] = isset($data['birthdate']) ? $data['birthdate'] : null;
        $this->container['smoker'] = isset($data['smoker']) ? $data['smoker'] : null;
        $this->container['smokerSince'] = isset($data['smokerSince']) ? $data['smokerSince'] : null;
        $this->container['phoneHome'] = isset($data['phoneHome']) ? $data['phoneHome'] : null;
        $this->container['phoneHomeSecond'] = isset($data['phoneHomeSecond']) ? $data['phoneHomeSecond'] : null;
        $this->container['phoneAssistant'] = isset($data['phoneAssistant']) ? $data['phoneAssistant'] : null;
        $this->container['phoneOffice'] = isset($data['phoneOffice']) ? $data['phoneOffice'] : null;
        $this->container['phoneOfficeSecond'] = isset($data['phoneOfficeSecond']) ? $data['phoneOfficeSecond'] : null;
        $this->container['phoneCell'] = isset($data['phoneCell']) ? $data['phoneCell'] : null;
        $this->container['phonePager'] = isset($data['phonePager']) ? $data['phonePager'] : null;
        $this->container['phoneFax'] = isset($data['phoneFax']) ? $data['phoneFax'] : null;
        $this->container['mainEmail'] = isset($data['mainEmail']) ? $data['mainEmail'] : null;
        $this->container['emailPersonal'] = isset($data['emailPersonal']) ? $data['emailPersonal'] : null;
        $this->container['webSite'] = isset($data['webSite']) ? $data['webSite'] : null;
        $this->container['emailBusiness'] = isset($data['emailBusiness']) ? $data['emailBusiness'] : null;
        $this->container['emailOther'] = isset($data['emailOther']) ? $data['emailOther'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['peculiarity'] = isset($data['peculiarity']) ? $data['peculiarity'] : null;
        $this->container['endFinancialYear'] = isset($data['endFinancialYear']) ? $data['endFinancialYear'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['publish'] = isset($data['publish']) ? $data['publish'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['suffix'] = isset($data['suffix']) ? $data['suffix'] : null;
        $this->container['civility'] = isset($data['civility']) ? $data['civility'] : null;
        $this->container['civilityId'] = isset($data['civilityId']) ? $data['civilityId'] : null;
        $this->container['personAddressed'] = isset($data['personAddressed']) ? $data['personAddressed'] : null;
        $this->container['organizationLine1'] = isset($data['organizationLine1']) ? $data['organizationLine1'] : null;
        $this->container['organizationLine2'] = isset($data['organizationLine2']) ? $data['organizationLine2'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['customerNumber'] = isset($data['customerNumber']) ? $data['customerNumber'] : null;
        $this->container['birthPlace'] = isset($data['birthPlace']) ? $data['birthPlace'] : null;
        $this->container['nationality'] = isset($data['nationality']) ? $data['nationality'] : null;
        $this->container['orgDateCreated'] = isset($data['orgDateCreated']) ? $data['orgDateCreated'] : null;
        $this->container['orgDateClosed'] = isset($data['orgDateClosed']) ? $data['orgDateClosed'] : null;
        $this->container['dateEndFinancialYear'] = isset($data['dateEndFinancialYear']) ? $data['dateEndFinancialYear'] : null;
        $this->container['orgIdNo'] = isset($data['orgIdNo']) ? $data['orgIdNo'] : null;
        $this->container['orgFedNo'] = isset($data['orgFedNo']) ? $data['orgFedNo'] : null;
        $this->container['orgProvNo'] = isset($data['orgProvNo']) ? $data['orgProvNo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets externalKey
     *
     * @return string|null
     */
    public function getExternalKey()
    {
        return $this->container['externalKey'];
    }

    /**
     * Sets externalKey
     *
     * @param string|null $externalKey external key
     *
     * @return $this
     */
    public function setExternalKey($externalKey)
    {
        $this->container['externalKey'] = $externalKey;

        return $this;
    }

    /**
     * Gets externalKeyType
     *
     * @return string|null
     */
    public function getExternalKeyType()
    {
        return $this->container['externalKeyType'];
    }

    /**
     * Sets externalKeyType
     *
     * @param string|null $externalKeyType External key type
     *
     * @return $this
     */
    public function setExternalKeyType($externalKeyType)
    {
        $this->container['externalKeyType'] = $externalKeyType;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender Gender of the contact. Either MALE or FEMALE
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets sin
     *
     * @return string|null
     */
    public function getSin()
    {
        return $this->container['sin'];
    }

    /**
     * Sets sin
     *
     * @param string|null $sin sin of the contact
     *
     * @return $this
     */
    public function setSin($sin)
    {
        $this->container['sin'] = $sin;

        return $this;
    }

    /**
     * Gets birthdate
     *
     * @return string|null
     */
    public function getBirthdate()
    {
        return $this->container['birthdate'];
    }

    /**
     * Sets birthdate
     *
     * @param string|null $birthdate birthdate of the contact
     *
     * @return $this
     */
    public function setBirthdate($birthdate)
    {
        $this->container['birthdate'] = $birthdate;

        return $this;
    }

    /**
     * Gets smoker
     *
     * @return string|null
     */
    public function getSmoker()
    {
        return $this->container['smoker'];
    }

    /**
     * Sets smoker
     *
     * @param string|null $smoker Smoker status of the contact.
     *
     * @return $this
     */
    public function setSmoker($smoker)
    {
        $this->container['smoker'] = $smoker;

        return $this;
    }

    /**
     * Gets smokerSince
     *
     * @return string|null
     */
    public function getSmokerSince()
    {
        return $this->container['smokerSince'];
    }

    /**
     * Sets smokerSince
     *
     * @param string|null $smokerSince Smoker status since date.
     *
     * @return $this
     */
    public function setSmokerSince($smokerSince)
    {
        $this->container['smokerSince'] = $smokerSince;

        return $this;
    }

    /**
     * Gets phoneHome
     *
     * @return string|null
     */
    public function getPhoneHome()
    {
        return $this->container['phoneHome'];
    }

    /**
     * Sets phoneHome
     *
     * @param string|null $phoneHome phone number of the contact at home
     *
     * @return $this
     */
    public function setPhoneHome($phoneHome)
    {
        $this->container['phoneHome'] = $phoneHome;

        return $this;
    }

    /**
     * Gets phoneHomeSecond
     *
     * @return string|null
     */
    public function getPhoneHomeSecond()
    {
        return $this->container['phoneHomeSecond'];
    }

    /**
     * Sets phoneHomeSecond
     *
     * @param string|null $phoneHomeSecond second phone number of the contact at home
     *
     * @return $this
     */
    public function setPhoneHomeSecond($phoneHomeSecond)
    {
        $this->container['phoneHomeSecond'] = $phoneHomeSecond;

        return $this;
    }

    /**
     * Gets phoneAssistant
     *
     * @return string|null
     */
    public function getPhoneAssistant()
    {
        return $this->container['phoneAssistant'];
    }

    /**
     * Sets phoneAssistant
     *
     * @param string|null $phoneAssistant assistant phone number of the contact
     *
     * @return $this
     */
    public function setPhoneAssistant($phoneAssistant)
    {
        $this->container['phoneAssistant'] = $phoneAssistant;

        return $this;
    }

    /**
     * Gets phoneOffice
     *
     * @return string|null
     */
    public function getPhoneOffice()
    {
        return $this->container['phoneOffice'];
    }

    /**
     * Sets phoneOffice
     *
     * @param string|null $phoneOffice office phone number of the contact
     *
     * @return $this
     */
    public function setPhoneOffice($phoneOffice)
    {
        $this->container['phoneOffice'] = $phoneOffice;

        return $this;
    }

    /**
     * Gets phoneOfficeSecond
     *
     * @return string|null
     */
    public function getPhoneOfficeSecond()
    {
        return $this->container['phoneOfficeSecond'];
    }

    /**
     * Sets phoneOfficeSecond
     *
     * @param string|null $phoneOfficeSecond second office phone number of the contact
     *
     * @return $this
     */
    public function setPhoneOfficeSecond($phoneOfficeSecond)
    {
        $this->container['phoneOfficeSecond'] = $phoneOfficeSecond;

        return $this;
    }

    /**
     * Gets phoneCell
     *
     * @return string|null
     */
    public function getPhoneCell()
    {
        return $this->container['phoneCell'];
    }

    /**
     * Sets phoneCell
     *
     * @param string|null $phoneCell cell phone number of the contact
     *
     * @return $this
     */
    public function setPhoneCell($phoneCell)
    {
        $this->container['phoneCell'] = $phoneCell;

        return $this;
    }

    /**
     * Gets phonePager
     *
     * @return string|null
     */
    public function getPhonePager()
    {
        return $this->container['phonePager'];
    }

    /**
     * Sets phonePager
     *
     * @param string|null $phonePager Pager phone number of the contact
     *
     * @return $this
     */
    public function setPhonePager($phonePager)
    {
        $this->container['phonePager'] = $phonePager;

        return $this;
    }

    /**
     * Gets phoneFax
     *
     * @return string|null
     */
    public function getPhoneFax()
    {
        return $this->container['phoneFax'];
    }

    /**
     * Sets phoneFax
     *
     * @param string|null $phoneFax fax phone number of the contact
     *
     * @return $this
     */
    public function setPhoneFax($phoneFax)
    {
        $this->container['phoneFax'] = $phoneFax;

        return $this;
    }

    /**
     * Gets mainEmail
     *
     * @return string|null
     */
    public function getMainEmail()
    {
        return $this->container['mainEmail'];
    }

    /**
     * Sets mainEmail
     *
     * @param string|null $mainEmail main email of the contact
     *
     * @return $this
     */
    public function setMainEmail($mainEmail)
    {
        $this->container['mainEmail'] = $mainEmail;

        return $this;
    }

    /**
     * Gets emailPersonal
     *
     * @return string|null
     */
    public function getEmailPersonal()
    {
        return $this->container['emailPersonal'];
    }

    /**
     * Sets emailPersonal
     *
     * @param string|null $emailPersonal personal email of the contact
     *
     * @return $this
     */
    public function setEmailPersonal($emailPersonal)
    {
        $this->container['emailPersonal'] = $emailPersonal;

        return $this;
    }

    /**
     * Gets webSite
     *
     * @return string|null
     */
    public function getWebSite()
    {
        return $this->container['webSite'];
    }

    /**
     * Sets webSite
     *
     * @param string|null $webSite Web Site URL. This represent the main website for the contact.
     *
     * @return $this
     */
    public function setWebSite($webSite)
    {
        $this->container['webSite'] = $webSite;

        return $this;
    }

    /**
     * Gets emailBusiness
     *
     * @return string|null
     */
    public function getEmailBusiness()
    {
        return $this->container['emailBusiness'];
    }

    /**
     * Sets emailBusiness
     *
     * @param string|null $emailBusiness business email of the contact
     *
     * @return $this
     */
    public function setEmailBusiness($emailBusiness)
    {
        $this->container['emailBusiness'] = $emailBusiness;

        return $this;
    }

    /**
     * Gets emailOther
     *
     * @return string|null
     */
    public function getEmailOther()
    {
        return $this->container['emailOther'];
    }

    /**
     * Sets emailOther
     *
     * @param string|null $emailOther business email of the contact
     *
     * @return $this
     */
    public function setEmailOther($emailOther)
    {
        $this->container['emailOther'] = $emailOther;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes of the contact
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets peculiarity
     *
     * @return string|null
     */
    public function getPeculiarity()
    {
        return $this->container['peculiarity'];
    }

    /**
     * Sets peculiarity
     *
     * @param string|null $peculiarity peculiarity of the contact
     *
     * @return $this
     */
    public function setPeculiarity($peculiarity)
    {
        $this->container['peculiarity'] = $peculiarity;

        return $this;
    }

    /**
     * Gets endFinancialYear
     *
     * @return string|null
     */
    public function getEndFinancialYear()
    {
        return $this->container['endFinancialYear'];
    }

    /**
     * Sets endFinancialYear
     *
     * @param string|null $endFinancialYear End of the financial year (for organization)
     *
     * @return $this
     */
    public function setEndFinancialYear($endFinancialYear)
    {
        $this->container['endFinancialYear'] = $endFinancialYear;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language Language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets active
     *
     * @return string|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param string|null $active Active (boolean)
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets publish
     *
     * @return string|null
     */
    public function getPublish()
    {
        return $this->container['publish'];
    }

    /**
     * Sets publish
     *
     * @param string|null $publish Publish (boolean)
     *
     * @return $this
     */
    public function setPublish($publish)
    {
        $this->container['publish'] = $publish;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix Suffix
     *
     * @return $this
     */
    public function setSuffix($suffix)
    {
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets civility
     *
     * @return string|null
     */
    public function getCivility()
    {
        return $this->container['civility'];
    }

    /**
     * Sets civility
     *
     * @param string|null $civility Civility
     *
     * @return $this
     */
    public function setCivility($civility)
    {
        $this->container['civility'] = $civility;

        return $this;
    }

    /**
     * Gets civilityId
     *
     * @return int|null
     */
    public function getCivilityId()
    {
        return $this->container['civilityId'];
    }

    /**
     * Sets civilityId
     *
     * @param int|null $civilityId Civility id
     *
     * @return $this
     */
    public function setCivilityId($civilityId)
    {
        $this->container['civilityId'] = $civilityId;

        return $this;
    }

    /**
     * Gets personAddressed
     *
     * @return string|null
     */
    public function getPersonAddressed()
    {
        return $this->container['personAddressed'];
    }

    /**
     * Sets personAddressed
     *
     * @param string|null $personAddressed Person Addressed (Correspondance)
     *
     * @return $this
     */
    public function setPersonAddressed($personAddressed)
    {
        $this->container['personAddressed'] = $personAddressed;

        return $this;
    }

    /**
     * Gets organizationLine1
     *
     * @return string|null
     */
    public function getOrganizationLine1()
    {
        return $this->container['organizationLine1'];
    }

    /**
     * Sets organizationLine1
     *
     * @param string|null $organizationLine1 Organization name (Correspondance)
     *
     * @return $this
     */
    public function setOrganizationLine1($organizationLine1)
    {
        $this->container['organizationLine1'] = $organizationLine1;

        return $this;
    }

    /**
     * Gets organizationLine2
     *
     * @return string|null
     */
    public function getOrganizationLine2()
    {
        return $this->container['organizationLine2'];
    }

    /**
     * Sets organizationLine2
     *
     * @param string|null $organizationLine2 Organization name - second line (Correspondance)
     *
     * @return $this
     */
    public function setOrganizationLine2($organizationLine2)
    {
        $this->container['organizationLine2'] = $organizationLine2;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department Department (Correspondance)
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets customerNumber
     *
     * @return string|null
     */
    public function getCustomerNumber()
    {
        return $this->container['customerNumber'];
    }

    /**
     * Sets customerNumber
     *
     * @param string|null $customerNumber Customer Number
     *
     * @return $this
     */
    public function setCustomerNumber($customerNumber)
    {
        $this->container['customerNumber'] = $customerNumber;

        return $this;
    }

    /**
     * Gets birthPlace
     *
     * @return string|null
     */
    public function getBirthPlace()
    {
        return $this->container['birthPlace'];
    }

    /**
     * Sets birthPlace
     *
     * @param string|null $birthPlace Birth Place
     *
     * @return $this
     */
    public function setBirthPlace($birthPlace)
    {
        $this->container['birthPlace'] = $birthPlace;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return string|null
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string|null $nationality Nationality
     *
     * @return $this
     */
    public function setNationality($nationality)
    {
        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets orgDateCreated
     *
     * @return string|null
     */
    public function getOrgDateCreated()
    {
        return $this->container['orgDateCreated'];
    }

    /**
     * Sets orgDateCreated
     *
     * @param string|null $orgDateCreated orgDateCreated
     *
     * @return $this
     */
    public function setOrgDateCreated($orgDateCreated)
    {
        $this->container['orgDateCreated'] = $orgDateCreated;

        return $this;
    }

    /**
     * Gets orgDateClosed
     *
     * @return string|null
     */
    public function getOrgDateClosed()
    {
        return $this->container['orgDateClosed'];
    }

    /**
     * Sets orgDateClosed
     *
     * @param string|null $orgDateClosed orgDateClosed
     *
     * @return $this
     */
    public function setOrgDateClosed($orgDateClosed)
    {
        $this->container['orgDateClosed'] = $orgDateClosed;

        return $this;
    }

    /**
     * Gets dateEndFinancialYear
     *
     * @return string|null
     */
    public function getDateEndFinancialYear()
    {
        return $this->container['dateEndFinancialYear'];
    }

    /**
     * Sets dateEndFinancialYear
     *
     * @param string|null $dateEndFinancialYear dateEndFinancialYear
     *
     * @return $this
     */
    public function setDateEndFinancialYear($dateEndFinancialYear)
    {
        $this->container['dateEndFinancialYear'] = $dateEndFinancialYear;

        return $this;
    }

    /**
     * Gets orgIdNo
     *
     * @return string|null
     */
    public function getOrgIdNo()
    {
        return $this->container['orgIdNo'];
    }

    /**
     * Sets orgIdNo
     *
     * @param string|null $orgIdNo orgIdNo
     *
     * @return $this
     */
    public function setOrgIdNo($orgIdNo)
    {
        $this->container['orgIdNo'] = $orgIdNo;

        return $this;
    }

    /**
     * Gets orgFedNo
     *
     * @return string|null
     */
    public function getOrgFedNo()
    {
        return $this->container['orgFedNo'];
    }

    /**
     * Sets orgFedNo
     *
     * @param string|null $orgFedNo orgFedNo
     *
     * @return $this
     */
    public function setOrgFedNo($orgFedNo)
    {
        $this->container['orgFedNo'] = $orgFedNo;

        return $this;
    }

    /**
     * Gets orgProvNo
     *
     * @return string|null
     */
    public function getOrgProvNo()
    {
        return $this->container['orgProvNo'];
    }

    /**
     * Sets orgProvNo
     *
     * @param string|null $orgProvNo orgProvNo
     *
     * @return $this
     */
    public function setOrgProvNo($orgProvNo)
    {
        $this->container['orgProvNo'] = $orgProvNo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


