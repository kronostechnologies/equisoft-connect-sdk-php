<?php
/**
 * ContactContactSegmentation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-equisoft2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * ContactContactSegmentation Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContactContactSegmentation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'contact.ContactSegmentation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'categories' => '\Equisoft\SDK\EquisoftConnect\Model\FieldValue[]',
        'distributionLists' => '\Equisoft\SDK\EquisoftConnect\Model\FieldValue[]',
        'hobbies' => '\Equisoft\SDK\EquisoftConnect\Model\FieldValue[]',
        'referredBy' => '\Equisoft\SDK\EquisoftConnect\Model\FieldValue[]',
        'industries' => '\Equisoft\SDK\EquisoftConnect\Model\FieldValue[]',
        'segmentation1' => '\Equisoft\SDK\EquisoftConnect\Model\FieldValue',
        'segmentation2' => '\Equisoft\SDK\EquisoftConnect\Model\FieldValue',
        'segmentation3' => '\Equisoft\SDK\EquisoftConnect\Model\FieldValue',
        'segmentation4' => '\Equisoft\SDK\EquisoftConnect\Model\FieldValue',
        'segmentation5' => '\Equisoft\SDK\EquisoftConnect\Model\FieldValue',
        'segmentation6' => '\Equisoft\SDK\EquisoftConnect\Model\FieldValue',
        'territory' => '\Equisoft\SDK\EquisoftConnect\Model\FieldValue'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'categories' => null,
        'distributionLists' => null,
        'hobbies' => null,
        'referredBy' => null,
        'industries' => null,
        'segmentation1' => null,
        'segmentation2' => null,
        'segmentation3' => null,
        'segmentation4' => null,
        'segmentation5' => null,
        'segmentation6' => null,
        'territory' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'categories' => false,
		'distributionLists' => false,
		'hobbies' => false,
		'referredBy' => false,
		'industries' => false,
		'segmentation1' => true,
		'segmentation2' => true,
		'segmentation3' => true,
		'segmentation4' => true,
		'segmentation5' => true,
		'segmentation6' => true,
		'territory' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'categories' => 'categories',
        'distributionLists' => 'distributionLists',
        'hobbies' => 'hobbies',
        'referredBy' => 'referredBy',
        'industries' => 'industries',
        'segmentation1' => 'segmentation1',
        'segmentation2' => 'segmentation2',
        'segmentation3' => 'segmentation3',
        'segmentation4' => 'segmentation4',
        'segmentation5' => 'segmentation5',
        'segmentation6' => 'segmentation6',
        'territory' => 'territory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'categories' => 'setCategories',
        'distributionLists' => 'setDistributionLists',
        'hobbies' => 'setHobbies',
        'referredBy' => 'setReferredBy',
        'industries' => 'setIndustries',
        'segmentation1' => 'setSegmentation1',
        'segmentation2' => 'setSegmentation2',
        'segmentation3' => 'setSegmentation3',
        'segmentation4' => 'setSegmentation4',
        'segmentation5' => 'setSegmentation5',
        'segmentation6' => 'setSegmentation6',
        'territory' => 'setTerritory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'categories' => 'getCategories',
        'distributionLists' => 'getDistributionLists',
        'hobbies' => 'getHobbies',
        'referredBy' => 'getReferredBy',
        'industries' => 'getIndustries',
        'segmentation1' => 'getSegmentation1',
        'segmentation2' => 'getSegmentation2',
        'segmentation3' => 'getSegmentation3',
        'segmentation4' => 'getSegmentation4',
        'segmentation5' => 'getSegmentation5',
        'segmentation6' => 'getSegmentation6',
        'territory' => 'getTerritory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('distributionLists', $data ?? [], null);
        $this->setIfExists('hobbies', $data ?? [], null);
        $this->setIfExists('referredBy', $data ?? [], null);
        $this->setIfExists('industries', $data ?? [], null);
        $this->setIfExists('segmentation1', $data ?? [], null);
        $this->setIfExists('segmentation2', $data ?? [], null);
        $this->setIfExists('segmentation3', $data ?? [], null);
        $this->setIfExists('segmentation4', $data ?? [], null);
        $this->setIfExists('segmentation5', $data ?? [], null);
        $this->setIfExists('segmentation6', $data ?? [], null);
        $this->setIfExists('territory', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['categories'] === null) {
            $invalidProperties[] = "'categories' can't be null";
        }
        if ($this->container['distributionLists'] === null) {
            $invalidProperties[] = "'distributionLists' can't be null";
        }
        if ($this->container['hobbies'] === null) {
            $invalidProperties[] = "'hobbies' can't be null";
        }
        if ($this->container['referredBy'] === null) {
            $invalidProperties[] = "'referredBy' can't be null";
        }
        if ($this->container['industries'] === null) {
            $invalidProperties[] = "'industries' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets categories
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\FieldValue[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\FieldValue[] $categories Contact's categories which represents the contact's different classes
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets distributionLists
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\FieldValue[]
     */
    public function getDistributionLists()
    {
        return $this->container['distributionLists'];
    }

    /**
     * Sets distributionLists
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\FieldValue[] $distributionLists Contact's distribution lists
     *
     * @return self
     */
    public function setDistributionLists($distributionLists)
    {
        if (is_null($distributionLists)) {
            throw new \InvalidArgumentException('non-nullable distributionLists cannot be null');
        }
        $this->container['distributionLists'] = $distributionLists;

        return $this;
    }

    /**
     * Gets hobbies
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\FieldValue[]
     */
    public function getHobbies()
    {
        return $this->container['hobbies'];
    }

    /**
     * Sets hobbies
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\FieldValue[] $hobbies Contact's hobbies
     *
     * @return self
     */
    public function setHobbies($hobbies)
    {
        if (is_null($hobbies)) {
            throw new \InvalidArgumentException('non-nullable hobbies cannot be null');
        }
        $this->container['hobbies'] = $hobbies;

        return $this;
    }

    /**
     * Gets referredBy
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\FieldValue[]
     */
    public function getReferredBy()
    {
        return $this->container['referredBy'];
    }

    /**
     * Sets referredBy
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\FieldValue[] $referredBy Contact's references
     *
     * @return self
     */
    public function setReferredBy($referredBy)
    {
        if (is_null($referredBy)) {
            throw new \InvalidArgumentException('non-nullable referredBy cannot be null');
        }
        $this->container['referredBy'] = $referredBy;

        return $this;
    }

    /**
     * Gets industries
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\FieldValue[]
     */
    public function getIndustries()
    {
        return $this->container['industries'];
    }

    /**
     * Sets industries
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\FieldValue[] $industries Contact's industries
     *
     * @return self
     */
    public function setIndustries($industries)
    {
        if (is_null($industries)) {
            throw new \InvalidArgumentException('non-nullable industries cannot be null');
        }
        $this->container['industries'] = $industries;

        return $this;
    }

    /**
     * Gets segmentation1
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null
     */
    public function getSegmentation1()
    {
        return $this->container['segmentation1'];
    }

    /**
     * Sets segmentation1
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null $segmentation1 segmentation1
     *
     * @return self
     */
    public function setSegmentation1($segmentation1)
    {
        if (is_null($segmentation1)) {
            array_push($this->openAPINullablesSetToNull, 'segmentation1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('segmentation1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['segmentation1'] = $segmentation1;

        return $this;
    }

    /**
     * Gets segmentation2
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null
     */
    public function getSegmentation2()
    {
        return $this->container['segmentation2'];
    }

    /**
     * Sets segmentation2
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null $segmentation2 segmentation2
     *
     * @return self
     */
    public function setSegmentation2($segmentation2)
    {
        if (is_null($segmentation2)) {
            array_push($this->openAPINullablesSetToNull, 'segmentation2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('segmentation2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['segmentation2'] = $segmentation2;

        return $this;
    }

    /**
     * Gets segmentation3
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null
     */
    public function getSegmentation3()
    {
        return $this->container['segmentation3'];
    }

    /**
     * Sets segmentation3
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null $segmentation3 segmentation3
     *
     * @return self
     */
    public function setSegmentation3($segmentation3)
    {
        if (is_null($segmentation3)) {
            array_push($this->openAPINullablesSetToNull, 'segmentation3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('segmentation3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['segmentation3'] = $segmentation3;

        return $this;
    }

    /**
     * Gets segmentation4
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null
     */
    public function getSegmentation4()
    {
        return $this->container['segmentation4'];
    }

    /**
     * Sets segmentation4
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null $segmentation4 segmentation4
     *
     * @return self
     */
    public function setSegmentation4($segmentation4)
    {
        if (is_null($segmentation4)) {
            array_push($this->openAPINullablesSetToNull, 'segmentation4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('segmentation4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['segmentation4'] = $segmentation4;

        return $this;
    }

    /**
     * Gets segmentation5
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null
     */
    public function getSegmentation5()
    {
        return $this->container['segmentation5'];
    }

    /**
     * Sets segmentation5
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null $segmentation5 segmentation5
     *
     * @return self
     */
    public function setSegmentation5($segmentation5)
    {
        if (is_null($segmentation5)) {
            array_push($this->openAPINullablesSetToNull, 'segmentation5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('segmentation5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['segmentation5'] = $segmentation5;

        return $this;
    }

    /**
     * Gets segmentation6
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null
     */
    public function getSegmentation6()
    {
        return $this->container['segmentation6'];
    }

    /**
     * Sets segmentation6
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null $segmentation6 segmentation6
     *
     * @return self
     */
    public function setSegmentation6($segmentation6)
    {
        if (is_null($segmentation6)) {
            array_push($this->openAPINullablesSetToNull, 'segmentation6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('segmentation6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['segmentation6'] = $segmentation6;

        return $this;
    }

    /**
     * Gets territory
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null
     */
    public function getTerritory()
    {
        return $this->container['territory'];
    }

    /**
     * Sets territory
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null $territory territory
     *
     * @return self
     */
    public function setTerritory($territory)
    {
        if (is_null($territory)) {
            array_push($this->openAPINullablesSetToNull, 'territory');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('territory', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['territory'] = $territory;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


