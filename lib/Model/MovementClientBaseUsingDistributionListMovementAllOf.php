<?php
/**
 * MovementClientBaseUsingDistributionListMovementAllOf
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * MovementClientBaseUsingDistributionListMovementAllOf Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MovementClientBaseUsingDistributionListMovementAllOf implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'movement_ClientBaseUsingDistributionListMovement_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'sourceDatabase' => '\Equisoft\SDK\EquisoftConnect\Model\MovementDatabase',
        'sourceUser' => '\Equisoft\SDK\EquisoftConnect\Model\MovementUser',
        'sourceDistributionList' => '\Equisoft\SDK\EquisoftConnect\Model\MovementDistributionList',
        'destinationDatabase' => '\Equisoft\SDK\EquisoftConnect\Model\MovementDatabase',
        'destinationUser' => '\Equisoft\SDK\EquisoftConnect\Model\MovementUser',
        'datagatewayAccessMappings' => 'map[string,string]',
        'transferOption' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type' => null,
        'sourceDatabase' => null,
        'sourceUser' => null,
        'sourceDistributionList' => null,
        'destinationDatabase' => null,
        'destinationUser' => null,
        'datagatewayAccessMappings' => null,
        'transferOption' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'sourceDatabase' => 'sourceDatabase',
        'sourceUser' => 'sourceUser',
        'sourceDistributionList' => 'sourceDistributionList',
        'destinationDatabase' => 'destinationDatabase',
        'destinationUser' => 'destinationUser',
        'datagatewayAccessMappings' => 'datagatewayAccessMappings',
        'transferOption' => 'transferOption'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'sourceDatabase' => 'setSourceDatabase',
        'sourceUser' => 'setSourceUser',
        'sourceDistributionList' => 'setSourceDistributionList',
        'destinationDatabase' => 'setDestinationDatabase',
        'destinationUser' => 'setDestinationUser',
        'datagatewayAccessMappings' => 'setDatagatewayAccessMappings',
        'transferOption' => 'setTransferOption'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'sourceDatabase' => 'getSourceDatabase',
        'sourceUser' => 'getSourceUser',
        'sourceDistributionList' => 'getSourceDistributionList',
        'destinationDatabase' => 'getDestinationDatabase',
        'destinationUser' => 'getDestinationUser',
        'datagatewayAccessMappings' => 'getDatagatewayAccessMappings',
        'transferOption' => 'getTransferOption'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_CLIENTBASE_USING_DISTLIST = 'CLIENTBASE_USING_DISTLIST';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CLIENTBASE_USING_DISTLIST,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : 'CLIENTBASE_USING_DISTLIST';
        $this->container['sourceDatabase'] = isset($data['sourceDatabase']) ? $data['sourceDatabase'] : null;
        $this->container['sourceUser'] = isset($data['sourceUser']) ? $data['sourceUser'] : null;
        $this->container['sourceDistributionList'] = isset($data['sourceDistributionList']) ? $data['sourceDistributionList'] : null;
        $this->container['destinationDatabase'] = isset($data['destinationDatabase']) ? $data['destinationDatabase'] : null;
        $this->container['destinationUser'] = isset($data['destinationUser']) ? $data['destinationUser'] : null;
        $this->container['datagatewayAccessMappings'] = isset($data['datagatewayAccessMappings']) ? $data['datagatewayAccessMappings'] : null;
        $this->container['transferOption'] = isset($data['transferOption']) ? $data['transferOption'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['sourceDatabase'] === null) {
            $invalidProperties[] = "'sourceDatabase' can't be null";
        }
        if ($this->container['sourceUser'] === null) {
            $invalidProperties[] = "'sourceUser' can't be null";
        }
        if ($this->container['destinationDatabase'] === null) {
            $invalidProperties[] = "'destinationDatabase' can't be null";
        }
        if ($this->container['destinationUser'] === null) {
            $invalidProperties[] = "'destinationUser' can't be null";
        }
        if ($this->container['transferOption'] === null) {
            $invalidProperties[] = "'transferOption' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets sourceDatabase
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementDatabase
     */
    public function getSourceDatabase()
    {
        return $this->container['sourceDatabase'];
    }

    /**
     * Sets sourceDatabase
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementDatabase $sourceDatabase sourceDatabase
     *
     * @return $this
     */
    public function setSourceDatabase($sourceDatabase)
    {
        $this->container['sourceDatabase'] = $sourceDatabase;

        return $this;
    }

    /**
     * Gets sourceUser
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementUser
     */
    public function getSourceUser()
    {
        return $this->container['sourceUser'];
    }

    /**
     * Sets sourceUser
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementUser $sourceUser sourceUser
     *
     * @return $this
     */
    public function setSourceUser($sourceUser)
    {
        $this->container['sourceUser'] = $sourceUser;

        return $this;
    }

    /**
     * Gets sourceDistributionList
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementDistributionList|null
     */
    public function getSourceDistributionList()
    {
        return $this->container['sourceDistributionList'];
    }

    /**
     * Sets sourceDistributionList
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementDistributionList|null $sourceDistributionList sourceDistributionList
     *
     * @return $this
     */
    public function setSourceDistributionList($sourceDistributionList)
    {
        $this->container['sourceDistributionList'] = $sourceDistributionList;

        return $this;
    }

    /**
     * Gets destinationDatabase
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementDatabase
     */
    public function getDestinationDatabase()
    {
        return $this->container['destinationDatabase'];
    }

    /**
     * Sets destinationDatabase
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementDatabase $destinationDatabase destinationDatabase
     *
     * @return $this
     */
    public function setDestinationDatabase($destinationDatabase)
    {
        $this->container['destinationDatabase'] = $destinationDatabase;

        return $this;
    }

    /**
     * Gets destinationUser
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementUser
     */
    public function getDestinationUser()
    {
        return $this->container['destinationUser'];
    }

    /**
     * Sets destinationUser
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementUser $destinationUser destinationUser
     *
     * @return $this
     */
    public function setDestinationUser($destinationUser)
    {
        $this->container['destinationUser'] = $destinationUser;

        return $this;
    }

    /**
     * Gets datagatewayAccessMappings
     *
     * @return map[string,string]|null
     */
    public function getDatagatewayAccessMappings()
    {
        return $this->container['datagatewayAccessMappings'];
    }

    /**
     * Sets datagatewayAccessMappings
     *
     * @param map[string,string]|null $datagatewayAccessMappings datagatewayAccessMappings
     *
     * @return $this
     */
    public function setDatagatewayAccessMappings($datagatewayAccessMappings)
    {
        $this->container['datagatewayAccessMappings'] = $datagatewayAccessMappings;

        return $this;
    }

    /**
     * Gets transferOption
     *
     * @return string
     */
    public function getTransferOption()
    {
        return $this->container['transferOption'];
    }

    /**
     * Sets transferOption
     *
     * @param string $transferOption transferOption
     *
     * @return $this
     */
    public function setTransferOption($transferOption)
    {
        $this->container['transferOption'] = $transferOption;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


