<?php
/**
 * LegacyFinancePlan
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-equisoft2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * LegacyFinancePlan Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LegacyFinancePlan implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'legacy.finance.Plan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'description' => 'string',
        'accountNumber' => 'string',
        'accountType' => 'string',
        'marketValue' => 'string',
        'marketValueDate' => 'string',
        'maturityDate' => '\DateTime',
        'owner' => 'string',
        'owner2' => 'string',
        'accountDesignation' => 'string',
        'intermediaryCode' => 'string',
        'intermediaryAccountNumber' => 'string',
        'groupFlag' => 'string',
        'spousalAccount' => 'string',
        'lockedIn' => 'string',
        'jointSignature' => 'string',
        'jointSurvivor' => 'string',
        'inTrust' => 'string',
        'inTrustFor' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePlanInTrust[]',
        'beneficiaries' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePlanBeneficiary[]',
        'summary' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePlanSummary[]',
        'mutualFunds' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]',
        'segregatedFunds' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]',
        'gics' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]',
        'shares' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]',
        'bankAccounts' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]',
        'assets' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'description' => null,
        'accountNumber' => null,
        'accountType' => null,
        'marketValue' => null,
        'marketValueDate' => null,
        'maturityDate' => 'date',
        'owner' => null,
        'owner2' => null,
        'accountDesignation' => null,
        'intermediaryCode' => null,
        'intermediaryAccountNumber' => null,
        'groupFlag' => null,
        'spousalAccount' => null,
        'lockedIn' => null,
        'jointSignature' => null,
        'jointSurvivor' => null,
        'inTrust' => null,
        'inTrustFor' => null,
        'beneficiaries' => null,
        'summary' => null,
        'mutualFunds' => null,
        'segregatedFunds' => null,
        'gics' => null,
        'shares' => null,
        'bankAccounts' => null,
        'assets' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'description' => false,
		'accountNumber' => false,
		'accountType' => false,
		'marketValue' => false,
		'marketValueDate' => false,
		'maturityDate' => false,
		'owner' => false,
		'owner2' => false,
		'accountDesignation' => false,
		'intermediaryCode' => false,
		'intermediaryAccountNumber' => false,
		'groupFlag' => false,
		'spousalAccount' => false,
		'lockedIn' => false,
		'jointSignature' => false,
		'jointSurvivor' => false,
		'inTrust' => false,
		'inTrustFor' => false,
		'beneficiaries' => false,
		'summary' => false,
		'mutualFunds' => false,
		'segregatedFunds' => false,
		'gics' => false,
		'shares' => false,
		'bankAccounts' => false,
		'assets' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'description' => 'description',
        'accountNumber' => 'accountNumber',
        'accountType' => 'accountType',
        'marketValue' => 'marketValue',
        'marketValueDate' => 'marketValueDate',
        'maturityDate' => 'maturityDate',
        'owner' => 'owner',
        'owner2' => 'owner2',
        'accountDesignation' => 'accountDesignation',
        'intermediaryCode' => 'intermediaryCode',
        'intermediaryAccountNumber' => 'intermediaryAccountNumber',
        'groupFlag' => 'groupFlag',
        'spousalAccount' => 'spousalAccount',
        'lockedIn' => 'lockedIn',
        'jointSignature' => 'jointSignature',
        'jointSurvivor' => 'jointSurvivor',
        'inTrust' => 'inTrust',
        'inTrustFor' => 'inTrustFor',
        'beneficiaries' => 'beneficiaries',
        'summary' => 'summary',
        'mutualFunds' => 'mutualFunds',
        'segregatedFunds' => 'segregatedFunds',
        'gics' => 'gics',
        'shares' => 'shares',
        'bankAccounts' => 'bankAccounts',
        'assets' => 'assets'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'description' => 'setDescription',
        'accountNumber' => 'setAccountNumber',
        'accountType' => 'setAccountType',
        'marketValue' => 'setMarketValue',
        'marketValueDate' => 'setMarketValueDate',
        'maturityDate' => 'setMaturityDate',
        'owner' => 'setOwner',
        'owner2' => 'setOwner2',
        'accountDesignation' => 'setAccountDesignation',
        'intermediaryCode' => 'setIntermediaryCode',
        'intermediaryAccountNumber' => 'setIntermediaryAccountNumber',
        'groupFlag' => 'setGroupFlag',
        'spousalAccount' => 'setSpousalAccount',
        'lockedIn' => 'setLockedIn',
        'jointSignature' => 'setJointSignature',
        'jointSurvivor' => 'setJointSurvivor',
        'inTrust' => 'setInTrust',
        'inTrustFor' => 'setInTrustFor',
        'beneficiaries' => 'setBeneficiaries',
        'summary' => 'setSummary',
        'mutualFunds' => 'setMutualFunds',
        'segregatedFunds' => 'setSegregatedFunds',
        'gics' => 'setGics',
        'shares' => 'setShares',
        'bankAccounts' => 'setBankAccounts',
        'assets' => 'setAssets'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'description' => 'getDescription',
        'accountNumber' => 'getAccountNumber',
        'accountType' => 'getAccountType',
        'marketValue' => 'getMarketValue',
        'marketValueDate' => 'getMarketValueDate',
        'maturityDate' => 'getMaturityDate',
        'owner' => 'getOwner',
        'owner2' => 'getOwner2',
        'accountDesignation' => 'getAccountDesignation',
        'intermediaryCode' => 'getIntermediaryCode',
        'intermediaryAccountNumber' => 'getIntermediaryAccountNumber',
        'groupFlag' => 'getGroupFlag',
        'spousalAccount' => 'getSpousalAccount',
        'lockedIn' => 'getLockedIn',
        'jointSignature' => 'getJointSignature',
        'jointSurvivor' => 'getJointSurvivor',
        'inTrust' => 'getInTrust',
        'inTrustFor' => 'getInTrustFor',
        'beneficiaries' => 'getBeneficiaries',
        'summary' => 'getSummary',
        'mutualFunds' => 'getMutualFunds',
        'segregatedFunds' => 'getSegregatedFunds',
        'gics' => 'getGics',
        'shares' => 'getShares',
        'bankAccounts' => 'getBankAccounts',
        'assets' => 'getAssets'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('accountNumber', $data ?? [], null);
        $this->setIfExists('accountType', $data ?? [], null);
        $this->setIfExists('marketValue', $data ?? [], null);
        $this->setIfExists('marketValueDate', $data ?? [], null);
        $this->setIfExists('maturityDate', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('owner2', $data ?? [], null);
        $this->setIfExists('accountDesignation', $data ?? [], null);
        $this->setIfExists('intermediaryCode', $data ?? [], null);
        $this->setIfExists('intermediaryAccountNumber', $data ?? [], null);
        $this->setIfExists('groupFlag', $data ?? [], null);
        $this->setIfExists('spousalAccount', $data ?? [], null);
        $this->setIfExists('lockedIn', $data ?? [], null);
        $this->setIfExists('jointSignature', $data ?? [], null);
        $this->setIfExists('jointSurvivor', $data ?? [], null);
        $this->setIfExists('inTrust', $data ?? [], null);
        $this->setIfExists('inTrustFor', $data ?? [], null);
        $this->setIfExists('beneficiaries', $data ?? [], null);
        $this->setIfExists('summary', $data ?? [], null);
        $this->setIfExists('mutualFunds', $data ?? [], null);
        $this->setIfExists('segregatedFunds', $data ?? [], null);
        $this->setIfExists('gics', $data ?? [], null);
        $this->setIfExists('shares', $data ?? [], null);
        $this->setIfExists('bankAccounts', $data ?? [], null);
        $this->setIfExists('assets', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Plan id.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets accountNumber
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['accountNumber'];
    }

    /**
     * Sets accountNumber
     *
     * @param string|null $accountNumber Account number.
     *
     * @return self
     */
    public function setAccountNumber($accountNumber)
    {
        if (is_null($accountNumber)) {
            throw new \InvalidArgumentException('non-nullable accountNumber cannot be null');
        }
        $this->container['accountNumber'] = $accountNumber;

        return $this;
    }

    /**
     * Gets accountType
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['accountType'];
    }

    /**
     * Sets accountType
     *
     * @param string|null $accountType Account type.
     *
     * @return self
     */
    public function setAccountType($accountType)
    {
        if (is_null($accountType)) {
            throw new \InvalidArgumentException('non-nullable accountType cannot be null');
        }
        $this->container['accountType'] = $accountType;

        return $this;
    }

    /**
     * Gets marketValue
     *
     * @return string|null
     */
    public function getMarketValue()
    {
        return $this->container['marketValue'];
    }

    /**
     * Sets marketValue
     *
     * @param string|null $marketValue Market value.
     *
     * @return self
     */
    public function setMarketValue($marketValue)
    {
        if (is_null($marketValue)) {
            throw new \InvalidArgumentException('non-nullable marketValue cannot be null');
        }
        $this->container['marketValue'] = $marketValue;

        return $this;
    }

    /**
     * Gets marketValueDate
     *
     * @return string|null
     */
    public function getMarketValueDate()
    {
        return $this->container['marketValueDate'];
    }

    /**
     * Sets marketValueDate
     *
     * @param string|null $marketValueDate Market value date.
     *
     * @return self
     */
    public function setMarketValueDate($marketValueDate)
    {
        if (is_null($marketValueDate)) {
            throw new \InvalidArgumentException('non-nullable marketValueDate cannot be null');
        }
        $this->container['marketValueDate'] = $marketValueDate;

        return $this;
    }

    /**
     * Gets maturityDate
     *
     * @return \DateTime|null
     */
    public function getMaturityDate()
    {
        return $this->container['maturityDate'];
    }

    /**
     * Sets maturityDate
     *
     * @param \DateTime|null $maturityDate Maturity date.
     *
     * @return self
     */
    public function setMaturityDate($maturityDate)
    {
        if (is_null($maturityDate)) {
            throw new \InvalidArgumentException('non-nullable maturityDate cannot be null');
        }
        $this->container['maturityDate'] = $maturityDate;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner Owner.
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets owner2
     *
     * @return string|null
     */
    public function getOwner2()
    {
        return $this->container['owner2'];
    }

    /**
     * Sets owner2
     *
     * @param string|null $owner2 Owner 2.
     *
     * @return self
     */
    public function setOwner2($owner2)
    {
        if (is_null($owner2)) {
            throw new \InvalidArgumentException('non-nullable owner2 cannot be null');
        }
        $this->container['owner2'] = $owner2;

        return $this;
    }

    /**
     * Gets accountDesignation
     *
     * @return string|null
     */
    public function getAccountDesignation()
    {
        return $this->container['accountDesignation'];
    }

    /**
     * Sets accountDesignation
     *
     * @param string|null $accountDesignation Account designation.
     *
     * @return self
     */
    public function setAccountDesignation($accountDesignation)
    {
        if (is_null($accountDesignation)) {
            throw new \InvalidArgumentException('non-nullable accountDesignation cannot be null');
        }
        $this->container['accountDesignation'] = $accountDesignation;

        return $this;
    }

    /**
     * Gets intermediaryCode
     *
     * @return string|null
     */
    public function getIntermediaryCode()
    {
        return $this->container['intermediaryCode'];
    }

    /**
     * Sets intermediaryCode
     *
     * @param string|null $intermediaryCode Intermediary code.
     *
     * @return self
     */
    public function setIntermediaryCode($intermediaryCode)
    {
        if (is_null($intermediaryCode)) {
            throw new \InvalidArgumentException('non-nullable intermediaryCode cannot be null');
        }
        $this->container['intermediaryCode'] = $intermediaryCode;

        return $this;
    }

    /**
     * Gets intermediaryAccountNumber
     *
     * @return string|null
     */
    public function getIntermediaryAccountNumber()
    {
        return $this->container['intermediaryAccountNumber'];
    }

    /**
     * Sets intermediaryAccountNumber
     *
     * @param string|null $intermediaryAccountNumber Intermediary account number.
     *
     * @return self
     */
    public function setIntermediaryAccountNumber($intermediaryAccountNumber)
    {
        if (is_null($intermediaryAccountNumber)) {
            throw new \InvalidArgumentException('non-nullable intermediaryAccountNumber cannot be null');
        }
        $this->container['intermediaryAccountNumber'] = $intermediaryAccountNumber;

        return $this;
    }

    /**
     * Gets groupFlag
     *
     * @return string|null
     */
    public function getGroupFlag()
    {
        return $this->container['groupFlag'];
    }

    /**
     * Sets groupFlag
     *
     * @param string|null $groupFlag Group flag.
     *
     * @return self
     */
    public function setGroupFlag($groupFlag)
    {
        if (is_null($groupFlag)) {
            throw new \InvalidArgumentException('non-nullable groupFlag cannot be null');
        }
        $this->container['groupFlag'] = $groupFlag;

        return $this;
    }

    /**
     * Gets spousalAccount
     *
     * @return string|null
     */
    public function getSpousalAccount()
    {
        return $this->container['spousalAccount'];
    }

    /**
     * Sets spousalAccount
     *
     * @param string|null $spousalAccount Spousal account.
     *
     * @return self
     */
    public function setSpousalAccount($spousalAccount)
    {
        if (is_null($spousalAccount)) {
            throw new \InvalidArgumentException('non-nullable spousalAccount cannot be null');
        }
        $this->container['spousalAccount'] = $spousalAccount;

        return $this;
    }

    /**
     * Gets lockedIn
     *
     * @return string|null
     */
    public function getLockedIn()
    {
        return $this->container['lockedIn'];
    }

    /**
     * Sets lockedIn
     *
     * @param string|null $lockedIn Locked in.
     *
     * @return self
     */
    public function setLockedIn($lockedIn)
    {
        if (is_null($lockedIn)) {
            throw new \InvalidArgumentException('non-nullable lockedIn cannot be null');
        }
        $this->container['lockedIn'] = $lockedIn;

        return $this;
    }

    /**
     * Gets jointSignature
     *
     * @return string|null
     */
    public function getJointSignature()
    {
        return $this->container['jointSignature'];
    }

    /**
     * Sets jointSignature
     *
     * @param string|null $jointSignature Joint signature.
     *
     * @return self
     */
    public function setJointSignature($jointSignature)
    {
        if (is_null($jointSignature)) {
            throw new \InvalidArgumentException('non-nullable jointSignature cannot be null');
        }
        $this->container['jointSignature'] = $jointSignature;

        return $this;
    }

    /**
     * Gets jointSurvivor
     *
     * @return string|null
     */
    public function getJointSurvivor()
    {
        return $this->container['jointSurvivor'];
    }

    /**
     * Sets jointSurvivor
     *
     * @param string|null $jointSurvivor Joint survivor.
     *
     * @return self
     */
    public function setJointSurvivor($jointSurvivor)
    {
        if (is_null($jointSurvivor)) {
            throw new \InvalidArgumentException('non-nullable jointSurvivor cannot be null');
        }
        $this->container['jointSurvivor'] = $jointSurvivor;

        return $this;
    }

    /**
     * Gets inTrust
     *
     * @return string|null
     */
    public function getInTrust()
    {
        return $this->container['inTrust'];
    }

    /**
     * Sets inTrust
     *
     * @param string|null $inTrust In trust.
     *
     * @return self
     */
    public function setInTrust($inTrust)
    {
        if (is_null($inTrust)) {
            throw new \InvalidArgumentException('non-nullable inTrust cannot be null');
        }
        $this->container['inTrust'] = $inTrust;

        return $this;
    }

    /**
     * Gets inTrustFor
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePlanInTrust[]|null
     */
    public function getInTrustFor()
    {
        return $this->container['inTrustFor'];
    }

    /**
     * Sets inTrustFor
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePlanInTrust[]|null $inTrustFor List of plans in trust.
     *
     * @return self
     */
    public function setInTrustFor($inTrustFor)
    {
        if (is_null($inTrustFor)) {
            throw new \InvalidArgumentException('non-nullable inTrustFor cannot be null');
        }
        $this->container['inTrustFor'] = $inTrustFor;

        return $this;
    }

    /**
     * Gets beneficiaries
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePlanBeneficiary[]|null
     */
    public function getBeneficiaries()
    {
        return $this->container['beneficiaries'];
    }

    /**
     * Sets beneficiaries
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePlanBeneficiary[]|null $beneficiaries List of beneficiaries.
     *
     * @return self
     */
    public function setBeneficiaries($beneficiaries)
    {
        if (is_null($beneficiaries)) {
            throw new \InvalidArgumentException('non-nullable beneficiaries cannot be null');
        }
        $this->container['beneficiaries'] = $beneficiaries;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePlanSummary[]|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePlanSummary[]|null $summary List of summaries.
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            throw new \InvalidArgumentException('non-nullable summary cannot be null');
        }
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets mutualFunds
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null
     * @deprecated
     */
    public function getMutualFunds()
    {
        return $this->container['mutualFunds'];
    }

    /**
     * Sets mutualFunds
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null $mutualFunds Deprecated: Use assets instead. List of asset.
     *
     * @return self
     * @deprecated
     */
    public function setMutualFunds($mutualFunds)
    {
        if (is_null($mutualFunds)) {
            throw new \InvalidArgumentException('non-nullable mutualFunds cannot be null');
        }
        $this->container['mutualFunds'] = $mutualFunds;

        return $this;
    }

    /**
     * Gets segregatedFunds
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null
     * @deprecated
     */
    public function getSegregatedFunds()
    {
        return $this->container['segregatedFunds'];
    }

    /**
     * Sets segregatedFunds
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null $segregatedFunds Deprecated: Use assets instead. List of segregated funds.
     *
     * @return self
     * @deprecated
     */
    public function setSegregatedFunds($segregatedFunds)
    {
        if (is_null($segregatedFunds)) {
            throw new \InvalidArgumentException('non-nullable segregatedFunds cannot be null');
        }
        $this->container['segregatedFunds'] = $segregatedFunds;

        return $this;
    }

    /**
     * Gets gics
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null
     * @deprecated
     */
    public function getGics()
    {
        return $this->container['gics'];
    }

    /**
     * Sets gics
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null $gics Deprecated: Use assets instead. List of gics.
     *
     * @return self
     * @deprecated
     */
    public function setGics($gics)
    {
        if (is_null($gics)) {
            throw new \InvalidArgumentException('non-nullable gics cannot be null');
        }
        $this->container['gics'] = $gics;

        return $this;
    }

    /**
     * Gets shares
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null
     * @deprecated
     */
    public function getShares()
    {
        return $this->container['shares'];
    }

    /**
     * Sets shares
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null $shares Deprecated: Use assets instead. List of shares.
     *
     * @return self
     * @deprecated
     */
    public function setShares($shares)
    {
        if (is_null($shares)) {
            throw new \InvalidArgumentException('non-nullable shares cannot be null');
        }
        $this->container['shares'] = $shares;

        return $this;
    }

    /**
     * Gets bankAccounts
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null
     * @deprecated
     */
    public function getBankAccounts()
    {
        return $this->container['bankAccounts'];
    }

    /**
     * Sets bankAccounts
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null $bankAccounts Deprecated: Use assets instead. List of bank accounts.
     *
     * @return self
     * @deprecated
     */
    public function setBankAccounts($bankAccounts)
    {
        if (is_null($bankAccounts)) {
            throw new \InvalidArgumentException('non-nullable bankAccounts cannot be null');
        }
        $this->container['bankAccounts'] = $bankAccounts;

        return $this;
    }

    /**
     * Gets assets
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null
     */
    public function getAssets()
    {
        return $this->container['assets'];
    }

    /**
     * Sets assets
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null $assets List of assets.
     *
     * @return self
     */
    public function setAssets($assets)
    {
        if (is_null($assets)) {
            throw new \InvalidArgumentException('non-nullable assets cannot be null');
        }
        $this->container['assets'] = $assets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


