<?php
/**
 * LegacyFinancePlan
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * LegacyFinancePlan Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LegacyFinancePlan implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'legacy.finance.Plan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'description' => 'string',
        'accountNumber' => 'string',
        'accountType' => 'string',
        'marketValue' => 'string',
        'marketValueDate' => 'string',
        'maturityDate' => '\DateTime',
        'owner' => 'string',
        'owner2' => 'string',
        'accountDesignation' => 'string',
        'intermediaryCode' => 'string',
        'intermediaryAccountNumber' => 'string',
        'groupFlag' => 'string',
        'spousalAccount' => 'string',
        'lockedIn' => 'string',
        'jointSignature' => 'string',
        'jointSurvivor' => 'string',
        'inTrust' => 'string',
        'inTrustFor' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePlanInTrust[]',
        'beneficiaries' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePlanBeneficiary[]',
        'summary' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePlanSummary[]',
        'mutualFunds' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]',
        'segregatedFunds' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]',
        'gics' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]',
        'shares' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]',
        'bankAccounts' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]',
        'assets' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'description' => null,
        'accountNumber' => null,
        'accountType' => null,
        'marketValue' => null,
        'marketValueDate' => null,
        'maturityDate' => 'date',
        'owner' => null,
        'owner2' => null,
        'accountDesignation' => null,
        'intermediaryCode' => null,
        'intermediaryAccountNumber' => null,
        'groupFlag' => null,
        'spousalAccount' => null,
        'lockedIn' => null,
        'jointSignature' => null,
        'jointSurvivor' => null,
        'inTrust' => null,
        'inTrustFor' => null,
        'beneficiaries' => null,
        'summary' => null,
        'mutualFunds' => null,
        'segregatedFunds' => null,
        'gics' => null,
        'shares' => null,
        'bankAccounts' => null,
        'assets' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'description' => 'description',
        'accountNumber' => 'accountNumber',
        'accountType' => 'accountType',
        'marketValue' => 'marketValue',
        'marketValueDate' => 'marketValueDate',
        'maturityDate' => 'maturityDate',
        'owner' => 'owner',
        'owner2' => 'owner2',
        'accountDesignation' => 'accountDesignation',
        'intermediaryCode' => 'intermediaryCode',
        'intermediaryAccountNumber' => 'intermediaryAccountNumber',
        'groupFlag' => 'groupFlag',
        'spousalAccount' => 'spousalAccount',
        'lockedIn' => 'lockedIn',
        'jointSignature' => 'jointSignature',
        'jointSurvivor' => 'jointSurvivor',
        'inTrust' => 'inTrust',
        'inTrustFor' => 'inTrustFor',
        'beneficiaries' => 'beneficiaries',
        'summary' => 'summary',
        'mutualFunds' => 'mutualFunds',
        'segregatedFunds' => 'segregatedFunds',
        'gics' => 'gics',
        'shares' => 'shares',
        'bankAccounts' => 'bankAccounts',
        'assets' => 'assets'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'description' => 'setDescription',
        'accountNumber' => 'setAccountNumber',
        'accountType' => 'setAccountType',
        'marketValue' => 'setMarketValue',
        'marketValueDate' => 'setMarketValueDate',
        'maturityDate' => 'setMaturityDate',
        'owner' => 'setOwner',
        'owner2' => 'setOwner2',
        'accountDesignation' => 'setAccountDesignation',
        'intermediaryCode' => 'setIntermediaryCode',
        'intermediaryAccountNumber' => 'setIntermediaryAccountNumber',
        'groupFlag' => 'setGroupFlag',
        'spousalAccount' => 'setSpousalAccount',
        'lockedIn' => 'setLockedIn',
        'jointSignature' => 'setJointSignature',
        'jointSurvivor' => 'setJointSurvivor',
        'inTrust' => 'setInTrust',
        'inTrustFor' => 'setInTrustFor',
        'beneficiaries' => 'setBeneficiaries',
        'summary' => 'setSummary',
        'mutualFunds' => 'setMutualFunds',
        'segregatedFunds' => 'setSegregatedFunds',
        'gics' => 'setGics',
        'shares' => 'setShares',
        'bankAccounts' => 'setBankAccounts',
        'assets' => 'setAssets'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'description' => 'getDescription',
        'accountNumber' => 'getAccountNumber',
        'accountType' => 'getAccountType',
        'marketValue' => 'getMarketValue',
        'marketValueDate' => 'getMarketValueDate',
        'maturityDate' => 'getMaturityDate',
        'owner' => 'getOwner',
        'owner2' => 'getOwner2',
        'accountDesignation' => 'getAccountDesignation',
        'intermediaryCode' => 'getIntermediaryCode',
        'intermediaryAccountNumber' => 'getIntermediaryAccountNumber',
        'groupFlag' => 'getGroupFlag',
        'spousalAccount' => 'getSpousalAccount',
        'lockedIn' => 'getLockedIn',
        'jointSignature' => 'getJointSignature',
        'jointSurvivor' => 'getJointSurvivor',
        'inTrust' => 'getInTrust',
        'inTrustFor' => 'getInTrustFor',
        'beneficiaries' => 'getBeneficiaries',
        'summary' => 'getSummary',
        'mutualFunds' => 'getMutualFunds',
        'segregatedFunds' => 'getSegregatedFunds',
        'gics' => 'getGics',
        'shares' => 'getShares',
        'bankAccounts' => 'getBankAccounts',
        'assets' => 'getAssets'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['accountNumber'] = $data['accountNumber'] ?? null;
        $this->container['accountType'] = $data['accountType'] ?? null;
        $this->container['marketValue'] = $data['marketValue'] ?? null;
        $this->container['marketValueDate'] = $data['marketValueDate'] ?? null;
        $this->container['maturityDate'] = $data['maturityDate'] ?? null;
        $this->container['owner'] = $data['owner'] ?? null;
        $this->container['owner2'] = $data['owner2'] ?? null;
        $this->container['accountDesignation'] = $data['accountDesignation'] ?? null;
        $this->container['intermediaryCode'] = $data['intermediaryCode'] ?? null;
        $this->container['intermediaryAccountNumber'] = $data['intermediaryAccountNumber'] ?? null;
        $this->container['groupFlag'] = $data['groupFlag'] ?? null;
        $this->container['spousalAccount'] = $data['spousalAccount'] ?? null;
        $this->container['lockedIn'] = $data['lockedIn'] ?? null;
        $this->container['jointSignature'] = $data['jointSignature'] ?? null;
        $this->container['jointSurvivor'] = $data['jointSurvivor'] ?? null;
        $this->container['inTrust'] = $data['inTrust'] ?? null;
        $this->container['inTrustFor'] = $data['inTrustFor'] ?? null;
        $this->container['beneficiaries'] = $data['beneficiaries'] ?? null;
        $this->container['summary'] = $data['summary'] ?? null;
        $this->container['mutualFunds'] = $data['mutualFunds'] ?? null;
        $this->container['segregatedFunds'] = $data['segregatedFunds'] ?? null;
        $this->container['gics'] = $data['gics'] ?? null;
        $this->container['shares'] = $data['shares'] ?? null;
        $this->container['bankAccounts'] = $data['bankAccounts'] ?? null;
        $this->container['assets'] = $data['assets'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets accountNumber
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['accountNumber'];
    }

    /**
     * Sets accountNumber
     *
     * @param string|null $accountNumber accountNumber
     *
     * @return self
     */
    public function setAccountNumber($accountNumber)
    {
        $this->container['accountNumber'] = $accountNumber;

        return $this;
    }

    /**
     * Gets accountType
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['accountType'];
    }

    /**
     * Sets accountType
     *
     * @param string|null $accountType accountType
     *
     * @return self
     */
    public function setAccountType($accountType)
    {
        $this->container['accountType'] = $accountType;

        return $this;
    }

    /**
     * Gets marketValue
     *
     * @return string|null
     */
    public function getMarketValue()
    {
        return $this->container['marketValue'];
    }

    /**
     * Sets marketValue
     *
     * @param string|null $marketValue marketValue
     *
     * @return self
     */
    public function setMarketValue($marketValue)
    {
        $this->container['marketValue'] = $marketValue;

        return $this;
    }

    /**
     * Gets marketValueDate
     *
     * @return string|null
     */
    public function getMarketValueDate()
    {
        return $this->container['marketValueDate'];
    }

    /**
     * Sets marketValueDate
     *
     * @param string|null $marketValueDate marketValueDate
     *
     * @return self
     */
    public function setMarketValueDate($marketValueDate)
    {
        $this->container['marketValueDate'] = $marketValueDate;

        return $this;
    }

    /**
     * Gets maturityDate
     *
     * @return \DateTime|null
     */
    public function getMaturityDate()
    {
        return $this->container['maturityDate'];
    }

    /**
     * Sets maturityDate
     *
     * @param \DateTime|null $maturityDate maturityDate
     *
     * @return self
     */
    public function setMaturityDate($maturityDate)
    {
        $this->container['maturityDate'] = $maturityDate;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets owner2
     *
     * @return string|null
     */
    public function getOwner2()
    {
        return $this->container['owner2'];
    }

    /**
     * Sets owner2
     *
     * @param string|null $owner2 owner2
     *
     * @return self
     */
    public function setOwner2($owner2)
    {
        $this->container['owner2'] = $owner2;

        return $this;
    }

    /**
     * Gets accountDesignation
     *
     * @return string|null
     */
    public function getAccountDesignation()
    {
        return $this->container['accountDesignation'];
    }

    /**
     * Sets accountDesignation
     *
     * @param string|null $accountDesignation accountDesignation
     *
     * @return self
     */
    public function setAccountDesignation($accountDesignation)
    {
        $this->container['accountDesignation'] = $accountDesignation;

        return $this;
    }

    /**
     * Gets intermediaryCode
     *
     * @return string|null
     */
    public function getIntermediaryCode()
    {
        return $this->container['intermediaryCode'];
    }

    /**
     * Sets intermediaryCode
     *
     * @param string|null $intermediaryCode intermediaryCode
     *
     * @return self
     */
    public function setIntermediaryCode($intermediaryCode)
    {
        $this->container['intermediaryCode'] = $intermediaryCode;

        return $this;
    }

    /**
     * Gets intermediaryAccountNumber
     *
     * @return string|null
     */
    public function getIntermediaryAccountNumber()
    {
        return $this->container['intermediaryAccountNumber'];
    }

    /**
     * Sets intermediaryAccountNumber
     *
     * @param string|null $intermediaryAccountNumber intermediaryAccountNumber
     *
     * @return self
     */
    public function setIntermediaryAccountNumber($intermediaryAccountNumber)
    {
        $this->container['intermediaryAccountNumber'] = $intermediaryAccountNumber;

        return $this;
    }

    /**
     * Gets groupFlag
     *
     * @return string|null
     */
    public function getGroupFlag()
    {
        return $this->container['groupFlag'];
    }

    /**
     * Sets groupFlag
     *
     * @param string|null $groupFlag groupFlag
     *
     * @return self
     */
    public function setGroupFlag($groupFlag)
    {
        $this->container['groupFlag'] = $groupFlag;

        return $this;
    }

    /**
     * Gets spousalAccount
     *
     * @return string|null
     */
    public function getSpousalAccount()
    {
        return $this->container['spousalAccount'];
    }

    /**
     * Sets spousalAccount
     *
     * @param string|null $spousalAccount spousalAccount
     *
     * @return self
     */
    public function setSpousalAccount($spousalAccount)
    {
        $this->container['spousalAccount'] = $spousalAccount;

        return $this;
    }

    /**
     * Gets lockedIn
     *
     * @return string|null
     */
    public function getLockedIn()
    {
        return $this->container['lockedIn'];
    }

    /**
     * Sets lockedIn
     *
     * @param string|null $lockedIn lockedIn
     *
     * @return self
     */
    public function setLockedIn($lockedIn)
    {
        $this->container['lockedIn'] = $lockedIn;

        return $this;
    }

    /**
     * Gets jointSignature
     *
     * @return string|null
     */
    public function getJointSignature()
    {
        return $this->container['jointSignature'];
    }

    /**
     * Sets jointSignature
     *
     * @param string|null $jointSignature jointSignature
     *
     * @return self
     */
    public function setJointSignature($jointSignature)
    {
        $this->container['jointSignature'] = $jointSignature;

        return $this;
    }

    /**
     * Gets jointSurvivor
     *
     * @return string|null
     */
    public function getJointSurvivor()
    {
        return $this->container['jointSurvivor'];
    }

    /**
     * Sets jointSurvivor
     *
     * @param string|null $jointSurvivor jointSurvivor
     *
     * @return self
     */
    public function setJointSurvivor($jointSurvivor)
    {
        $this->container['jointSurvivor'] = $jointSurvivor;

        return $this;
    }

    /**
     * Gets inTrust
     *
     * @return string|null
     */
    public function getInTrust()
    {
        return $this->container['inTrust'];
    }

    /**
     * Sets inTrust
     *
     * @param string|null $inTrust inTrust
     *
     * @return self
     */
    public function setInTrust($inTrust)
    {
        $this->container['inTrust'] = $inTrust;

        return $this;
    }

    /**
     * Gets inTrustFor
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePlanInTrust[]|null
     */
    public function getInTrustFor()
    {
        return $this->container['inTrustFor'];
    }

    /**
     * Sets inTrustFor
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePlanInTrust[]|null $inTrustFor inTrustFor
     *
     * @return self
     */
    public function setInTrustFor($inTrustFor)
    {
        $this->container['inTrustFor'] = $inTrustFor;

        return $this;
    }

    /**
     * Gets beneficiaries
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePlanBeneficiary[]|null
     */
    public function getBeneficiaries()
    {
        return $this->container['beneficiaries'];
    }

    /**
     * Sets beneficiaries
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePlanBeneficiary[]|null $beneficiaries beneficiaries
     *
     * @return self
     */
    public function setBeneficiaries($beneficiaries)
    {
        $this->container['beneficiaries'] = $beneficiaries;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePlanSummary[]|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePlanSummary[]|null $summary summary
     *
     * @return self
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets mutualFunds
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null
     */
    public function getMutualFunds()
    {
        return $this->container['mutualFunds'];
    }

    /**
     * Sets mutualFunds
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null $mutualFunds mutualFunds
     *
     * @return self
     */
    public function setMutualFunds($mutualFunds)
    {
        $this->container['mutualFunds'] = $mutualFunds;

        return $this;
    }

    /**
     * Gets segregatedFunds
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null
     */
    public function getSegregatedFunds()
    {
        return $this->container['segregatedFunds'];
    }

    /**
     * Sets segregatedFunds
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null $segregatedFunds segregatedFunds
     *
     * @return self
     */
    public function setSegregatedFunds($segregatedFunds)
    {
        $this->container['segregatedFunds'] = $segregatedFunds;

        return $this;
    }

    /**
     * Gets gics
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null
     */
    public function getGics()
    {
        return $this->container['gics'];
    }

    /**
     * Sets gics
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null $gics gics
     *
     * @return self
     */
    public function setGics($gics)
    {
        $this->container['gics'] = $gics;

        return $this;
    }

    /**
     * Gets shares
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null
     */
    public function getShares()
    {
        return $this->container['shares'];
    }

    /**
     * Sets shares
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null $shares shares
     *
     * @return self
     */
    public function setShares($shares)
    {
        $this->container['shares'] = $shares;

        return $this;
    }

    /**
     * Gets bankAccounts
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null
     */
    public function getBankAccounts()
    {
        return $this->container['bankAccounts'];
    }

    /**
     * Sets bankAccounts
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null $bankAccounts bankAccounts
     *
     * @return self
     */
    public function setBankAccounts($bankAccounts)
    {
        $this->container['bankAccounts'] = $bankAccounts;

        return $this;
    }

    /**
     * Gets assets
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null
     */
    public function getAssets()
    {
        return $this->container['assets'];
    }

    /**
     * Sets assets
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceAsset[]|null $assets assets
     *
     * @return self
     */
    public function setAssets($assets)
    {
        $this->container['assets'] = $assets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


