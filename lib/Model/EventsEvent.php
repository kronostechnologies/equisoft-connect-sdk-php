<?php
/**
 * EventsEvent
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-equisoft-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * EventsEvent Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EventsEvent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'events.Event';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'subject' => 'string',
        'start' => '\Equisoft\SDK\EquisoftConnect\Model\DateOrDateTime',
        'end' => '\Equisoft\SDK\EquisoftConnect\Model\DateOrDateTime',
        'allDay' => 'bool',
        'isCompleted' => 'bool',
        'initialDate' => 'string',
        'description' => 'string',
        'internalNotes' => 'string',
        'location' => 'string',
        'type' => '\Equisoft\SDK\EquisoftConnect\Model\EventsEventType',
        'category' => '\Equisoft\SDK\EquisoftConnect\Model\FieldValue',
        'subCategory' => '\Equisoft\SDK\EquisoftConnect\Model\FieldValue',
        'recurrenceRule' => 'string',
        'recurringEventId' => 'string',
        'originalStartDate' => 'string',
        'priority' => 'int',
        'visibility' => '\Equisoft\SDK\EquisoftConnect\Model\EventsVisibilityType',
        'creationTime' => '\DateTime',
        'updateTime' => '\DateTime',
        'calendarId' => 'int',
        'color' => 'string',
        'textColor' => 'string',
        'contactIds' => 'int[]',
        'documentIds' => 'int[]',
        'accessRights' => '\Equisoft\SDK\EquisoftConnect\Model\AccessRights'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'subject' => null,
        'start' => null,
        'end' => null,
        'allDay' => null,
        'isCompleted' => null,
        'initialDate' => null,
        'description' => null,
        'internalNotes' => null,
        'location' => null,
        'type' => null,
        'category' => null,
        'subCategory' => null,
        'recurrenceRule' => null,
        'recurringEventId' => null,
        'originalStartDate' => null,
        'priority' => null,
        'visibility' => null,
        'creationTime' => 'date-time',
        'updateTime' => 'date-time',
        'calendarId' => null,
        'color' => null,
        'textColor' => null,
        'contactIds' => null,
        'documentIds' => null,
        'accessRights' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'subject' => false,
		'start' => false,
		'end' => false,
		'allDay' => false,
		'isCompleted' => false,
		'initialDate' => true,
		'description' => false,
		'internalNotes' => false,
		'location' => false,
		'type' => false,
		'category' => true,
		'subCategory' => true,
		'recurrenceRule' => true,
		'recurringEventId' => true,
		'originalStartDate' => true,
		'priority' => false,
		'visibility' => false,
		'creationTime' => true,
		'updateTime' => true,
		'calendarId' => false,
		'color' => true,
		'textColor' => true,
		'contactIds' => false,
		'documentIds' => false,
		'accessRights' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'subject' => 'subject',
        'start' => 'start',
        'end' => 'end',
        'allDay' => 'allDay',
        'isCompleted' => 'isCompleted',
        'initialDate' => 'initialDate',
        'description' => 'description',
        'internalNotes' => 'internalNotes',
        'location' => 'location',
        'type' => 'type',
        'category' => 'category',
        'subCategory' => 'subCategory',
        'recurrenceRule' => 'recurrenceRule',
        'recurringEventId' => 'recurringEventId',
        'originalStartDate' => 'originalStartDate',
        'priority' => 'priority',
        'visibility' => 'visibility',
        'creationTime' => 'creationTime',
        'updateTime' => 'updateTime',
        'calendarId' => 'calendarId',
        'color' => 'color',
        'textColor' => 'textColor',
        'contactIds' => 'contactIds',
        'documentIds' => 'documentIds',
        'accessRights' => 'accessRights'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'subject' => 'setSubject',
        'start' => 'setStart',
        'end' => 'setEnd',
        'allDay' => 'setAllDay',
        'isCompleted' => 'setIsCompleted',
        'initialDate' => 'setInitialDate',
        'description' => 'setDescription',
        'internalNotes' => 'setInternalNotes',
        'location' => 'setLocation',
        'type' => 'setType',
        'category' => 'setCategory',
        'subCategory' => 'setSubCategory',
        'recurrenceRule' => 'setRecurrenceRule',
        'recurringEventId' => 'setRecurringEventId',
        'originalStartDate' => 'setOriginalStartDate',
        'priority' => 'setPriority',
        'visibility' => 'setVisibility',
        'creationTime' => 'setCreationTime',
        'updateTime' => 'setUpdateTime',
        'calendarId' => 'setCalendarId',
        'color' => 'setColor',
        'textColor' => 'setTextColor',
        'contactIds' => 'setContactIds',
        'documentIds' => 'setDocumentIds',
        'accessRights' => 'setAccessRights'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'subject' => 'getSubject',
        'start' => 'getStart',
        'end' => 'getEnd',
        'allDay' => 'getAllDay',
        'isCompleted' => 'getIsCompleted',
        'initialDate' => 'getInitialDate',
        'description' => 'getDescription',
        'internalNotes' => 'getInternalNotes',
        'location' => 'getLocation',
        'type' => 'getType',
        'category' => 'getCategory',
        'subCategory' => 'getSubCategory',
        'recurrenceRule' => 'getRecurrenceRule',
        'recurringEventId' => 'getRecurringEventId',
        'originalStartDate' => 'getOriginalStartDate',
        'priority' => 'getPriority',
        'visibility' => 'getVisibility',
        'creationTime' => 'getCreationTime',
        'updateTime' => 'getUpdateTime',
        'calendarId' => 'getCalendarId',
        'color' => 'getColor',
        'textColor' => 'getTextColor',
        'contactIds' => 'getContactIds',
        'documentIds' => 'getDocumentIds',
        'accessRights' => 'getAccessRights'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('start', $data ?? [], null);
        $this->setIfExists('end', $data ?? [], null);
        $this->setIfExists('allDay', $data ?? [], null);
        $this->setIfExists('isCompleted', $data ?? [], null);
        $this->setIfExists('initialDate', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('internalNotes', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('subCategory', $data ?? [], null);
        $this->setIfExists('recurrenceRule', $data ?? [], null);
        $this->setIfExists('recurringEventId', $data ?? [], null);
        $this->setIfExists('originalStartDate', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('visibility', $data ?? [], null);
        $this->setIfExists('creationTime', $data ?? [], null);
        $this->setIfExists('updateTime', $data ?? [], null);
        $this->setIfExists('calendarId', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('textColor', $data ?? [], null);
        $this->setIfExists('contactIds', $data ?? [], null);
        $this->setIfExists('documentIds', $data ?? [], null);
        $this->setIfExists('accessRights', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['start'] === null) {
            $invalidProperties[] = "'start' can't be null";
        }
        if ($this->container['end'] === null) {
            $invalidProperties[] = "'end' can't be null";
        }
        if ($this->container['allDay'] === null) {
            $invalidProperties[] = "'allDay' can't be null";
        }
        if ($this->container['isCompleted'] === null) {
            $invalidProperties[] = "'isCompleted' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['priority'] === null) {
            $invalidProperties[] = "'priority' can't be null";
        }
        if ($this->container['visibility'] === null) {
            $invalidProperties[] = "'visibility' can't be null";
        }
        if ($this->container['calendarId'] === null) {
            $invalidProperties[] = "'calendarId' can't be null";
        }
        if ($this->container['accessRights'] === null) {
            $invalidProperties[] = "'accessRights' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique numerical identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Subject/Title of the Event.
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets start
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\DateOrDateTime
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\DateOrDateTime $start start
     *
     * @return self
     */
    public function setStart($start)
    {
        if (is_null($start)) {
            throw new \InvalidArgumentException('non-nullable start cannot be null');
        }
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets end
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\DateOrDateTime
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\DateOrDateTime $end end
     *
     * @return self
     */
    public function setEnd($end)
    {
        if (is_null($end)) {
            throw new \InvalidArgumentException('non-nullable end cannot be null');
        }
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets allDay
     *
     * @return bool
     */
    public function getAllDay()
    {
        return $this->container['allDay'];
    }

    /**
     * Sets allDay
     *
     * @param bool $allDay Indicate if the event is an all-day event or a timed event.
     *
     * @return self
     */
    public function setAllDay($allDay)
    {
        if (is_null($allDay)) {
            throw new \InvalidArgumentException('non-nullable allDay cannot be null');
        }
        $this->container['allDay'] = $allDay;

        return $this;
    }

    /**
     * Gets isCompleted
     *
     * @return bool
     */
    public function getIsCompleted()
    {
        return $this->container['isCompleted'];
    }

    /**
     * Sets isCompleted
     *
     * @param bool $isCompleted Is the event part of a completed/done calendar.
     *
     * @return self
     */
    public function setIsCompleted($isCompleted)
    {
        if (is_null($isCompleted)) {
            throw new \InvalidArgumentException('non-nullable isCompleted cannot be null');
        }
        $this->container['isCompleted'] = $isCompleted;

        return $this;
    }

    /**
     * Gets initialDate
     *
     * @return string|null
     */
    public function getInitialDate()
    {
        return $this->container['initialDate'];
    }

    /**
     * Sets initialDate
     *
     * @param string|null $initialDate Date the Event was initially scheduled. As defined by full-date - RFC3339.
     *
     * @return self
     */
    public function setInitialDate($initialDate)
    {
        if (is_null($initialDate)) {
            array_push($this->openAPINullablesSetToNull, 'initialDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('initialDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['initialDate'] = $initialDate;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Public description of the Event.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets internalNotes
     *
     * @return string|null
     */
    public function getInternalNotes()
    {
        return $this->container['internalNotes'];
    }

    /**
     * Sets internalNotes
     *
     * @param string|null $internalNotes Internal notes on the Event. Not synced on remote sources.
     *
     * @return self
     */
    public function setInternalNotes($internalNotes)
    {
        if (is_null($internalNotes)) {
            throw new \InvalidArgumentException('non-nullable internalNotes cannot be null');
        }
        $this->container['internalNotes'] = $internalNotes;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location Location of the event in free-text form.
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\EventsEventType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\EventsEventType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            array_push($this->openAPINullablesSetToNull, 'category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets subCategory
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null
     */
    public function getSubCategory()
    {
        return $this->container['subCategory'];
    }

    /**
     * Sets subCategory
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null $subCategory subCategory
     *
     * @return self
     */
    public function setSubCategory($subCategory)
    {
        if (is_null($subCategory)) {
            array_push($this->openAPINullablesSetToNull, 'subCategory');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subCategory', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subCategory'] = $subCategory;

        return $this;
    }

    /**
     * Gets recurrenceRule
     *
     * @return string|null
     */
    public function getRecurrenceRule()
    {
        return $this->container['recurrenceRule'];
    }

    /**
     * Sets recurrenceRule
     *
     * @param string|null $recurrenceRule The recurrence rule for this event. The recurrence is a string conform to RFC 5545 (see RRULE http://tools.ietf.org/html/rfc5545#section-3.8.5.3).
     *
     * @return self
     */
    public function setRecurrenceRule($recurrenceRule)
    {
        if (is_null($recurrenceRule)) {
            array_push($this->openAPINullablesSetToNull, 'recurrenceRule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recurrenceRule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recurrenceRule'] = $recurrenceRule;

        return $this;
    }

    /**
     * Gets recurringEventId
     *
     * @return string|null
     */
    public function getRecurringEventId()
    {
        return $this->container['recurringEventId'];
    }

    /**
     * Sets recurringEventId
     *
     * @param string|null $recurringEventId For an instance of recurring event, ID of the master event.
     *
     * @return self
     */
    public function setRecurringEventId($recurringEventId)
    {
        if (is_null($recurringEventId)) {
            array_push($this->openAPINullablesSetToNull, 'recurringEventId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recurringEventId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recurringEventId'] = $recurringEventId;

        return $this;
    }

    /**
     * Gets originalStartDate
     *
     * @return string|null
     */
    public function getOriginalStartDate()
    {
        return $this->container['originalStartDate'];
    }

    /**
     * Sets originalStartDate
     *
     * @param string|null $originalStartDate For an instance of recurring event, original start date of the event according to the recurrence rule. This uniquely identify the occurrence and can be different from start date.
     *
     * @return self
     */
    public function setOriginalStartDate($originalStartDate)
    {
        if (is_null($originalStartDate)) {
            array_push($this->openAPINullablesSetToNull, 'originalStartDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('originalStartDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['originalStartDate'] = $originalStartDate;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority Importance/Priority of an event or task. 5 is the most important.
     *
     * @return self
     */
    public function setPriority($priority)
    {
        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\EventsVisibilityType
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\EventsVisibilityType $visibility visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        if (is_null($visibility)) {
            throw new \InvalidArgumentException('non-nullable visibility cannot be null');
        }
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets creationTime
     *
     * @return \DateTime|null
     */
    public function getCreationTime()
    {
        return $this->container['creationTime'];
    }

    /**
     * Sets creationTime
     *
     * @param \DateTime|null $creationTime Creation time. As defined by date-time - RFC3339.
     *
     * @return self
     */
    public function setCreationTime($creationTime)
    {
        if (is_null($creationTime)) {
            array_push($this->openAPINullablesSetToNull, 'creationTime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creationTime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creationTime'] = $creationTime;

        return $this;
    }

    /**
     * Gets updateTime
     *
     * @return \DateTime|null
     */
    public function getUpdateTime()
    {
        return $this->container['updateTime'];
    }

    /**
     * Sets updateTime
     *
     * @param \DateTime|null $updateTime Date time of last modification. As defined by date-time - RFC3339.
     *
     * @return self
     */
    public function setUpdateTime($updateTime)
    {
        if (is_null($updateTime)) {
            array_push($this->openAPINullablesSetToNull, 'updateTime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updateTime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updateTime'] = $updateTime;

        return $this;
    }

    /**
     * Gets calendarId
     *
     * @return int
     */
    public function getCalendarId()
    {
        return $this->container['calendarId'];
    }

    /**
     * Sets calendarId
     *
     * @param int $calendarId ID of the calendar owning this Event. If owned by many users, calendarId will be: - The primary (or completed depending on state) calendar ID of the connected user if the user is one of the owners. - Any primary (or completed depending on state) completed calendar ID of one of the owners.
     *
     * @return self
     */
    public function setCalendarId($calendarId)
    {
        if (is_null($calendarId)) {
            throw new \InvalidArgumentException('non-nullable calendarId cannot be null');
        }
        $this->container['calendarId'] = $calendarId;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color Hex color of this event background
     *
     * @return self
     */
    public function setColor($color)
    {
        if (is_null($color)) {
            array_push($this->openAPINullablesSetToNull, 'color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets textColor
     *
     * @return string|null
     */
    public function getTextColor()
    {
        return $this->container['textColor'];
    }

    /**
     * Sets textColor
     *
     * @param string|null $textColor Hex text color of this event
     *
     * @return self
     */
    public function setTextColor($textColor)
    {
        if (is_null($textColor)) {
            array_push($this->openAPINullablesSetToNull, 'textColor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('textColor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['textColor'] = $textColor;

        return $this;
    }

    /**
     * Gets contactIds
     *
     * @return int[]|null
     */
    public function getContactIds()
    {
        return $this->container['contactIds'];
    }

    /**
     * Sets contactIds
     *
     * @param int[]|null $contactIds IDs of the contacts linked to this Event.
     *
     * @return self
     */
    public function setContactIds($contactIds)
    {
        if (is_null($contactIds)) {
            throw new \InvalidArgumentException('non-nullable contactIds cannot be null');
        }
        $this->container['contactIds'] = $contactIds;

        return $this;
    }

    /**
     * Gets documentIds
     *
     * @return int[]|null
     */
    public function getDocumentIds()
    {
        return $this->container['documentIds'];
    }

    /**
     * Sets documentIds
     *
     * @param int[]|null $documentIds IDs of the documents linked to this Event.
     *
     * @return self
     */
    public function setDocumentIds($documentIds)
    {
        if (is_null($documentIds)) {
            throw new \InvalidArgumentException('non-nullable documentIds cannot be null');
        }
        $this->container['documentIds'] = $documentIds;

        return $this;
    }

    /**
     * Gets accessRights
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\AccessRights
     */
    public function getAccessRights()
    {
        return $this->container['accessRights'];
    }

    /**
     * Sets accessRights
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\AccessRights $accessRights accessRights
     *
     * @return self
     */
    public function setAccessRights($accessRights)
    {
        if (is_null($accessRights)) {
            throw new \InvalidArgumentException('non-nullable accessRights cannot be null');
        }
        $this->container['accessRights'] = $accessRights;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


