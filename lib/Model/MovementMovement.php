<?php
/**
 * MovementMovement
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * MovementMovement Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MovementMovement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'type';
    public const DISCRIMINATOR_MAP = [
        "CLIENTBASE_USING_DISTLIST" => "MovementClientBaseUsingDistributionListMovement",
        "CLIENTBASE_USING_FILE" => "MovementClientBaseUsingFileMovement",
        "COPY" => "MovementCopyMovement",
        "MOVE" => "MovementMoveMovement",
        "REASSIGNMENT" => "MovementReassignmentMovement",
    ];

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'movement.Movement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => '\Equisoft\SDK\EquisoftConnect\Model\MovementMovementType',
        'id' => 'int',
        'status' => 'string',
        'availableAction' => 'string',
        'scheduledDate' => 'string',
        'processedDate' => 'string',
        'addedDate' => 'string',
        'addedBy' => '\Equisoft\SDK\EquisoftConnect\Model\MovementUser',
        'cancelledDate' => 'string',
        'cancelledBy' => '\Equisoft\SDK\EquisoftConnect\Model\MovementUser',
        'sourceDatabase' => '\Equisoft\SDK\EquisoftConnect\Model\MovementDatabase',
        'destinationDatabase' => '\Equisoft\SDK\EquisoftConnect\Model\MovementDatabase',
        'users' => '\Equisoft\SDK\EquisoftConnect\Model\MovementUser[]',
        'userTuples' => '\Equisoft\SDK\EquisoftConnect\Model\MovementUserTuple[]',
        'sourceUser' => '\Equisoft\SDK\EquisoftConnect\Model\MovementUser',
        'destinationUser' => '\Equisoft\SDK\EquisoftConnect\Model\MovementUser',
        'accessCode' => '\Equisoft\SDK\EquisoftConnect\Model\MovementGatewayAccessCode',
        'sourceDistributionList' => '\Equisoft\SDK\EquisoftConnect\Model\MovementDistributionList',
        'datagatewayAccessMappings' => 'array<string,string>',
        'transferOption' => '\Equisoft\SDK\EquisoftConnect\Model\MovementTransferOption',
        'capsil' => 'bool',
        'univeris' => 'bool',
        'dataphile' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'id' => null,
        'status' => null,
        'availableAction' => null,
        'scheduledDate' => null,
        'processedDate' => null,
        'addedDate' => null,
        'addedBy' => null,
        'cancelledDate' => null,
        'cancelledBy' => null,
        'sourceDatabase' => null,
        'destinationDatabase' => null,
        'users' => null,
        'userTuples' => null,
        'sourceUser' => null,
        'destinationUser' => null,
        'accessCode' => null,
        'sourceDistributionList' => null,
        'datagatewayAccessMappings' => null,
        'transferOption' => null,
        'capsil' => null,
        'univeris' => null,
        'dataphile' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'id' => 'id',
        'status' => 'status',
        'availableAction' => 'availableAction',
        'scheduledDate' => 'scheduledDate',
        'processedDate' => 'processedDate',
        'addedDate' => 'addedDate',
        'addedBy' => 'addedBy',
        'cancelledDate' => 'cancelledDate',
        'cancelledBy' => 'cancelledBy',
        'sourceDatabase' => 'sourceDatabase',
        'destinationDatabase' => 'destinationDatabase',
        'users' => 'users',
        'userTuples' => 'userTuples',
        'sourceUser' => 'sourceUser',
        'destinationUser' => 'destinationUser',
        'accessCode' => 'accessCode',
        'sourceDistributionList' => 'sourceDistributionList',
        'datagatewayAccessMappings' => 'datagatewayAccessMappings',
        'transferOption' => 'transferOption',
        'capsil' => 'capsil',
        'univeris' => 'univeris',
        'dataphile' => 'dataphile'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'id' => 'setId',
        'status' => 'setStatus',
        'availableAction' => 'setAvailableAction',
        'scheduledDate' => 'setScheduledDate',
        'processedDate' => 'setProcessedDate',
        'addedDate' => 'setAddedDate',
        'addedBy' => 'setAddedBy',
        'cancelledDate' => 'setCancelledDate',
        'cancelledBy' => 'setCancelledBy',
        'sourceDatabase' => 'setSourceDatabase',
        'destinationDatabase' => 'setDestinationDatabase',
        'users' => 'setUsers',
        'userTuples' => 'setUserTuples',
        'sourceUser' => 'setSourceUser',
        'destinationUser' => 'setDestinationUser',
        'accessCode' => 'setAccessCode',
        'sourceDistributionList' => 'setSourceDistributionList',
        'datagatewayAccessMappings' => 'setDatagatewayAccessMappings',
        'transferOption' => 'setTransferOption',
        'capsil' => 'setCapsil',
        'univeris' => 'setUniveris',
        'dataphile' => 'setDataphile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'id' => 'getId',
        'status' => 'getStatus',
        'availableAction' => 'getAvailableAction',
        'scheduledDate' => 'getScheduledDate',
        'processedDate' => 'getProcessedDate',
        'addedDate' => 'getAddedDate',
        'addedBy' => 'getAddedBy',
        'cancelledDate' => 'getCancelledDate',
        'cancelledBy' => 'getCancelledBy',
        'sourceDatabase' => 'getSourceDatabase',
        'destinationDatabase' => 'getDestinationDatabase',
        'users' => 'getUsers',
        'userTuples' => 'getUserTuples',
        'sourceUser' => 'getSourceUser',
        'destinationUser' => 'getDestinationUser',
        'accessCode' => 'getAccessCode',
        'sourceDistributionList' => 'getSourceDistributionList',
        'datagatewayAccessMappings' => 'getDatagatewayAccessMappings',
        'transferOption' => 'getTransferOption',
        'capsil' => 'getCapsil',
        'univeris' => 'getUniveris',
        'dataphile' => 'getDataphile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['availableAction'] = $data['availableAction'] ?? null;
        $this->container['scheduledDate'] = $data['scheduledDate'] ?? null;
        $this->container['processedDate'] = $data['processedDate'] ?? null;
        $this->container['addedDate'] = $data['addedDate'] ?? null;
        $this->container['addedBy'] = $data['addedBy'] ?? null;
        $this->container['cancelledDate'] = $data['cancelledDate'] ?? null;
        $this->container['cancelledBy'] = $data['cancelledBy'] ?? null;
        $this->container['sourceDatabase'] = $data['sourceDatabase'] ?? null;
        $this->container['destinationDatabase'] = $data['destinationDatabase'] ?? null;
        $this->container['users'] = $data['users'] ?? null;
        $this->container['userTuples'] = $data['userTuples'] ?? null;
        $this->container['sourceUser'] = $data['sourceUser'] ?? null;
        $this->container['destinationUser'] = $data['destinationUser'] ?? null;
        $this->container['accessCode'] = $data['accessCode'] ?? null;
        $this->container['sourceDistributionList'] = $data['sourceDistributionList'] ?? null;
        $this->container['datagatewayAccessMappings'] = $data['datagatewayAccessMappings'] ?? null;
        $this->container['transferOption'] = $data['transferOption'] ?? null;
        $this->container['capsil'] = $data['capsil'] ?? null;
        $this->container['univeris'] = $data['univeris'] ?? null;
        $this->container['dataphile'] = $data['dataphile'] ?? null;

        // Initialize discriminator property with the model name.
        $this->container['type'] = static::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sourceDatabase'] === null) {
            $invalidProperties[] = "'sourceDatabase' can't be null";
        }
        if ($this->container['destinationDatabase'] === null) {
            $invalidProperties[] = "'destinationDatabase' can't be null";
        }
        if ($this->container['users'] === null) {
            $invalidProperties[] = "'users' can't be null";
        }
        if ($this->container['userTuples'] === null) {
            $invalidProperties[] = "'userTuples' can't be null";
        }
        if ($this->container['sourceUser'] === null) {
            $invalidProperties[] = "'sourceUser' can't be null";
        }
        if ($this->container['destinationUser'] === null) {
            $invalidProperties[] = "'destinationUser' can't be null";
        }
        if ($this->container['accessCode'] === null) {
            $invalidProperties[] = "'accessCode' can't be null";
        }
        if ($this->container['transferOption'] === null) {
            $invalidProperties[] = "'transferOption' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementMovementType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementMovementType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Unique numerical identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Movement status.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets availableAction
     *
     * @return string|null
     */
    public function getAvailableAction()
    {
        return $this->container['availableAction'];
    }

    /**
     * Sets availableAction
     *
     * @param string|null $availableAction Available action.
     *
     * @return self
     */
    public function setAvailableAction($availableAction)
    {
        $this->container['availableAction'] = $availableAction;

        return $this;
    }

    /**
     * Gets scheduledDate
     *
     * @return string|null
     */
    public function getScheduledDate()
    {
        return $this->container['scheduledDate'];
    }

    /**
     * Sets scheduledDate
     *
     * @param string|null $scheduledDate Scheduled date.
     *
     * @return self
     */
    public function setScheduledDate($scheduledDate)
    {
        $this->container['scheduledDate'] = $scheduledDate;

        return $this;
    }

    /**
     * Gets processedDate
     *
     * @return string|null
     */
    public function getProcessedDate()
    {
        return $this->container['processedDate'];
    }

    /**
     * Sets processedDate
     *
     * @param string|null $processedDate Processed date.
     *
     * @return self
     */
    public function setProcessedDate($processedDate)
    {
        $this->container['processedDate'] = $processedDate;

        return $this;
    }

    /**
     * Gets addedDate
     *
     * @return string|null
     */
    public function getAddedDate()
    {
        return $this->container['addedDate'];
    }

    /**
     * Sets addedDate
     *
     * @param string|null $addedDate Added date.
     *
     * @return self
     */
    public function setAddedDate($addedDate)
    {
        $this->container['addedDate'] = $addedDate;

        return $this;
    }

    /**
     * Gets addedBy
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementUser|null
     */
    public function getAddedBy()
    {
        return $this->container['addedBy'];
    }

    /**
     * Sets addedBy
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementUser|null $addedBy Added by.
     *
     * @return self
     */
    public function setAddedBy($addedBy)
    {
        $this->container['addedBy'] = $addedBy;

        return $this;
    }

    /**
     * Gets cancelledDate
     *
     * @return string|null
     */
    public function getCancelledDate()
    {
        return $this->container['cancelledDate'];
    }

    /**
     * Sets cancelledDate
     *
     * @param string|null $cancelledDate Cancelled date.
     *
     * @return self
     */
    public function setCancelledDate($cancelledDate)
    {
        $this->container['cancelledDate'] = $cancelledDate;

        return $this;
    }

    /**
     * Gets cancelledBy
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementUser|null
     */
    public function getCancelledBy()
    {
        return $this->container['cancelledBy'];
    }

    /**
     * Sets cancelledBy
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementUser|null $cancelledBy Cancelled by.
     *
     * @return self
     */
    public function setCancelledBy($cancelledBy)
    {
        $this->container['cancelledBy'] = $cancelledBy;

        return $this;
    }

    /**
     * Gets sourceDatabase
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementDatabase
     */
    public function getSourceDatabase()
    {
        return $this->container['sourceDatabase'];
    }

    /**
     * Sets sourceDatabase
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementDatabase $sourceDatabase sourceDatabase
     *
     * @return self
     */
    public function setSourceDatabase($sourceDatabase)
    {
        $this->container['sourceDatabase'] = $sourceDatabase;

        return $this;
    }

    /**
     * Gets destinationDatabase
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementDatabase
     */
    public function getDestinationDatabase()
    {
        return $this->container['destinationDatabase'];
    }

    /**
     * Sets destinationDatabase
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementDatabase $destinationDatabase destinationDatabase
     *
     * @return self
     */
    public function setDestinationDatabase($destinationDatabase)
    {
        $this->container['destinationDatabase'] = $destinationDatabase;

        return $this;
    }

    /**
     * Gets users
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementUser[]
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementUser[] $users List of users.
     *
     * @return self
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets userTuples
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementUserTuple[]
     */
    public function getUserTuples()
    {
        return $this->container['userTuples'];
    }

    /**
     * Sets userTuples
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementUserTuple[] $userTuples List of user tuples.
     *
     * @return self
     */
    public function setUserTuples($userTuples)
    {
        $this->container['userTuples'] = $userTuples;

        return $this;
    }

    /**
     * Gets sourceUser
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementUser
     */
    public function getSourceUser()
    {
        return $this->container['sourceUser'];
    }

    /**
     * Sets sourceUser
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementUser $sourceUser sourceUser
     *
     * @return self
     */
    public function setSourceUser($sourceUser)
    {
        $this->container['sourceUser'] = $sourceUser;

        return $this;
    }

    /**
     * Gets destinationUser
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementUser
     */
    public function getDestinationUser()
    {
        return $this->container['destinationUser'];
    }

    /**
     * Sets destinationUser
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementUser $destinationUser destinationUser
     *
     * @return self
     */
    public function setDestinationUser($destinationUser)
    {
        $this->container['destinationUser'] = $destinationUser;

        return $this;
    }

    /**
     * Gets accessCode
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementGatewayAccessCode
     */
    public function getAccessCode()
    {
        return $this->container['accessCode'];
    }

    /**
     * Sets accessCode
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementGatewayAccessCode $accessCode accessCode
     *
     * @return self
     */
    public function setAccessCode($accessCode)
    {
        $this->container['accessCode'] = $accessCode;

        return $this;
    }

    /**
     * Gets sourceDistributionList
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementDistributionList|null
     */
    public function getSourceDistributionList()
    {
        return $this->container['sourceDistributionList'];
    }

    /**
     * Sets sourceDistributionList
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementDistributionList|null $sourceDistributionList sourceDistributionList
     *
     * @return self
     */
    public function setSourceDistributionList($sourceDistributionList)
    {
        $this->container['sourceDistributionList'] = $sourceDistributionList;

        return $this;
    }

    /**
     * Gets datagatewayAccessMappings
     *
     * @return array<string,string>|null
     */
    public function getDatagatewayAccessMappings()
    {
        return $this->container['datagatewayAccessMappings'];
    }

    /**
     * Sets datagatewayAccessMappings
     *
     * @param array<string,string>|null $datagatewayAccessMappings Data gateway access mapping.
     *
     * @return self
     */
    public function setDatagatewayAccessMappings($datagatewayAccessMappings)
    {
        $this->container['datagatewayAccessMappings'] = $datagatewayAccessMappings;

        return $this;
    }

    /**
     * Gets transferOption
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementTransferOption
     */
    public function getTransferOption()
    {
        return $this->container['transferOption'];
    }

    /**
     * Sets transferOption
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementTransferOption $transferOption transferOption
     *
     * @return self
     */
    public function setTransferOption($transferOption)
    {
        $this->container['transferOption'] = $transferOption;

        return $this;
    }

    /**
     * Gets capsil
     *
     * @return bool|null
     */
    public function getCapsil()
    {
        return $this->container['capsil'];
    }

    /**
     * Sets capsil
     *
     * @param bool|null $capsil Is Capsil.
     *
     * @return self
     */
    public function setCapsil($capsil)
    {
        $this->container['capsil'] = $capsil;

        return $this;
    }

    /**
     * Gets univeris
     *
     * @return bool|null
     */
    public function getUniveris()
    {
        return $this->container['univeris'];
    }

    /**
     * Sets univeris
     *
     * @param bool|null $univeris Is Univeris. Deprecated: Univeris is not supported anymore and will be removed from future versions).
     *
     * @return self
     */
    public function setUniveris($univeris)
    {
        $this->container['univeris'] = $univeris;

        return $this;
    }

    /**
     * Gets dataphile
     *
     * @return bool|null
     */
    public function getDataphile()
    {
        return $this->container['dataphile'];
    }

    /**
     * Sets dataphile
     *
     * @param bool|null $dataphile Is Dataphile.
     *
     * @return self
     */
    public function setDataphile($dataphile)
    {
        $this->container['dataphile'] = $dataphile;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


