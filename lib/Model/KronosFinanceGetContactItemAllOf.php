<?php
/**
 * KronosFinanceGetContactItemAllOf
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * KronosFinanceGetContactItemAllOf Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class KronosFinanceGetContactItemAllOf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'kronos_finance_GetContactItem_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dateDecease' => 'string',
        'smoker' => 'string',
        'smokerSince' => 'string',
        'civilStatus' => 'string',
        'civilStatusSince' => 'string',
        'hin' => 'string',
        'advisor' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyUser',
        'sponsor' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyUser',
        'managers' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyUser[]',
        'jobs' => '\Equisoft\SDK\EquisoftConnect\Model\KronosFinanceJob[]',
        'generalInsurances' => '\Equisoft\SDK\EquisoftConnect\Model\KronosFinanceGeneralInsurance[]',
        'passport' => 'string',
        'passportExpiration' => 'string',
        'drivingLicense' => 'string',
        'drivingLicenseExpiration' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dateDecease' => null,
        'smoker' => null,
        'smokerSince' => null,
        'civilStatus' => null,
        'civilStatusSince' => null,
        'hin' => null,
        'advisor' => null,
        'sponsor' => null,
        'managers' => null,
        'jobs' => null,
        'generalInsurances' => null,
        'passport' => null,
        'passportExpiration' => null,
        'drivingLicense' => null,
        'drivingLicenseExpiration' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dateDecease' => 'dateDecease',
        'smoker' => 'smoker',
        'smokerSince' => 'smokerSince',
        'civilStatus' => 'civilStatus',
        'civilStatusSince' => 'civilStatusSince',
        'hin' => 'hin',
        'advisor' => 'advisor',
        'sponsor' => 'sponsor',
        'managers' => 'managers',
        'jobs' => 'jobs',
        'generalInsurances' => 'generalInsurances',
        'passport' => 'passport',
        'passportExpiration' => 'passportExpiration',
        'drivingLicense' => 'drivingLicense',
        'drivingLicenseExpiration' => 'drivingLicenseExpiration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dateDecease' => 'setDateDecease',
        'smoker' => 'setSmoker',
        'smokerSince' => 'setSmokerSince',
        'civilStatus' => 'setCivilStatus',
        'civilStatusSince' => 'setCivilStatusSince',
        'hin' => 'setHin',
        'advisor' => 'setAdvisor',
        'sponsor' => 'setSponsor',
        'managers' => 'setManagers',
        'jobs' => 'setJobs',
        'generalInsurances' => 'setGeneralInsurances',
        'passport' => 'setPassport',
        'passportExpiration' => 'setPassportExpiration',
        'drivingLicense' => 'setDrivingLicense',
        'drivingLicenseExpiration' => 'setDrivingLicenseExpiration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dateDecease' => 'getDateDecease',
        'smoker' => 'getSmoker',
        'smokerSince' => 'getSmokerSince',
        'civilStatus' => 'getCivilStatus',
        'civilStatusSince' => 'getCivilStatusSince',
        'hin' => 'getHin',
        'advisor' => 'getAdvisor',
        'sponsor' => 'getSponsor',
        'managers' => 'getManagers',
        'jobs' => 'getJobs',
        'generalInsurances' => 'getGeneralInsurances',
        'passport' => 'getPassport',
        'passportExpiration' => 'getPassportExpiration',
        'drivingLicense' => 'getDrivingLicense',
        'drivingLicenseExpiration' => 'getDrivingLicenseExpiration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SMOKER_FALSE = 'false';
    public const SMOKER_TRUE = 'true';
    public const SMOKER_EMPTY = '';
    public const SMOKER_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmokerAllowableValues()
    {
        return [
            self::SMOKER_FALSE,
            self::SMOKER_TRUE,
            self::SMOKER_EMPTY,
            self::SMOKER_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dateDecease'] = $data['dateDecease'] ?? null;
        $this->container['smoker'] = $data['smoker'] ?? null;
        $this->container['smokerSince'] = $data['smokerSince'] ?? null;
        $this->container['civilStatus'] = $data['civilStatus'] ?? null;
        $this->container['civilStatusSince'] = $data['civilStatusSince'] ?? null;
        $this->container['hin'] = $data['hin'] ?? null;
        $this->container['advisor'] = $data['advisor'] ?? null;
        $this->container['sponsor'] = $data['sponsor'] ?? null;
        $this->container['managers'] = $data['managers'] ?? null;
        $this->container['jobs'] = $data['jobs'] ?? null;
        $this->container['generalInsurances'] = $data['generalInsurances'] ?? null;
        $this->container['passport'] = $data['passport'] ?? null;
        $this->container['passportExpiration'] = $data['passportExpiration'] ?? null;
        $this->container['drivingLicense'] = $data['drivingLicense'] ?? null;
        $this->container['drivingLicenseExpiration'] = $data['drivingLicenseExpiration'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSmokerAllowableValues();
        if (!is_null($this->container['smoker']) && !in_array($this->container['smoker'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'smoker', must be one of '%s'",
                $this->container['smoker'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dateDecease
     *
     * @return string|null
     */
    public function getDateDecease()
    {
        return $this->container['dateDecease'];
    }

    /**
     * Sets dateDecease
     *
     * @param string|null $dateDecease Decease date for this contact. If the contact is alive, this value should be \"\".
     *
     * @return self
     */
    public function setDateDecease($dateDecease)
    {
        $this->container['dateDecease'] = $dateDecease;

        return $this;
    }

    /**
     * Gets smoker
     *
     * @return string|null
     */
    public function getSmoker()
    {
        return $this->container['smoker'];
    }

    /**
     * Sets smoker
     *
     * @param string|null $smoker Smoker status.
     *
     * @return self
     */
    public function setSmoker($smoker)
    {
        $allowedValues = $this->getSmokerAllowableValues();
        if (!is_null($smoker) && !in_array($smoker, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'smoker', must be one of '%s'",
                    $smoker,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['smoker'] = $smoker;

        return $this;
    }

    /**
     * Gets smokerSince
     *
     * @return string|null
     */
    public function getSmokerSince()
    {
        return $this->container['smokerSince'];
    }

    /**
     * Sets smokerSince
     *
     * @param string|null $smokerSince Date the contact started/stopped smoking.
     *
     * @return self
     */
    public function setSmokerSince($smokerSince)
    {
        $this->container['smokerSince'] = $smokerSince;

        return $this;
    }

    /**
     * Gets civilStatus
     *
     * @return string|null
     */
    public function getCivilStatus()
    {
        return $this->container['civilStatus'];
    }

    /**
     * Sets civilStatus
     *
     * @param string|null $civilStatus Civil status.
     *
     * @return self
     */
    public function setCivilStatus($civilStatus)
    {
        $this->container['civilStatus'] = $civilStatus;

        return $this;
    }

    /**
     * Gets civilStatusSince
     *
     * @return string|null
     */
    public function getCivilStatusSince()
    {
        return $this->container['civilStatusSince'];
    }

    /**
     * Sets civilStatusSince
     *
     * @param string|null $civilStatusSince Date since civil status.
     *
     * @return self
     */
    public function setCivilStatusSince($civilStatusSince)
    {
        $this->container['civilStatusSince'] = $civilStatusSince;

        return $this;
    }

    /**
     * Gets hin
     *
     * @return string|null
     */
    public function getHin()
    {
        return $this->container['hin'];
    }

    /**
     * Sets hin
     *
     * @param string|null $hin Health Insurance Number.
     *
     * @return self
     */
    public function setHin($hin)
    {
        $this->container['hin'] = $hin;

        return $this;
    }

    /**
     * Gets advisor
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyUser|null
     */
    public function getAdvisor()
    {
        return $this->container['advisor'];
    }

    /**
     * Sets advisor
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyUser|null $advisor advisor
     *
     * @return self
     */
    public function setAdvisor($advisor)
    {
        $this->container['advisor'] = $advisor;

        return $this;
    }

    /**
     * Gets sponsor
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyUser|null
     */
    public function getSponsor()
    {
        return $this->container['sponsor'];
    }

    /**
     * Sets sponsor
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyUser|null $sponsor sponsor
     *
     * @return self
     */
    public function setSponsor($sponsor)
    {
        $this->container['sponsor'] = $sponsor;

        return $this;
    }

    /**
     * Gets managers
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyUser[]|null
     */
    public function getManagers()
    {
        return $this->container['managers'];
    }

    /**
     * Sets managers
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyUser[]|null $managers Manager Users.
     *
     * @return self
     */
    public function setManagers($managers)
    {
        $this->container['managers'] = $managers;

        return $this;
    }

    /**
     * Gets jobs
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\KronosFinanceJob[]|null
     */
    public function getJobs()
    {
        return $this->container['jobs'];
    }

    /**
     * Sets jobs
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\KronosFinanceJob[]|null $jobs List of jobs.
     *
     * @return self
     */
    public function setJobs($jobs)
    {
        $this->container['jobs'] = $jobs;

        return $this;
    }

    /**
     * Gets generalInsurances
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\KronosFinanceGeneralInsurance[]|null
     */
    public function getGeneralInsurances()
    {
        return $this->container['generalInsurances'];
    }

    /**
     * Sets generalInsurances
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\KronosFinanceGeneralInsurance[]|null $generalInsurances General insurance (Property and casuality).
     *
     * @return self
     */
    public function setGeneralInsurances($generalInsurances)
    {
        $this->container['generalInsurances'] = $generalInsurances;

        return $this;
    }

    /**
     * Gets passport
     *
     * @return string|null
     */
    public function getPassport()
    {
        return $this->container['passport'];
    }

    /**
     * Sets passport
     *
     * @param string|null $passport Passport.
     *
     * @return self
     */
    public function setPassport($passport)
    {
        $this->container['passport'] = $passport;

        return $this;
    }

    /**
     * Gets passportExpiration
     *
     * @return string|null
     */
    public function getPassportExpiration()
    {
        return $this->container['passportExpiration'];
    }

    /**
     * Sets passportExpiration
     *
     * @param string|null $passportExpiration Passport expiration.
     *
     * @return self
     */
    public function setPassportExpiration($passportExpiration)
    {
        $this->container['passportExpiration'] = $passportExpiration;

        return $this;
    }

    /**
     * Gets drivingLicense
     *
     * @return string|null
     */
    public function getDrivingLicense()
    {
        return $this->container['drivingLicense'];
    }

    /**
     * Sets drivingLicense
     *
     * @param string|null $drivingLicense Driving license.
     *
     * @return self
     */
    public function setDrivingLicense($drivingLicense)
    {
        $this->container['drivingLicense'] = $drivingLicense;

        return $this;
    }

    /**
     * Gets drivingLicenseExpiration
     *
     * @return string|null
     */
    public function getDrivingLicenseExpiration()
    {
        return $this->container['drivingLicenseExpiration'];
    }

    /**
     * Sets drivingLicenseExpiration
     *
     * @param string|null $drivingLicenseExpiration Driving license expiration.
     *
     * @return self
     */
    public function setDrivingLicenseExpiration($drivingLicenseExpiration)
    {
        $this->container['drivingLicenseExpiration'] = $drivingLicenseExpiration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


