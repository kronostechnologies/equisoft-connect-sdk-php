<?php
/**
 * InternalNotesNote
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * InternalNotesNote Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InternalNotesNote implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'internalNotes.Note';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'author' => '\Equisoft\SDK\EquisoftConnect\Model\InternalNotesAuthor',
        'firstRevisionCreatedAt' => '\DateTime',
        'accessRights' => '\Equisoft\SDK\EquisoftConnect\Model\AccessRights',
        'currentRevision' => '\Equisoft\SDK\EquisoftConnect\Model\InternalNotesNoteRevision',
        'previousRevisions' => '\Equisoft\SDK\EquisoftConnect\Model\InternalNotesNoteRevision[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'author' => null,
        'firstRevisionCreatedAt' => 'date-time',
        'accessRights' => null,
        'currentRevision' => null,
        'previousRevisions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'author' => 'author',
        'firstRevisionCreatedAt' => 'firstRevisionCreatedAt',
        'accessRights' => 'accessRights',
        'currentRevision' => 'currentRevision',
        'previousRevisions' => 'previousRevisions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'author' => 'setAuthor',
        'firstRevisionCreatedAt' => 'setFirstRevisionCreatedAt',
        'accessRights' => 'setAccessRights',
        'currentRevision' => 'setCurrentRevision',
        'previousRevisions' => 'setPreviousRevisions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'author' => 'getAuthor',
        'firstRevisionCreatedAt' => 'getFirstRevisionCreatedAt',
        'accessRights' => 'getAccessRights',
        'currentRevision' => 'getCurrentRevision',
        'previousRevisions' => 'getPreviousRevisions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['firstRevisionCreatedAt'] = isset($data['firstRevisionCreatedAt']) ? $data['firstRevisionCreatedAt'] : null;
        $this->container['accessRights'] = isset($data['accessRights']) ? $data['accessRights'] : null;
        $this->container['currentRevision'] = isset($data['currentRevision']) ? $data['currentRevision'] : null;
        $this->container['previousRevisions'] = isset($data['previousRevisions']) ? $data['previousRevisions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['author'] === null) {
            $invalidProperties[] = "'author' can't be null";
        }
        if ($this->container['firstRevisionCreatedAt'] === null) {
            $invalidProperties[] = "'firstRevisionCreatedAt' can't be null";
        }
        if ($this->container['accessRights'] === null) {
            $invalidProperties[] = "'accessRights' can't be null";
        }
        if ($this->container['currentRevision'] === null) {
            $invalidProperties[] = "'currentRevision' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Unique numerical identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets author
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\InternalNotesAuthor
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\InternalNotesAuthor $author author
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets firstRevisionCreatedAt
     *
     * @return \DateTime
     */
    public function getFirstRevisionCreatedAt()
    {
        return $this->container['firstRevisionCreatedAt'];
    }

    /**
     * Sets firstRevisionCreatedAt
     *
     * @param \DateTime $firstRevisionCreatedAt firstRevisionCreatedAt
     *
     * @return $this
     */
    public function setFirstRevisionCreatedAt($firstRevisionCreatedAt)
    {
        $this->container['firstRevisionCreatedAt'] = $firstRevisionCreatedAt;

        return $this;
    }

    /**
     * Gets accessRights
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\AccessRights
     */
    public function getAccessRights()
    {
        return $this->container['accessRights'];
    }

    /**
     * Sets accessRights
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\AccessRights $accessRights accessRights
     *
     * @return $this
     */
    public function setAccessRights($accessRights)
    {
        $this->container['accessRights'] = $accessRights;

        return $this;
    }

    /**
     * Gets currentRevision
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\InternalNotesNoteRevision
     */
    public function getCurrentRevision()
    {
        return $this->container['currentRevision'];
    }

    /**
     * Sets currentRevision
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\InternalNotesNoteRevision $currentRevision currentRevision
     *
     * @return $this
     */
    public function setCurrentRevision($currentRevision)
    {
        $this->container['currentRevision'] = $currentRevision;

        return $this;
    }

    /**
     * Gets previousRevisions
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\InternalNotesNoteRevision[]|null
     */
    public function getPreviousRevisions()
    {
        return $this->container['previousRevisions'];
    }

    /**
     * Sets previousRevisions
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\InternalNotesNoteRevision[]|null $previousRevisions previousRevisions
     *
     * @return $this
     */
    public function setPreviousRevisions($previousRevisions)
    {
        $this->container['previousRevisions'] = $previousRevisions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


