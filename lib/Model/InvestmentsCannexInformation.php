<?php
/**
 * InvestmentsCannexInformation
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-equisoft1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * InvestmentsCannexInformation Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvestmentsCannexInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'investments.CannexInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'currency' => 'string',
        'loadType' => 'string',
        'rrspRrifEligible' => 'string',
        'priceType' => 'string',
        'portfolioFund' => 'bool',
        'restrictedSale' => 'string',
        'valuationFrequency' => 'string',
        'valuationDay' => 'string',
        'loadsDifferInPrice' => 'bool',
        'netFees' => 'string',
        'regionsAvailableForSale' => 'string',
        'dscLoadType' => 'string',
        'accrualsAccumulation' => 'string',
        'fiscalYearEnd' => 'string',
        'fiscalYearEndPeriod' => 'string',
        'totalAssetsType' => 'string',
        'minimumInitialAmount' => 'int',
        'minimumSubsequentAmount' => 'int',
        'minimumRRSPInitialAmount' => 'int',
        'minimumRRSPSubsequentAmount' => 'int',
        'distributionPayout' => 'bool',
        'distributions' => '\Equisoft\SDK\EquisoftConnect\Model\InvestmentsCannexDistribution[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'currency' => null,
        'loadType' => null,
        'rrspRrifEligible' => null,
        'priceType' => null,
        'portfolioFund' => null,
        'restrictedSale' => null,
        'valuationFrequency' => null,
        'valuationDay' => null,
        'loadsDifferInPrice' => null,
        'netFees' => null,
        'regionsAvailableForSale' => null,
        'dscLoadType' => null,
        'accrualsAccumulation' => null,
        'fiscalYearEnd' => null,
        'fiscalYearEndPeriod' => null,
        'totalAssetsType' => null,
        'minimumInitialAmount' => null,
        'minimumSubsequentAmount' => null,
        'minimumRRSPInitialAmount' => null,
        'minimumRRSPSubsequentAmount' => null,
        'distributionPayout' => null,
        'distributions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'currency' => false,
        'loadType' => false,
        'rrspRrifEligible' => false,
        'priceType' => false,
        'portfolioFund' => false,
        'restrictedSale' => false,
        'valuationFrequency' => false,
        'valuationDay' => false,
        'loadsDifferInPrice' => false,
        'netFees' => false,
        'regionsAvailableForSale' => false,
        'dscLoadType' => false,
        'accrualsAccumulation' => false,
        'fiscalYearEnd' => false,
        'fiscalYearEndPeriod' => false,
        'totalAssetsType' => false,
        'minimumInitialAmount' => false,
        'minimumSubsequentAmount' => false,
        'minimumRRSPInitialAmount' => false,
        'minimumRRSPSubsequentAmount' => false,
        'distributionPayout' => false,
        'distributions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency' => 'currency',
        'loadType' => 'loadType',
        'rrspRrifEligible' => 'rrspRrifEligible',
        'priceType' => 'priceType',
        'portfolioFund' => 'portfolioFund',
        'restrictedSale' => 'restrictedSale',
        'valuationFrequency' => 'valuationFrequency',
        'valuationDay' => 'valuationDay',
        'loadsDifferInPrice' => 'loadsDifferInPrice',
        'netFees' => 'netFees',
        'regionsAvailableForSale' => 'regionsAvailableForSale',
        'dscLoadType' => 'dscLoadType',
        'accrualsAccumulation' => 'accrualsAccumulation',
        'fiscalYearEnd' => 'fiscalYearEnd',
        'fiscalYearEndPeriod' => 'fiscalYearEndPeriod',
        'totalAssetsType' => 'totalAssetsType',
        'minimumInitialAmount' => 'minimumInitialAmount',
        'minimumSubsequentAmount' => 'minimumSubsequentAmount',
        'minimumRRSPInitialAmount' => 'minimumRRSPInitialAmount',
        'minimumRRSPSubsequentAmount' => 'minimumRRSPSubsequentAmount',
        'distributionPayout' => 'distributionPayout',
        'distributions' => 'distributions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency' => 'setCurrency',
        'loadType' => 'setLoadType',
        'rrspRrifEligible' => 'setRrspRrifEligible',
        'priceType' => 'setPriceType',
        'portfolioFund' => 'setPortfolioFund',
        'restrictedSale' => 'setRestrictedSale',
        'valuationFrequency' => 'setValuationFrequency',
        'valuationDay' => 'setValuationDay',
        'loadsDifferInPrice' => 'setLoadsDifferInPrice',
        'netFees' => 'setNetFees',
        'regionsAvailableForSale' => 'setRegionsAvailableForSale',
        'dscLoadType' => 'setDscLoadType',
        'accrualsAccumulation' => 'setAccrualsAccumulation',
        'fiscalYearEnd' => 'setFiscalYearEnd',
        'fiscalYearEndPeriod' => 'setFiscalYearEndPeriod',
        'totalAssetsType' => 'setTotalAssetsType',
        'minimumInitialAmount' => 'setMinimumInitialAmount',
        'minimumSubsequentAmount' => 'setMinimumSubsequentAmount',
        'minimumRRSPInitialAmount' => 'setMinimumRRSPInitialAmount',
        'minimumRRSPSubsequentAmount' => 'setMinimumRRSPSubsequentAmount',
        'distributionPayout' => 'setDistributionPayout',
        'distributions' => 'setDistributions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency' => 'getCurrency',
        'loadType' => 'getLoadType',
        'rrspRrifEligible' => 'getRrspRrifEligible',
        'priceType' => 'getPriceType',
        'portfolioFund' => 'getPortfolioFund',
        'restrictedSale' => 'getRestrictedSale',
        'valuationFrequency' => 'getValuationFrequency',
        'valuationDay' => 'getValuationDay',
        'loadsDifferInPrice' => 'getLoadsDifferInPrice',
        'netFees' => 'getNetFees',
        'regionsAvailableForSale' => 'getRegionsAvailableForSale',
        'dscLoadType' => 'getDscLoadType',
        'accrualsAccumulation' => 'getAccrualsAccumulation',
        'fiscalYearEnd' => 'getFiscalYearEnd',
        'fiscalYearEndPeriod' => 'getFiscalYearEndPeriod',
        'totalAssetsType' => 'getTotalAssetsType',
        'minimumInitialAmount' => 'getMinimumInitialAmount',
        'minimumSubsequentAmount' => 'getMinimumSubsequentAmount',
        'minimumRRSPInitialAmount' => 'getMinimumRRSPInitialAmount',
        'minimumRRSPSubsequentAmount' => 'getMinimumRRSPSubsequentAmount',
        'distributionPayout' => 'getDistributionPayout',
        'distributions' => 'getDistributions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('loadType', $data ?? [], null);
        $this->setIfExists('rrspRrifEligible', $data ?? [], null);
        $this->setIfExists('priceType', $data ?? [], null);
        $this->setIfExists('portfolioFund', $data ?? [], null);
        $this->setIfExists('restrictedSale', $data ?? [], null);
        $this->setIfExists('valuationFrequency', $data ?? [], null);
        $this->setIfExists('valuationDay', $data ?? [], null);
        $this->setIfExists('loadsDifferInPrice', $data ?? [], null);
        $this->setIfExists('netFees', $data ?? [], null);
        $this->setIfExists('regionsAvailableForSale', $data ?? [], null);
        $this->setIfExists('dscLoadType', $data ?? [], null);
        $this->setIfExists('accrualsAccumulation', $data ?? [], null);
        $this->setIfExists('fiscalYearEnd', $data ?? [], null);
        $this->setIfExists('fiscalYearEndPeriod', $data ?? [], null);
        $this->setIfExists('totalAssetsType', $data ?? [], null);
        $this->setIfExists('minimumInitialAmount', $data ?? [], null);
        $this->setIfExists('minimumSubsequentAmount', $data ?? [], null);
        $this->setIfExists('minimumRRSPInitialAmount', $data ?? [], null);
        $this->setIfExists('minimumRRSPSubsequentAmount', $data ?? [], null);
        $this->setIfExists('distributionPayout', $data ?? [], null);
        $this->setIfExists('distributions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets loadType
     *
     * @return string|null
     */
    public function getLoadType()
    {
        return $this->container['loadType'];
    }

    /**
     * Sets loadType
     *
     * @param string|null $loadType loadType
     *
     * @return self
     */
    public function setLoadType($loadType)
    {
        if (is_null($loadType)) {
            throw new \InvalidArgumentException('non-nullable loadType cannot be null');
        }
        $this->container['loadType'] = $loadType;

        return $this;
    }

    /**
     * Gets rrspRrifEligible
     *
     * @return string|null
     */
    public function getRrspRrifEligible()
    {
        return $this->container['rrspRrifEligible'];
    }

    /**
     * Sets rrspRrifEligible
     *
     * @param string|null $rrspRrifEligible rrspRrifEligible
     *
     * @return self
     */
    public function setRrspRrifEligible($rrspRrifEligible)
    {
        if (is_null($rrspRrifEligible)) {
            throw new \InvalidArgumentException('non-nullable rrspRrifEligible cannot be null');
        }
        $this->container['rrspRrifEligible'] = $rrspRrifEligible;

        return $this;
    }

    /**
     * Gets priceType
     *
     * @return string|null
     */
    public function getPriceType()
    {
        return $this->container['priceType'];
    }

    /**
     * Sets priceType
     *
     * @param string|null $priceType priceType
     *
     * @return self
     */
    public function setPriceType($priceType)
    {
        if (is_null($priceType)) {
            throw new \InvalidArgumentException('non-nullable priceType cannot be null');
        }
        $this->container['priceType'] = $priceType;

        return $this;
    }

    /**
     * Gets portfolioFund
     *
     * @return bool|null
     */
    public function getPortfolioFund()
    {
        return $this->container['portfolioFund'];
    }

    /**
     * Sets portfolioFund
     *
     * @param bool|null $portfolioFund portfolioFund
     *
     * @return self
     */
    public function setPortfolioFund($portfolioFund)
    {
        if (is_null($portfolioFund)) {
            throw new \InvalidArgumentException('non-nullable portfolioFund cannot be null');
        }
        $this->container['portfolioFund'] = $portfolioFund;

        return $this;
    }

    /**
     * Gets restrictedSale
     *
     * @return string|null
     */
    public function getRestrictedSale()
    {
        return $this->container['restrictedSale'];
    }

    /**
     * Sets restrictedSale
     *
     * @param string|null $restrictedSale restrictedSale
     *
     * @return self
     */
    public function setRestrictedSale($restrictedSale)
    {
        if (is_null($restrictedSale)) {
            throw new \InvalidArgumentException('non-nullable restrictedSale cannot be null');
        }
        $this->container['restrictedSale'] = $restrictedSale;

        return $this;
    }

    /**
     * Gets valuationFrequency
     *
     * @return string|null
     */
    public function getValuationFrequency()
    {
        return $this->container['valuationFrequency'];
    }

    /**
     * Sets valuationFrequency
     *
     * @param string|null $valuationFrequency valuationFrequency
     *
     * @return self
     */
    public function setValuationFrequency($valuationFrequency)
    {
        if (is_null($valuationFrequency)) {
            throw new \InvalidArgumentException('non-nullable valuationFrequency cannot be null');
        }
        $this->container['valuationFrequency'] = $valuationFrequency;

        return $this;
    }

    /**
     * Gets valuationDay
     *
     * @return string|null
     */
    public function getValuationDay()
    {
        return $this->container['valuationDay'];
    }

    /**
     * Sets valuationDay
     *
     * @param string|null $valuationDay valuationDay
     *
     * @return self
     */
    public function setValuationDay($valuationDay)
    {
        if (is_null($valuationDay)) {
            throw new \InvalidArgumentException('non-nullable valuationDay cannot be null');
        }
        $this->container['valuationDay'] = $valuationDay;

        return $this;
    }

    /**
     * Gets loadsDifferInPrice
     *
     * @return bool|null
     */
    public function getLoadsDifferInPrice()
    {
        return $this->container['loadsDifferInPrice'];
    }

    /**
     * Sets loadsDifferInPrice
     *
     * @param bool|null $loadsDifferInPrice loadsDifferInPrice
     *
     * @return self
     */
    public function setLoadsDifferInPrice($loadsDifferInPrice)
    {
        if (is_null($loadsDifferInPrice)) {
            throw new \InvalidArgumentException('non-nullable loadsDifferInPrice cannot be null');
        }
        $this->container['loadsDifferInPrice'] = $loadsDifferInPrice;

        return $this;
    }

    /**
     * Gets netFees
     *
     * @return string|null
     */
    public function getNetFees()
    {
        return $this->container['netFees'];
    }

    /**
     * Sets netFees
     *
     * @param string|null $netFees netFees
     *
     * @return self
     */
    public function setNetFees($netFees)
    {
        if (is_null($netFees)) {
            throw new \InvalidArgumentException('non-nullable netFees cannot be null');
        }
        $this->container['netFees'] = $netFees;

        return $this;
    }

    /**
     * Gets regionsAvailableForSale
     *
     * @return string|null
     */
    public function getRegionsAvailableForSale()
    {
        return $this->container['regionsAvailableForSale'];
    }

    /**
     * Sets regionsAvailableForSale
     *
     * @param string|null $regionsAvailableForSale regionsAvailableForSale
     *
     * @return self
     */
    public function setRegionsAvailableForSale($regionsAvailableForSale)
    {
        if (is_null($regionsAvailableForSale)) {
            throw new \InvalidArgumentException('non-nullable regionsAvailableForSale cannot be null');
        }
        $this->container['regionsAvailableForSale'] = $regionsAvailableForSale;

        return $this;
    }

    /**
     * Gets dscLoadType
     *
     * @return string|null
     */
    public function getDscLoadType()
    {
        return $this->container['dscLoadType'];
    }

    /**
     * Sets dscLoadType
     *
     * @param string|null $dscLoadType dscLoadType
     *
     * @return self
     */
    public function setDscLoadType($dscLoadType)
    {
        if (is_null($dscLoadType)) {
            throw new \InvalidArgumentException('non-nullable dscLoadType cannot be null');
        }
        $this->container['dscLoadType'] = $dscLoadType;

        return $this;
    }

    /**
     * Gets accrualsAccumulation
     *
     * @return string|null
     */
    public function getAccrualsAccumulation()
    {
        return $this->container['accrualsAccumulation'];
    }

    /**
     * Sets accrualsAccumulation
     *
     * @param string|null $accrualsAccumulation accrualsAccumulation
     *
     * @return self
     */
    public function setAccrualsAccumulation($accrualsAccumulation)
    {
        if (is_null($accrualsAccumulation)) {
            throw new \InvalidArgumentException('non-nullable accrualsAccumulation cannot be null');
        }
        $this->container['accrualsAccumulation'] = $accrualsAccumulation;

        return $this;
    }

    /**
     * Gets fiscalYearEnd
     *
     * @return string|null
     */
    public function getFiscalYearEnd()
    {
        return $this->container['fiscalYearEnd'];
    }

    /**
     * Sets fiscalYearEnd
     *
     * @param string|null $fiscalYearEnd fiscalYearEnd
     *
     * @return self
     */
    public function setFiscalYearEnd($fiscalYearEnd)
    {
        if (is_null($fiscalYearEnd)) {
            throw new \InvalidArgumentException('non-nullable fiscalYearEnd cannot be null');
        }
        $this->container['fiscalYearEnd'] = $fiscalYearEnd;

        return $this;
    }

    /**
     * Gets fiscalYearEndPeriod
     *
     * @return string|null
     */
    public function getFiscalYearEndPeriod()
    {
        return $this->container['fiscalYearEndPeriod'];
    }

    /**
     * Sets fiscalYearEndPeriod
     *
     * @param string|null $fiscalYearEndPeriod fiscalYearEndPeriod
     *
     * @return self
     */
    public function setFiscalYearEndPeriod($fiscalYearEndPeriod)
    {
        if (is_null($fiscalYearEndPeriod)) {
            throw new \InvalidArgumentException('non-nullable fiscalYearEndPeriod cannot be null');
        }
        $this->container['fiscalYearEndPeriod'] = $fiscalYearEndPeriod;

        return $this;
    }

    /**
     * Gets totalAssetsType
     *
     * @return string|null
     */
    public function getTotalAssetsType()
    {
        return $this->container['totalAssetsType'];
    }

    /**
     * Sets totalAssetsType
     *
     * @param string|null $totalAssetsType totalAssetsType
     *
     * @return self
     */
    public function setTotalAssetsType($totalAssetsType)
    {
        if (is_null($totalAssetsType)) {
            throw new \InvalidArgumentException('non-nullable totalAssetsType cannot be null');
        }
        $this->container['totalAssetsType'] = $totalAssetsType;

        return $this;
    }

    /**
     * Gets minimumInitialAmount
     *
     * @return int|null
     */
    public function getMinimumInitialAmount()
    {
        return $this->container['minimumInitialAmount'];
    }

    /**
     * Sets minimumInitialAmount
     *
     * @param int|null $minimumInitialAmount minimumInitialAmount
     *
     * @return self
     */
    public function setMinimumInitialAmount($minimumInitialAmount)
    {
        if (is_null($minimumInitialAmount)) {
            throw new \InvalidArgumentException('non-nullable minimumInitialAmount cannot be null');
        }
        $this->container['minimumInitialAmount'] = $minimumInitialAmount;

        return $this;
    }

    /**
     * Gets minimumSubsequentAmount
     *
     * @return int|null
     */
    public function getMinimumSubsequentAmount()
    {
        return $this->container['minimumSubsequentAmount'];
    }

    /**
     * Sets minimumSubsequentAmount
     *
     * @param int|null $minimumSubsequentAmount minimumSubsequentAmount
     *
     * @return self
     */
    public function setMinimumSubsequentAmount($minimumSubsequentAmount)
    {
        if (is_null($minimumSubsequentAmount)) {
            throw new \InvalidArgumentException('non-nullable minimumSubsequentAmount cannot be null');
        }
        $this->container['minimumSubsequentAmount'] = $minimumSubsequentAmount;

        return $this;
    }

    /**
     * Gets minimumRRSPInitialAmount
     *
     * @return int|null
     */
    public function getMinimumRRSPInitialAmount()
    {
        return $this->container['minimumRRSPInitialAmount'];
    }

    /**
     * Sets minimumRRSPInitialAmount
     *
     * @param int|null $minimumRRSPInitialAmount minimumRRSPInitialAmount
     *
     * @return self
     */
    public function setMinimumRRSPInitialAmount($minimumRRSPInitialAmount)
    {
        if (is_null($minimumRRSPInitialAmount)) {
            throw new \InvalidArgumentException('non-nullable minimumRRSPInitialAmount cannot be null');
        }
        $this->container['minimumRRSPInitialAmount'] = $minimumRRSPInitialAmount;

        return $this;
    }

    /**
     * Gets minimumRRSPSubsequentAmount
     *
     * @return int|null
     */
    public function getMinimumRRSPSubsequentAmount()
    {
        return $this->container['minimumRRSPSubsequentAmount'];
    }

    /**
     * Sets minimumRRSPSubsequentAmount
     *
     * @param int|null $minimumRRSPSubsequentAmount minimumRRSPSubsequentAmount
     *
     * @return self
     */
    public function setMinimumRRSPSubsequentAmount($minimumRRSPSubsequentAmount)
    {
        if (is_null($minimumRRSPSubsequentAmount)) {
            throw new \InvalidArgumentException('non-nullable minimumRRSPSubsequentAmount cannot be null');
        }
        $this->container['minimumRRSPSubsequentAmount'] = $minimumRRSPSubsequentAmount;

        return $this;
    }

    /**
     * Gets distributionPayout
     *
     * @return bool|null
     */
    public function getDistributionPayout()
    {
        return $this->container['distributionPayout'];
    }

    /**
     * Sets distributionPayout
     *
     * @param bool|null $distributionPayout distributionPayout
     *
     * @return self
     */
    public function setDistributionPayout($distributionPayout)
    {
        if (is_null($distributionPayout)) {
            throw new \InvalidArgumentException('non-nullable distributionPayout cannot be null');
        }
        $this->container['distributionPayout'] = $distributionPayout;

        return $this;
    }

    /**
     * Gets distributions
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\InvestmentsCannexDistribution[]|null
     */
    public function getDistributions()
    {
        return $this->container['distributions'];
    }

    /**
     * Sets distributions
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\InvestmentsCannexDistribution[]|null $distributions distributions
     *
     * @return self
     */
    public function setDistributions($distributions)
    {
        if (is_null($distributions)) {
            throw new \InvalidArgumentException('non-nullable distributions cannot be null');
        }
        $this->container['distributions'] = $distributions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


