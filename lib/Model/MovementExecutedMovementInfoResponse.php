<?php
/**
 * MovementExecutedMovementInfoResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0-equisoft1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * MovementExecutedMovementInfoResponse Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MovementExecutedMovementInfoResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'movement.ExecutedMovementInfoResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'srcDbName' => 'string',
        'srcDbUuid' => 'string',
        'dstDbName' => 'string',
        'dstDbUuid' => 'string',
        'movementType' => 'string',
        'webusers' => '\Equisoft\SDK\EquisoftConnect\Model\MovementUserMap[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'srcDbName' => null,
        'srcDbUuid' => null,
        'dstDbName' => null,
        'dstDbUuid' => null,
        'movementType' => null,
        'webusers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'srcDbName' => false,
        'srcDbUuid' => false,
        'dstDbName' => false,
        'dstDbUuid' => false,
        'movementType' => false,
        'webusers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'srcDbName' => 'srcDbName',
        'srcDbUuid' => 'srcDbUuid',
        'dstDbName' => 'dstDbName',
        'dstDbUuid' => 'dstDbUuid',
        'movementType' => 'movementType',
        'webusers' => 'webusers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'srcDbName' => 'setSrcDbName',
        'srcDbUuid' => 'setSrcDbUuid',
        'dstDbName' => 'setDstDbName',
        'dstDbUuid' => 'setDstDbUuid',
        'movementType' => 'setMovementType',
        'webusers' => 'setWebusers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'srcDbName' => 'getSrcDbName',
        'srcDbUuid' => 'getSrcDbUuid',
        'dstDbName' => 'getDstDbName',
        'dstDbUuid' => 'getDstDbUuid',
        'movementType' => 'getMovementType',
        'webusers' => 'getWebusers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MOVEMENT_TYPE_MOVE = 'move';
    public const MOVEMENT_TYPE_COPY = 'copy';
    public const MOVEMENT_TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMovementTypeAllowableValues()
    {
        return [
            self::MOVEMENT_TYPE_MOVE,
            self::MOVEMENT_TYPE_COPY,
            self::MOVEMENT_TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('srcDbName', $data ?? [], null);
        $this->setIfExists('srcDbUuid', $data ?? [], null);
        $this->setIfExists('dstDbName', $data ?? [], null);
        $this->setIfExists('dstDbUuid', $data ?? [], null);
        $this->setIfExists('movementType', $data ?? [], null);
        $this->setIfExists('webusers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMovementTypeAllowableValues();
        if (!is_null($this->container['movementType']) && !in_array($this->container['movementType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'movementType', must be one of '%s'",
                $this->container['movementType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets srcDbName
     *
     * @return string|null
     */
    public function getSrcDbName()
    {
        return $this->container['srcDbName'];
    }

    /**
     * Sets srcDbName
     *
     * @param string|null $srcDbName Name of the source database (e.g. kronospf__bedrock).
     *
     * @return self
     */
    public function setSrcDbName($srcDbName)
    {
        if (is_null($srcDbName)) {
            throw new \InvalidArgumentException('non-nullable srcDbName cannot be null');
        }
        $this->container['srcDbName'] = $srcDbName;

        return $this;
    }

    /**
     * Gets srcDbUuid
     *
     * @return string|null
     */
    public function getSrcDbUuid()
    {
        return $this->container['srcDbUuid'];
    }

    /**
     * Sets srcDbUuid
     *
     * @param string|null $srcDbUuid UUID the source database.
     *
     * @return self
     */
    public function setSrcDbUuid($srcDbUuid)
    {
        if (is_null($srcDbUuid)) {
            throw new \InvalidArgumentException('non-nullable srcDbUuid cannot be null');
        }
        $this->container['srcDbUuid'] = $srcDbUuid;

        return $this;
    }

    /**
     * Gets dstDbName
     *
     * @return string|null
     */
    public function getDstDbName()
    {
        return $this->container['dstDbName'];
    }

    /**
     * Sets dstDbName
     *
     * @param string|null $dstDbName Name of the destination database.
     *
     * @return self
     */
    public function setDstDbName($dstDbName)
    {
        if (is_null($dstDbName)) {
            throw new \InvalidArgumentException('non-nullable dstDbName cannot be null');
        }
        $this->container['dstDbName'] = $dstDbName;

        return $this;
    }

    /**
     * Gets dstDbUuid
     *
     * @return string|null
     */
    public function getDstDbUuid()
    {
        return $this->container['dstDbUuid'];
    }

    /**
     * Sets dstDbUuid
     *
     * @param string|null $dstDbUuid UUID the destination database.
     *
     * @return self
     */
    public function setDstDbUuid($dstDbUuid)
    {
        if (is_null($dstDbUuid)) {
            throw new \InvalidArgumentException('non-nullable dstDbUuid cannot be null');
        }
        $this->container['dstDbUuid'] = $dstDbUuid;

        return $this;
    }

    /**
     * Gets movementType
     *
     * @return string|null
     */
    public function getMovementType()
    {
        return $this->container['movementType'];
    }

    /**
     * Sets movementType
     *
     * @param string|null $movementType Type of movement (move, copy)
     *
     * @return self
     */
    public function setMovementType($movementType)
    {
        if (is_null($movementType)) {
            throw new \InvalidArgumentException('non-nullable movementType cannot be null');
        }
        $allowedValues = $this->getMovementTypeAllowableValues();
        if (!in_array($movementType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'movementType', must be one of '%s'",
                    $movementType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['movementType'] = $movementType;

        return $this;
    }

    /**
     * Gets webusers
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\MovementUserMap[]|null
     */
    public function getWebusers()
    {
        return $this->container['webusers'];
    }

    /**
     * Sets webusers
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\MovementUserMap[]|null $webusers Moved webusers
     *
     * @return self
     */
    public function setWebusers($webusers)
    {
        if (is_null($webusers)) {
            throw new \InvalidArgumentException('non-nullable webusers cannot be null');
        }
        $this->container['webusers'] = $webusers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


