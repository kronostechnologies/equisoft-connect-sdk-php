<?php
/**
 * ContactContactAdditionalInformation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * ContactContactAdditionalInformation Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ContactContactAdditionalInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'contact.ContactAdditionalInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'isDeceased' => 'bool',
        'deceasedDate' => '\DateTime',
        'isSmoker' => 'bool',
        'smokerEndDate' => '\DateTime',
        'birthDate' => '\DateTime',
        'facebookLink' => 'string',
        'twitterLink' => 'string',
        'linkedInLink' => 'string',
        'language' => '\Equisoft\SDK\EquisoftConnect\Model\FieldValue',
        'pictureId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'isDeceased' => null,
        'deceasedDate' => 'date',
        'isSmoker' => null,
        'smokerEndDate' => 'date',
        'birthDate' => 'date',
        'facebookLink' => null,
        'twitterLink' => null,
        'linkedInLink' => null,
        'language' => null,
        'pictureId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'isDeceased' => 'isDeceased',
        'deceasedDate' => 'deceasedDate',
        'isSmoker' => 'isSmoker',
        'smokerEndDate' => 'smokerEndDate',
        'birthDate' => 'birthDate',
        'facebookLink' => 'facebookLink',
        'twitterLink' => 'twitterLink',
        'linkedInLink' => 'linkedInLink',
        'language' => 'language',
        'pictureId' => 'pictureId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'isDeceased' => 'setIsDeceased',
        'deceasedDate' => 'setDeceasedDate',
        'isSmoker' => 'setIsSmoker',
        'smokerEndDate' => 'setSmokerEndDate',
        'birthDate' => 'setBirthDate',
        'facebookLink' => 'setFacebookLink',
        'twitterLink' => 'setTwitterLink',
        'linkedInLink' => 'setLinkedInLink',
        'language' => 'setLanguage',
        'pictureId' => 'setPictureId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'isDeceased' => 'getIsDeceased',
        'deceasedDate' => 'getDeceasedDate',
        'isSmoker' => 'getIsSmoker',
        'smokerEndDate' => 'getSmokerEndDate',
        'birthDate' => 'getBirthDate',
        'facebookLink' => 'getFacebookLink',
        'twitterLink' => 'getTwitterLink',
        'linkedInLink' => 'getLinkedInLink',
        'language' => 'getLanguage',
        'pictureId' => 'getPictureId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['isDeceased'] = $data['isDeceased'] ?? null;
        $this->container['deceasedDate'] = $data['deceasedDate'] ?? null;
        $this->container['isSmoker'] = $data['isSmoker'] ?? null;
        $this->container['smokerEndDate'] = $data['smokerEndDate'] ?? null;
        $this->container['birthDate'] = $data['birthDate'] ?? null;
        $this->container['facebookLink'] = $data['facebookLink'] ?? null;
        $this->container['twitterLink'] = $data['twitterLink'] ?? null;
        $this->container['linkedInLink'] = $data['linkedInLink'] ?? null;
        $this->container['language'] = $data['language'] ?? null;
        $this->container['pictureId'] = $data['pictureId'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets isDeceased
     *
     * @return bool|null
     */
    public function getIsDeceased()
    {
        return $this->container['isDeceased'];
    }

    /**
     * Sets isDeceased
     *
     * @param bool|null $isDeceased Is the contact deceased
     *
     * @return self
     */
    public function setIsDeceased($isDeceased)
    {
        $this->container['isDeceased'] = $isDeceased;

        return $this;
    }

    /**
     * Gets deceasedDate
     *
     * @return \DateTime|null
     */
    public function getDeceasedDate()
    {
        return $this->container['deceasedDate'];
    }

    /**
     * Sets deceasedDate
     *
     * @param \DateTime|null $deceasedDate Deceased date
     *
     * @return self
     */
    public function setDeceasedDate($deceasedDate)
    {
        $this->container['deceasedDate'] = $deceasedDate;

        return $this;
    }

    /**
     * Gets isSmoker
     *
     * @return bool|null
     */
    public function getIsSmoker()
    {
        return $this->container['isSmoker'];
    }

    /**
     * Sets isSmoker
     *
     * @param bool|null $isSmoker Is the contact a smoker
     *
     * @return self
     */
    public function setIsSmoker($isSmoker)
    {
        $this->container['isSmoker'] = $isSmoker;

        return $this;
    }

    /**
     * Gets smokerEndDate
     *
     * @return \DateTime|null
     */
    public function getSmokerEndDate()
    {
        return $this->container['smokerEndDate'];
    }

    /**
     * Sets smokerEndDate
     *
     * @param \DateTime|null $smokerEndDate Smoker end date
     *
     * @return self
     */
    public function setSmokerEndDate($smokerEndDate)
    {
        $this->container['smokerEndDate'] = $smokerEndDate;

        return $this;
    }

    /**
     * Gets birthDate
     *
     * @return \DateTime|null
     */
    public function getBirthDate()
    {
        return $this->container['birthDate'];
    }

    /**
     * Sets birthDate
     *
     * @param \DateTime|null $birthDate Birthdate
     *
     * @return self
     */
    public function setBirthDate($birthDate)
    {
        $this->container['birthDate'] = $birthDate;

        return $this;
    }

    /**
     * Gets facebookLink
     *
     * @return string|null
     */
    public function getFacebookLink()
    {
        return $this->container['facebookLink'];
    }

    /**
     * Sets facebookLink
     *
     * @param string|null $facebookLink Facebook link
     *
     * @return self
     */
    public function setFacebookLink($facebookLink)
    {
        $this->container['facebookLink'] = $facebookLink;

        return $this;
    }

    /**
     * Gets twitterLink
     *
     * @return string|null
     */
    public function getTwitterLink()
    {
        return $this->container['twitterLink'];
    }

    /**
     * Sets twitterLink
     *
     * @param string|null $twitterLink Twitter link
     *
     * @return self
     */
    public function setTwitterLink($twitterLink)
    {
        $this->container['twitterLink'] = $twitterLink;

        return $this;
    }

    /**
     * Gets linkedInLink
     *
     * @return string|null
     */
    public function getLinkedInLink()
    {
        return $this->container['linkedInLink'];
    }

    /**
     * Sets linkedInLink
     *
     * @param string|null $linkedInLink LinkedIn link
     *
     * @return self
     */
    public function setLinkedInLink($linkedInLink)
    {
        $this->container['linkedInLink'] = $linkedInLink;

        return $this;
    }

    /**
     * Gets language
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\FieldValue|null $language Contact's language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets pictureId
     *
     * @return int|null
     */
    public function getPictureId()
    {
        return $this->container['pictureId'];
    }

    /**
     * Sets pictureId
     *
     * @param int|null $pictureId Contact's picture document id
     *
     * @return self
     */
    public function setPictureId($pictureId)
    {
        $this->container['pictureId'] = $pictureId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


