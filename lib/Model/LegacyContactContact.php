<?php
/**
 * LegacyContactContact
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-equisoft2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * LegacyContactContact Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LegacyContactContact implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'legacy.contact.Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'uuid' => 'string',
        'typeContact' => 'string',
        'indOrg' => 'string',
        'displayName' => 'string',
        'firstName' => 'string',
        'nickname' => 'string',
        'middleName' => 'string',
        'lastName' => 'string',
        'corporationName' => 'string',
        'corporationNameLine2' => 'string',
        'rank' => 'string',
        'facebookLink' => 'string',
        'twitterLink' => 'string',
        'linkedinLink' => 'string',
        'avatar' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'uuid' => null,
        'typeContact' => null,
        'indOrg' => null,
        'displayName' => null,
        'firstName' => null,
        'nickname' => null,
        'middleName' => null,
        'lastName' => null,
        'corporationName' => null,
        'corporationNameLine2' => null,
        'rank' => null,
        'facebookLink' => null,
        'twitterLink' => null,
        'linkedinLink' => null,
        'avatar' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'uuid' => false,
		'typeContact' => false,
		'indOrg' => false,
		'displayName' => false,
		'firstName' => false,
		'nickname' => false,
		'middleName' => false,
		'lastName' => false,
		'corporationName' => false,
		'corporationNameLine2' => false,
		'rank' => false,
		'facebookLink' => false,
		'twitterLink' => false,
		'linkedinLink' => false,
		'avatar' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'uuid' => 'uuid',
        'typeContact' => 'typeContact',
        'indOrg' => 'indOrg',
        'displayName' => 'displayName',
        'firstName' => 'firstName',
        'nickname' => 'nickname',
        'middleName' => 'middleName',
        'lastName' => 'lastName',
        'corporationName' => 'corporationName',
        'corporationNameLine2' => 'corporationNameLine2',
        'rank' => 'rank',
        'facebookLink' => 'facebookLink',
        'twitterLink' => 'twitterLink',
        'linkedinLink' => 'linkedinLink',
        'avatar' => 'avatar'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'uuid' => 'setUuid',
        'typeContact' => 'setTypeContact',
        'indOrg' => 'setIndOrg',
        'displayName' => 'setDisplayName',
        'firstName' => 'setFirstName',
        'nickname' => 'setNickname',
        'middleName' => 'setMiddleName',
        'lastName' => 'setLastName',
        'corporationName' => 'setCorporationName',
        'corporationNameLine2' => 'setCorporationNameLine2',
        'rank' => 'setRank',
        'facebookLink' => 'setFacebookLink',
        'twitterLink' => 'setTwitterLink',
        'linkedinLink' => 'setLinkedinLink',
        'avatar' => 'setAvatar'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'uuid' => 'getUuid',
        'typeContact' => 'getTypeContact',
        'indOrg' => 'getIndOrg',
        'displayName' => 'getDisplayName',
        'firstName' => 'getFirstName',
        'nickname' => 'getNickname',
        'middleName' => 'getMiddleName',
        'lastName' => 'getLastName',
        'corporationName' => 'getCorporationName',
        'corporationNameLine2' => 'getCorporationNameLine2',
        'rank' => 'getRank',
        'facebookLink' => 'getFacebookLink',
        'twitterLink' => 'getTwitterLink',
        'linkedinLink' => 'getLinkedinLink',
        'avatar' => 'getAvatar'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('typeContact', $data ?? [], null);
        $this->setIfExists('indOrg', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('nickname', $data ?? [], null);
        $this->setIfExists('middleName', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('corporationName', $data ?? [], null);
        $this->setIfExists('corporationNameLine2', $data ?? [], null);
        $this->setIfExists('rank', $data ?? [], null);
        $this->setIfExists('facebookLink', $data ?? [], null);
        $this->setIfExists('twitterLink', $data ?? [], null);
        $this->setIfExists('linkedinLink', $data ?? [], null);
        $this->setIfExists('avatar', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique id.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid Contact UUID.
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets typeContact
     *
     * @return string|null
     */
    public function getTypeContact()
    {
        return $this->container['typeContact'];
    }

    /**
     * Sets typeContact
     *
     * @param string|null $typeContact Type of the contact.
     *
     * @return self
     */
    public function setTypeContact($typeContact)
    {
        if (is_null($typeContact)) {
            throw new \InvalidArgumentException('non-nullable typeContact cannot be null');
        }
        $this->container['typeContact'] = $typeContact;

        return $this;
    }

    /**
     * Gets indOrg
     *
     * @return string|null
     */
    public function getIndOrg()
    {
        return $this->container['indOrg'];
    }

    /**
     * Sets indOrg
     *
     * @param string|null $indOrg Type INDIVIDUAL OR ORGANIZATION.
     *
     * @return self
     */
    public function setIndOrg($indOrg)
    {
        if (is_null($indOrg)) {
            throw new \InvalidArgumentException('non-nullable indOrg cannot be null');
        }
        $this->container['indOrg'] = $indOrg;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName Display name of the contact.
     *
     * @return self
     */
    public function setDisplayName($displayName)
    {
        if (is_null($displayName)) {
            throw new \InvalidArgumentException('non-nullable displayName cannot be null');
        }
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName First name of the contact.
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        if (is_null($firstName)) {
            throw new \InvalidArgumentException('non-nullable firstName cannot be null');
        }
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname Nickname of the contact.
     *
     * @return self
     */
    public function setNickname($nickname)
    {
        if (is_null($nickname)) {
            throw new \InvalidArgumentException('non-nullable nickname cannot be null');
        }
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets middleName
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middleName'];
    }

    /**
     * Sets middleName
     *
     * @param string|null $middleName Middle name of the contact.
     *
     * @return self
     */
    public function setMiddleName($middleName)
    {
        if (is_null($middleName)) {
            throw new \InvalidArgumentException('non-nullable middleName cannot be null');
        }
        $this->container['middleName'] = $middleName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName Last name of the contact.
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        if (is_null($lastName)) {
            throw new \InvalidArgumentException('non-nullable lastName cannot be null');
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets corporationName
     *
     * @return string|null
     */
    public function getCorporationName()
    {
        return $this->container['corporationName'];
    }

    /**
     * Sets corporationName
     *
     * @param string|null $corporationName First line of corporation name (Organization).
     *
     * @return self
     */
    public function setCorporationName($corporationName)
    {
        if (is_null($corporationName)) {
            throw new \InvalidArgumentException('non-nullable corporationName cannot be null');
        }
        $this->container['corporationName'] = $corporationName;

        return $this;
    }

    /**
     * Gets corporationNameLine2
     *
     * @return string|null
     */
    public function getCorporationNameLine2()
    {
        return $this->container['corporationNameLine2'];
    }

    /**
     * Sets corporationNameLine2
     *
     * @param string|null $corporationNameLine2 Second line of corporation name (Organization).
     *
     * @return self
     */
    public function setCorporationNameLine2($corporationNameLine2)
    {
        if (is_null($corporationNameLine2)) {
            throw new \InvalidArgumentException('non-nullable corporationNameLine2 cannot be null');
        }
        $this->container['corporationNameLine2'] = $corporationNameLine2;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return string|null
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param string|null $rank Rank of the contact. (Industrial Alliance only).
     *
     * @return self
     */
    public function setRank($rank)
    {
        if (is_null($rank)) {
            throw new \InvalidArgumentException('non-nullable rank cannot be null');
        }
        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets facebookLink
     *
     * @return string|null
     */
    public function getFacebookLink()
    {
        return $this->container['facebookLink'];
    }

    /**
     * Sets facebookLink
     *
     * @param string|null $facebookLink Facebook link.
     *
     * @return self
     */
    public function setFacebookLink($facebookLink)
    {
        if (is_null($facebookLink)) {
            throw new \InvalidArgumentException('non-nullable facebookLink cannot be null');
        }
        $this->container['facebookLink'] = $facebookLink;

        return $this;
    }

    /**
     * Gets twitterLink
     *
     * @return string|null
     */
    public function getTwitterLink()
    {
        return $this->container['twitterLink'];
    }

    /**
     * Sets twitterLink
     *
     * @param string|null $twitterLink Twitter link.
     *
     * @return self
     */
    public function setTwitterLink($twitterLink)
    {
        if (is_null($twitterLink)) {
            throw new \InvalidArgumentException('non-nullable twitterLink cannot be null');
        }
        $this->container['twitterLink'] = $twitterLink;

        return $this;
    }

    /**
     * Gets linkedinLink
     *
     * @return string|null
     */
    public function getLinkedinLink()
    {
        return $this->container['linkedinLink'];
    }

    /**
     * Sets linkedinLink
     *
     * @param string|null $linkedinLink LinkedIn link.
     *
     * @return self
     */
    public function setLinkedinLink($linkedinLink)
    {
        if (is_null($linkedinLink)) {
            throw new \InvalidArgumentException('non-nullable linkedinLink cannot be null');
        }
        $this->container['linkedinLink'] = $linkedinLink;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return int|null
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param int|null $avatar Avatar.
     *
     * @return self
     */
    public function setAvatar($avatar)
    {
        if (is_null($avatar)) {
            throw new \InvalidArgumentException('non-nullable avatar cannot be null');
        }
        $this->container['avatar'] = $avatar;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


