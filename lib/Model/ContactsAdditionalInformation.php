<?php
/**
 * ContactsAdditionalInformation
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-equisoft1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * ContactsAdditionalInformation Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContactsAdditionalInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'contacts.AdditionalInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'isDeceased' => 'bool',
        'deceasedDate' => '\DateTime',
        'isSmoker' => 'bool',
        'smokerEndDate' => '\DateTime',
        'birthDate' => '\DateTime',
        'facebookLink' => 'string',
        'twitterLink' => 'string',
        'linkedInLink' => 'string',
        'language' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue',
        'pictureId' => 'int',
        'organizationDateCreated' => '\DateTime',
        'organizationDateClosed' => '\DateTime',
        'numberOfEmployees' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue',
        'companyValue' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue',
        'annualGrowth' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue',
        'companyStage' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue',
        'revenue' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsRevenue',
        'incorporationLocation' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue',
        'payroll' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue',
        'endOfFinancialYear' => 'string',
        'numberOfShareholders' => 'int',
        'registrationNumbers' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsRegistrationNumbers',
        'knownSince' => '\DateTime',
        'endDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'isDeceased' => null,
        'deceasedDate' => 'date',
        'isSmoker' => null,
        'smokerEndDate' => 'date',
        'birthDate' => 'date',
        'facebookLink' => null,
        'twitterLink' => null,
        'linkedInLink' => null,
        'language' => null,
        'pictureId' => null,
        'organizationDateCreated' => 'date',
        'organizationDateClosed' => 'date',
        'numberOfEmployees' => null,
        'companyValue' => null,
        'annualGrowth' => null,
        'companyStage' => null,
        'revenue' => null,
        'incorporationLocation' => null,
        'payroll' => null,
        'endOfFinancialYear' => null,
        'numberOfShareholders' => null,
        'registrationNumbers' => null,
        'knownSince' => 'date',
        'endDate' => 'date'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'isDeceased' => false,
        'deceasedDate' => true,
        'isSmoker' => true,
        'smokerEndDate' => true,
        'birthDate' => true,
        'facebookLink' => false,
        'twitterLink' => false,
        'linkedInLink' => false,
        'language' => true,
        'pictureId' => true,
        'organizationDateCreated' => true,
        'organizationDateClosed' => true,
        'numberOfEmployees' => true,
        'companyValue' => true,
        'annualGrowth' => true,
        'companyStage' => true,
        'revenue' => true,
        'incorporationLocation' => true,
        'payroll' => true,
        'endOfFinancialYear' => true,
        'numberOfShareholders' => true,
        'registrationNumbers' => true,
        'knownSince' => true,
        'endDate' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'isDeceased' => 'isDeceased',
        'deceasedDate' => 'deceasedDate',
        'isSmoker' => 'isSmoker',
        'smokerEndDate' => 'smokerEndDate',
        'birthDate' => 'birthDate',
        'facebookLink' => 'facebookLink',
        'twitterLink' => 'twitterLink',
        'linkedInLink' => 'linkedInLink',
        'language' => 'language',
        'pictureId' => 'pictureId',
        'organizationDateCreated' => 'organizationDateCreated',
        'organizationDateClosed' => 'organizationDateClosed',
        'numberOfEmployees' => 'numberOfEmployees',
        'companyValue' => 'companyValue',
        'annualGrowth' => 'annualGrowth',
        'companyStage' => 'companyStage',
        'revenue' => 'revenue',
        'incorporationLocation' => 'incorporationLocation',
        'payroll' => 'payroll',
        'endOfFinancialYear' => 'endOfFinancialYear',
        'numberOfShareholders' => 'numberOfShareholders',
        'registrationNumbers' => 'registrationNumbers',
        'knownSince' => 'knownSince',
        'endDate' => 'endDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'isDeceased' => 'setIsDeceased',
        'deceasedDate' => 'setDeceasedDate',
        'isSmoker' => 'setIsSmoker',
        'smokerEndDate' => 'setSmokerEndDate',
        'birthDate' => 'setBirthDate',
        'facebookLink' => 'setFacebookLink',
        'twitterLink' => 'setTwitterLink',
        'linkedInLink' => 'setLinkedInLink',
        'language' => 'setLanguage',
        'pictureId' => 'setPictureId',
        'organizationDateCreated' => 'setOrganizationDateCreated',
        'organizationDateClosed' => 'setOrganizationDateClosed',
        'numberOfEmployees' => 'setNumberOfEmployees',
        'companyValue' => 'setCompanyValue',
        'annualGrowth' => 'setAnnualGrowth',
        'companyStage' => 'setCompanyStage',
        'revenue' => 'setRevenue',
        'incorporationLocation' => 'setIncorporationLocation',
        'payroll' => 'setPayroll',
        'endOfFinancialYear' => 'setEndOfFinancialYear',
        'numberOfShareholders' => 'setNumberOfShareholders',
        'registrationNumbers' => 'setRegistrationNumbers',
        'knownSince' => 'setKnownSince',
        'endDate' => 'setEndDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'isDeceased' => 'getIsDeceased',
        'deceasedDate' => 'getDeceasedDate',
        'isSmoker' => 'getIsSmoker',
        'smokerEndDate' => 'getSmokerEndDate',
        'birthDate' => 'getBirthDate',
        'facebookLink' => 'getFacebookLink',
        'twitterLink' => 'getTwitterLink',
        'linkedInLink' => 'getLinkedInLink',
        'language' => 'getLanguage',
        'pictureId' => 'getPictureId',
        'organizationDateCreated' => 'getOrganizationDateCreated',
        'organizationDateClosed' => 'getOrganizationDateClosed',
        'numberOfEmployees' => 'getNumberOfEmployees',
        'companyValue' => 'getCompanyValue',
        'annualGrowth' => 'getAnnualGrowth',
        'companyStage' => 'getCompanyStage',
        'revenue' => 'getRevenue',
        'incorporationLocation' => 'getIncorporationLocation',
        'payroll' => 'getPayroll',
        'endOfFinancialYear' => 'getEndOfFinancialYear',
        'numberOfShareholders' => 'getNumberOfShareholders',
        'registrationNumbers' => 'getRegistrationNumbers',
        'knownSince' => 'getKnownSince',
        'endDate' => 'getEndDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('isDeceased', $data ?? [], null);
        $this->setIfExists('deceasedDate', $data ?? [], null);
        $this->setIfExists('isSmoker', $data ?? [], null);
        $this->setIfExists('smokerEndDate', $data ?? [], null);
        $this->setIfExists('birthDate', $data ?? [], null);
        $this->setIfExists('facebookLink', $data ?? [], null);
        $this->setIfExists('twitterLink', $data ?? [], null);
        $this->setIfExists('linkedInLink', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('pictureId', $data ?? [], null);
        $this->setIfExists('organizationDateCreated', $data ?? [], null);
        $this->setIfExists('organizationDateClosed', $data ?? [], null);
        $this->setIfExists('numberOfEmployees', $data ?? [], null);
        $this->setIfExists('companyValue', $data ?? [], null);
        $this->setIfExists('annualGrowth', $data ?? [], null);
        $this->setIfExists('companyStage', $data ?? [], null);
        $this->setIfExists('revenue', $data ?? [], null);
        $this->setIfExists('incorporationLocation', $data ?? [], null);
        $this->setIfExists('payroll', $data ?? [], null);
        $this->setIfExists('endOfFinancialYear', $data ?? [], null);
        $this->setIfExists('numberOfShareholders', $data ?? [], null);
        $this->setIfExists('registrationNumbers', $data ?? [], null);
        $this->setIfExists('knownSince', $data ?? [], null);
        $this->setIfExists('endDate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets isDeceased
     *
     * @return bool|null
     */
    public function getIsDeceased()
    {
        return $this->container['isDeceased'];
    }

    /**
     * Sets isDeceased
     *
     * @param bool|null $isDeceased isDeceased
     *
     * @return self
     */
    public function setIsDeceased($isDeceased)
    {
        if (is_null($isDeceased)) {
            throw new \InvalidArgumentException('non-nullable isDeceased cannot be null');
        }
        $this->container['isDeceased'] = $isDeceased;

        return $this;
    }

    /**
     * Gets deceasedDate
     *
     * @return \DateTime|null
     */
    public function getDeceasedDate()
    {
        return $this->container['deceasedDate'];
    }

    /**
     * Sets deceasedDate
     *
     * @param \DateTime|null $deceasedDate deceasedDate
     *
     * @return self
     */
    public function setDeceasedDate($deceasedDate)
    {
        if (is_null($deceasedDate)) {
            array_push($this->openAPINullablesSetToNull, 'deceasedDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deceasedDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deceasedDate'] = $deceasedDate;

        return $this;
    }

    /**
     * Gets isSmoker
     *
     * @return bool|null
     */
    public function getIsSmoker()
    {
        return $this->container['isSmoker'];
    }

    /**
     * Sets isSmoker
     *
     * @param bool|null $isSmoker isSmoker
     *
     * @return self
     */
    public function setIsSmoker($isSmoker)
    {
        if (is_null($isSmoker)) {
            array_push($this->openAPINullablesSetToNull, 'isSmoker');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isSmoker', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isSmoker'] = $isSmoker;

        return $this;
    }

    /**
     * Gets smokerEndDate
     *
     * @return \DateTime|null
     */
    public function getSmokerEndDate()
    {
        return $this->container['smokerEndDate'];
    }

    /**
     * Sets smokerEndDate
     *
     * @param \DateTime|null $smokerEndDate smokerEndDate
     *
     * @return self
     */
    public function setSmokerEndDate($smokerEndDate)
    {
        if (is_null($smokerEndDate)) {
            array_push($this->openAPINullablesSetToNull, 'smokerEndDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('smokerEndDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['smokerEndDate'] = $smokerEndDate;

        return $this;
    }

    /**
     * Gets birthDate
     *
     * @return \DateTime|null
     */
    public function getBirthDate()
    {
        return $this->container['birthDate'];
    }

    /**
     * Sets birthDate
     *
     * @param \DateTime|null $birthDate birthDate
     *
     * @return self
     */
    public function setBirthDate($birthDate)
    {
        if (is_null($birthDate)) {
            array_push($this->openAPINullablesSetToNull, 'birthDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birthDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birthDate'] = $birthDate;

        return $this;
    }

    /**
     * Gets facebookLink
     *
     * @return string|null
     */
    public function getFacebookLink()
    {
        return $this->container['facebookLink'];
    }

    /**
     * Sets facebookLink
     *
     * @param string|null $facebookLink facebookLink
     *
     * @return self
     */
    public function setFacebookLink($facebookLink)
    {
        if (is_null($facebookLink)) {
            throw new \InvalidArgumentException('non-nullable facebookLink cannot be null');
        }
        $this->container['facebookLink'] = $facebookLink;

        return $this;
    }

    /**
     * Gets twitterLink
     *
     * @return string|null
     */
    public function getTwitterLink()
    {
        return $this->container['twitterLink'];
    }

    /**
     * Sets twitterLink
     *
     * @param string|null $twitterLink twitterLink
     *
     * @return self
     */
    public function setTwitterLink($twitterLink)
    {
        if (is_null($twitterLink)) {
            throw new \InvalidArgumentException('non-nullable twitterLink cannot be null');
        }
        $this->container['twitterLink'] = $twitterLink;

        return $this;
    }

    /**
     * Gets linkedInLink
     *
     * @return string|null
     */
    public function getLinkedInLink()
    {
        return $this->container['linkedInLink'];
    }

    /**
     * Sets linkedInLink
     *
     * @param string|null $linkedInLink linkedInLink
     *
     * @return self
     */
    public function setLinkedInLink($linkedInLink)
    {
        if (is_null($linkedInLink)) {
            throw new \InvalidArgumentException('non-nullable linkedInLink cannot be null');
        }
        $this->container['linkedInLink'] = $linkedInLink;

        return $this;
    }

    /**
     * Gets language
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            array_push($this->openAPINullablesSetToNull, 'language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets pictureId
     *
     * @return int|null
     */
    public function getPictureId()
    {
        return $this->container['pictureId'];
    }

    /**
     * Sets pictureId
     *
     * @param int|null $pictureId pictureId
     *
     * @return self
     */
    public function setPictureId($pictureId)
    {
        if (is_null($pictureId)) {
            array_push($this->openAPINullablesSetToNull, 'pictureId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pictureId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pictureId'] = $pictureId;

        return $this;
    }

    /**
     * Gets organizationDateCreated
     *
     * @return \DateTime|null
     */
    public function getOrganizationDateCreated()
    {
        return $this->container['organizationDateCreated'];
    }

    /**
     * Sets organizationDateCreated
     *
     * @param \DateTime|null $organizationDateCreated organizationDateCreated
     *
     * @return self
     */
    public function setOrganizationDateCreated($organizationDateCreated)
    {
        if (is_null($organizationDateCreated)) {
            array_push($this->openAPINullablesSetToNull, 'organizationDateCreated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organizationDateCreated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organizationDateCreated'] = $organizationDateCreated;

        return $this;
    }

    /**
     * Gets organizationDateClosed
     *
     * @return \DateTime|null
     */
    public function getOrganizationDateClosed()
    {
        return $this->container['organizationDateClosed'];
    }

    /**
     * Sets organizationDateClosed
     *
     * @param \DateTime|null $organizationDateClosed organizationDateClosed
     *
     * @return self
     */
    public function setOrganizationDateClosed($organizationDateClosed)
    {
        if (is_null($organizationDateClosed)) {
            array_push($this->openAPINullablesSetToNull, 'organizationDateClosed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organizationDateClosed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organizationDateClosed'] = $organizationDateClosed;

        return $this;
    }

    /**
     * Gets numberOfEmployees
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null
     */
    public function getNumberOfEmployees()
    {
        return $this->container['numberOfEmployees'];
    }

    /**
     * Sets numberOfEmployees
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null $numberOfEmployees numberOfEmployees
     *
     * @return self
     */
    public function setNumberOfEmployees($numberOfEmployees)
    {
        if (is_null($numberOfEmployees)) {
            array_push($this->openAPINullablesSetToNull, 'numberOfEmployees');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('numberOfEmployees', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['numberOfEmployees'] = $numberOfEmployees;

        return $this;
    }

    /**
     * Gets companyValue
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null
     */
    public function getCompanyValue()
    {
        return $this->container['companyValue'];
    }

    /**
     * Sets companyValue
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null $companyValue companyValue
     *
     * @return self
     */
    public function setCompanyValue($companyValue)
    {
        if (is_null($companyValue)) {
            array_push($this->openAPINullablesSetToNull, 'companyValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyValue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['companyValue'] = $companyValue;

        return $this;
    }

    /**
     * Gets annualGrowth
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null
     */
    public function getAnnualGrowth()
    {
        return $this->container['annualGrowth'];
    }

    /**
     * Sets annualGrowth
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null $annualGrowth annualGrowth
     *
     * @return self
     */
    public function setAnnualGrowth($annualGrowth)
    {
        if (is_null($annualGrowth)) {
            array_push($this->openAPINullablesSetToNull, 'annualGrowth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('annualGrowth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['annualGrowth'] = $annualGrowth;

        return $this;
    }

    /**
     * Gets companyStage
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null
     */
    public function getCompanyStage()
    {
        return $this->container['companyStage'];
    }

    /**
     * Sets companyStage
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null $companyStage companyStage
     *
     * @return self
     */
    public function setCompanyStage($companyStage)
    {
        if (is_null($companyStage)) {
            array_push($this->openAPINullablesSetToNull, 'companyStage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyStage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['companyStage'] = $companyStage;

        return $this;
    }

    /**
     * Gets revenue
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsRevenue|null
     */
    public function getRevenue()
    {
        return $this->container['revenue'];
    }

    /**
     * Sets revenue
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsRevenue|null $revenue revenue
     *
     * @return self
     */
    public function setRevenue($revenue)
    {
        if (is_null($revenue)) {
            array_push($this->openAPINullablesSetToNull, 'revenue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('revenue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['revenue'] = $revenue;

        return $this;
    }

    /**
     * Gets incorporationLocation
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null
     */
    public function getIncorporationLocation()
    {
        return $this->container['incorporationLocation'];
    }

    /**
     * Sets incorporationLocation
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null $incorporationLocation incorporationLocation
     *
     * @return self
     */
    public function setIncorporationLocation($incorporationLocation)
    {
        if (is_null($incorporationLocation)) {
            array_push($this->openAPINullablesSetToNull, 'incorporationLocation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incorporationLocation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['incorporationLocation'] = $incorporationLocation;

        return $this;
    }

    /**
     * Gets payroll
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null
     */
    public function getPayroll()
    {
        return $this->container['payroll'];
    }

    /**
     * Sets payroll
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null $payroll payroll
     *
     * @return self
     */
    public function setPayroll($payroll)
    {
        if (is_null($payroll)) {
            array_push($this->openAPINullablesSetToNull, 'payroll');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payroll', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payroll'] = $payroll;

        return $this;
    }

    /**
     * Gets endOfFinancialYear
     *
     * @return string|null
     */
    public function getEndOfFinancialYear()
    {
        return $this->container['endOfFinancialYear'];
    }

    /**
     * Sets endOfFinancialYear
     *
     * @param string|null $endOfFinancialYear endOfFinancialYear
     *
     * @return self
     */
    public function setEndOfFinancialYear($endOfFinancialYear)
    {
        if (is_null($endOfFinancialYear)) {
            array_push($this->openAPINullablesSetToNull, 'endOfFinancialYear');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('endOfFinancialYear', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['endOfFinancialYear'] = $endOfFinancialYear;

        return $this;
    }

    /**
     * Gets numberOfShareholders
     *
     * @return int|null
     */
    public function getNumberOfShareholders()
    {
        return $this->container['numberOfShareholders'];
    }

    /**
     * Sets numberOfShareholders
     *
     * @param int|null $numberOfShareholders numberOfShareholders
     *
     * @return self
     */
    public function setNumberOfShareholders($numberOfShareholders)
    {
        if (is_null($numberOfShareholders)) {
            array_push($this->openAPINullablesSetToNull, 'numberOfShareholders');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('numberOfShareholders', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['numberOfShareholders'] = $numberOfShareholders;

        return $this;
    }

    /**
     * Gets registrationNumbers
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsRegistrationNumbers|null
     */
    public function getRegistrationNumbers()
    {
        return $this->container['registrationNumbers'];
    }

    /**
     * Sets registrationNumbers
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsRegistrationNumbers|null $registrationNumbers registrationNumbers
     *
     * @return self
     */
    public function setRegistrationNumbers($registrationNumbers)
    {
        if (is_null($registrationNumbers)) {
            array_push($this->openAPINullablesSetToNull, 'registrationNumbers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registrationNumbers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registrationNumbers'] = $registrationNumbers;

        return $this;
    }

    /**
     * Gets knownSince
     *
     * @return \DateTime|null
     */
    public function getKnownSince()
    {
        return $this->container['knownSince'];
    }

    /**
     * Sets knownSince
     *
     * @param \DateTime|null $knownSince knownSince
     *
     * @return self
     */
    public function setKnownSince($knownSince)
    {
        if (is_null($knownSince)) {
            array_push($this->openAPINullablesSetToNull, 'knownSince');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('knownSince', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['knownSince'] = $knownSince;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime|null $endDate endDate
     *
     * @return self
     */
    public function setEndDate($endDate)
    {
        if (is_null($endDate)) {
            array_push($this->openAPINullablesSetToNull, 'endDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('endDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['endDate'] = $endDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


