<?php
/**
 * MovementMovementStatisticResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-equisoft4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * MovementMovementStatisticResponse Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MovementMovementStatisticResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'movement.MovementStatisticResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account' => 'int',
        'action' => 'int',
        'commission' => 'int',
        'contact' => 'int',
        'document' => 'int',
        'fullFinanceUser' => 'int',
        'imageFile' => 'int',
        'insurance' => 'int',
        'invitation' => 'int',
        'kilometer' => 'int',
        'mailTemplate' => 'int',
        'notepad' => 'int',
        'objective' => 'int',
        'opportunity' => 'int',
        'policy' => 'int',
        'product' => 'int',
        'project' => 'int',
        'remoteAccount' => 'int',
        'report' => 'int',
        'reportFilter' => 'int',
        'secureMail' => 'int',
        'strategy' => 'int',
        'time' => 'int',
        'vdvalue' => 'int',
        'webuserStar' => 'int',
        'xmlTemplate' => 'int',
        'documentSize' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account' => null,
        'action' => null,
        'commission' => null,
        'contact' => null,
        'document' => null,
        'fullFinanceUser' => null,
        'imageFile' => null,
        'insurance' => null,
        'invitation' => null,
        'kilometer' => null,
        'mailTemplate' => null,
        'notepad' => null,
        'objective' => null,
        'opportunity' => null,
        'policy' => null,
        'product' => null,
        'project' => null,
        'remoteAccount' => null,
        'report' => null,
        'reportFilter' => null,
        'secureMail' => null,
        'strategy' => null,
        'time' => null,
        'vdvalue' => null,
        'webuserStar' => null,
        'xmlTemplate' => null,
        'documentSize' => 'float'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account' => true,
		'action' => true,
		'commission' => true,
		'contact' => true,
		'document' => true,
		'fullFinanceUser' => true,
		'imageFile' => true,
		'insurance' => true,
		'invitation' => true,
		'kilometer' => true,
		'mailTemplate' => true,
		'notepad' => true,
		'objective' => true,
		'opportunity' => true,
		'policy' => true,
		'product' => true,
		'project' => true,
		'remoteAccount' => true,
		'report' => true,
		'reportFilter' => true,
		'secureMail' => true,
		'strategy' => true,
		'time' => true,
		'vdvalue' => true,
		'webuserStar' => true,
		'xmlTemplate' => true,
		'documentSize' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account' => 'account',
        'action' => 'action',
        'commission' => 'commission',
        'contact' => 'contact',
        'document' => 'document',
        'fullFinanceUser' => 'fullFinanceUser',
        'imageFile' => 'imageFile',
        'insurance' => 'insurance',
        'invitation' => 'invitation',
        'kilometer' => 'kilometer',
        'mailTemplate' => 'mailTemplate',
        'notepad' => 'notepad',
        'objective' => 'objective',
        'opportunity' => 'opportunity',
        'policy' => 'policy',
        'product' => 'product',
        'project' => 'project',
        'remoteAccount' => 'remoteAccount',
        'report' => 'report',
        'reportFilter' => 'reportFilter',
        'secureMail' => 'secureMail',
        'strategy' => 'strategy',
        'time' => 'time',
        'vdvalue' => 'vdvalue',
        'webuserStar' => 'webuserStar',
        'xmlTemplate' => 'xmlTemplate',
        'documentSize' => 'documentSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account' => 'setAccount',
        'action' => 'setAction',
        'commission' => 'setCommission',
        'contact' => 'setContact',
        'document' => 'setDocument',
        'fullFinanceUser' => 'setFullFinanceUser',
        'imageFile' => 'setImageFile',
        'insurance' => 'setInsurance',
        'invitation' => 'setInvitation',
        'kilometer' => 'setKilometer',
        'mailTemplate' => 'setMailTemplate',
        'notepad' => 'setNotepad',
        'objective' => 'setObjective',
        'opportunity' => 'setOpportunity',
        'policy' => 'setPolicy',
        'product' => 'setProduct',
        'project' => 'setProject',
        'remoteAccount' => 'setRemoteAccount',
        'report' => 'setReport',
        'reportFilter' => 'setReportFilter',
        'secureMail' => 'setSecureMail',
        'strategy' => 'setStrategy',
        'time' => 'setTime',
        'vdvalue' => 'setVdvalue',
        'webuserStar' => 'setWebuserStar',
        'xmlTemplate' => 'setXmlTemplate',
        'documentSize' => 'setDocumentSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account' => 'getAccount',
        'action' => 'getAction',
        'commission' => 'getCommission',
        'contact' => 'getContact',
        'document' => 'getDocument',
        'fullFinanceUser' => 'getFullFinanceUser',
        'imageFile' => 'getImageFile',
        'insurance' => 'getInsurance',
        'invitation' => 'getInvitation',
        'kilometer' => 'getKilometer',
        'mailTemplate' => 'getMailTemplate',
        'notepad' => 'getNotepad',
        'objective' => 'getObjective',
        'opportunity' => 'getOpportunity',
        'policy' => 'getPolicy',
        'product' => 'getProduct',
        'project' => 'getProject',
        'remoteAccount' => 'getRemoteAccount',
        'report' => 'getReport',
        'reportFilter' => 'getReportFilter',
        'secureMail' => 'getSecureMail',
        'strategy' => 'getStrategy',
        'time' => 'getTime',
        'vdvalue' => 'getVdvalue',
        'webuserStar' => 'getWebuserStar',
        'xmlTemplate' => 'getXmlTemplate',
        'documentSize' => 'getDocumentSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('commission', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('document', $data ?? [], null);
        $this->setIfExists('fullFinanceUser', $data ?? [], null);
        $this->setIfExists('imageFile', $data ?? [], null);
        $this->setIfExists('insurance', $data ?? [], null);
        $this->setIfExists('invitation', $data ?? [], null);
        $this->setIfExists('kilometer', $data ?? [], null);
        $this->setIfExists('mailTemplate', $data ?? [], null);
        $this->setIfExists('notepad', $data ?? [], null);
        $this->setIfExists('objective', $data ?? [], null);
        $this->setIfExists('opportunity', $data ?? [], null);
        $this->setIfExists('policy', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('project', $data ?? [], null);
        $this->setIfExists('remoteAccount', $data ?? [], null);
        $this->setIfExists('report', $data ?? [], null);
        $this->setIfExists('reportFilter', $data ?? [], null);
        $this->setIfExists('secureMail', $data ?? [], null);
        $this->setIfExists('strategy', $data ?? [], null);
        $this->setIfExists('time', $data ?? [], null);
        $this->setIfExists('vdvalue', $data ?? [], null);
        $this->setIfExists('webuserStar', $data ?? [], null);
        $this->setIfExists('xmlTemplate', $data ?? [], null);
        $this->setIfExists('documentSize', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account
     *
     * @return int|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param int|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            array_push($this->openAPINullablesSetToNull, 'account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets action
     *
     * @return int|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param int|null $action action
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            array_push($this->openAPINullablesSetToNull, 'action');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('action', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets commission
     *
     * @return int|null
     */
    public function getCommission()
    {
        return $this->container['commission'];
    }

    /**
     * Sets commission
     *
     * @param int|null $commission commission
     *
     * @return self
     */
    public function setCommission($commission)
    {
        if (is_null($commission)) {
            array_push($this->openAPINullablesSetToNull, 'commission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('commission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['commission'] = $commission;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return int|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param int|null $contact contact
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (is_null($contact)) {
            array_push($this->openAPINullablesSetToNull, 'contact');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets document
     *
     * @return int|null
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param int|null $document document
     *
     * @return self
     */
    public function setDocument($document)
    {
        if (is_null($document)) {
            array_push($this->openAPINullablesSetToNull, 'document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets fullFinanceUser
     *
     * @return int|null
     */
    public function getFullFinanceUser()
    {
        return $this->container['fullFinanceUser'];
    }

    /**
     * Sets fullFinanceUser
     *
     * @param int|null $fullFinanceUser fullFinanceUser
     *
     * @return self
     */
    public function setFullFinanceUser($fullFinanceUser)
    {
        if (is_null($fullFinanceUser)) {
            array_push($this->openAPINullablesSetToNull, 'fullFinanceUser');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fullFinanceUser', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fullFinanceUser'] = $fullFinanceUser;

        return $this;
    }

    /**
     * Gets imageFile
     *
     * @return int|null
     */
    public function getImageFile()
    {
        return $this->container['imageFile'];
    }

    /**
     * Sets imageFile
     *
     * @param int|null $imageFile imageFile
     *
     * @return self
     */
    public function setImageFile($imageFile)
    {
        if (is_null($imageFile)) {
            array_push($this->openAPINullablesSetToNull, 'imageFile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('imageFile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['imageFile'] = $imageFile;

        return $this;
    }

    /**
     * Gets insurance
     *
     * @return int|null
     */
    public function getInsurance()
    {
        return $this->container['insurance'];
    }

    /**
     * Sets insurance
     *
     * @param int|null $insurance insurance
     *
     * @return self
     */
    public function setInsurance($insurance)
    {
        if (is_null($insurance)) {
            array_push($this->openAPINullablesSetToNull, 'insurance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('insurance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['insurance'] = $insurance;

        return $this;
    }

    /**
     * Gets invitation
     *
     * @return int|null
     */
    public function getInvitation()
    {
        return $this->container['invitation'];
    }

    /**
     * Sets invitation
     *
     * @param int|null $invitation invitation
     *
     * @return self
     */
    public function setInvitation($invitation)
    {
        if (is_null($invitation)) {
            array_push($this->openAPINullablesSetToNull, 'invitation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invitation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invitation'] = $invitation;

        return $this;
    }

    /**
     * Gets kilometer
     *
     * @return int|null
     */
    public function getKilometer()
    {
        return $this->container['kilometer'];
    }

    /**
     * Sets kilometer
     *
     * @param int|null $kilometer kilometer
     *
     * @return self
     */
    public function setKilometer($kilometer)
    {
        if (is_null($kilometer)) {
            array_push($this->openAPINullablesSetToNull, 'kilometer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('kilometer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['kilometer'] = $kilometer;

        return $this;
    }

    /**
     * Gets mailTemplate
     *
     * @return int|null
     */
    public function getMailTemplate()
    {
        return $this->container['mailTemplate'];
    }

    /**
     * Sets mailTemplate
     *
     * @param int|null $mailTemplate mailTemplate
     *
     * @return self
     */
    public function setMailTemplate($mailTemplate)
    {
        if (is_null($mailTemplate)) {
            array_push($this->openAPINullablesSetToNull, 'mailTemplate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mailTemplate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mailTemplate'] = $mailTemplate;

        return $this;
    }

    /**
     * Gets notepad
     *
     * @return int|null
     */
    public function getNotepad()
    {
        return $this->container['notepad'];
    }

    /**
     * Sets notepad
     *
     * @param int|null $notepad notepad
     *
     * @return self
     */
    public function setNotepad($notepad)
    {
        if (is_null($notepad)) {
            array_push($this->openAPINullablesSetToNull, 'notepad');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notepad', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notepad'] = $notepad;

        return $this;
    }

    /**
     * Gets objective
     *
     * @return int|null
     */
    public function getObjective()
    {
        return $this->container['objective'];
    }

    /**
     * Sets objective
     *
     * @param int|null $objective objective
     *
     * @return self
     */
    public function setObjective($objective)
    {
        if (is_null($objective)) {
            array_push($this->openAPINullablesSetToNull, 'objective');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('objective', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['objective'] = $objective;

        return $this;
    }

    /**
     * Gets opportunity
     *
     * @return int|null
     */
    public function getOpportunity()
    {
        return $this->container['opportunity'];
    }

    /**
     * Sets opportunity
     *
     * @param int|null $opportunity opportunity
     *
     * @return self
     */
    public function setOpportunity($opportunity)
    {
        if (is_null($opportunity)) {
            array_push($this->openAPINullablesSetToNull, 'opportunity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('opportunity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['opportunity'] = $opportunity;

        return $this;
    }

    /**
     * Gets policy
     *
     * @return int|null
     */
    public function getPolicy()
    {
        return $this->container['policy'];
    }

    /**
     * Sets policy
     *
     * @param int|null $policy policy
     *
     * @return self
     */
    public function setPolicy($policy)
    {
        if (is_null($policy)) {
            array_push($this->openAPINullablesSetToNull, 'policy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('policy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['policy'] = $policy;

        return $this;
    }

    /**
     * Gets product
     *
     * @return int|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param int|null $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            array_push($this->openAPINullablesSetToNull, 'product');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets project
     *
     * @return int|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param int|null $project project
     *
     * @return self
     */
    public function setProject($project)
    {
        if (is_null($project)) {
            array_push($this->openAPINullablesSetToNull, 'project');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets remoteAccount
     *
     * @return int|null
     */
    public function getRemoteAccount()
    {
        return $this->container['remoteAccount'];
    }

    /**
     * Sets remoteAccount
     *
     * @param int|null $remoteAccount remoteAccount
     *
     * @return self
     */
    public function setRemoteAccount($remoteAccount)
    {
        if (is_null($remoteAccount)) {
            array_push($this->openAPINullablesSetToNull, 'remoteAccount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remoteAccount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['remoteAccount'] = $remoteAccount;

        return $this;
    }

    /**
     * Gets report
     *
     * @return int|null
     */
    public function getReport()
    {
        return $this->container['report'];
    }

    /**
     * Sets report
     *
     * @param int|null $report report
     *
     * @return self
     */
    public function setReport($report)
    {
        if (is_null($report)) {
            array_push($this->openAPINullablesSetToNull, 'report');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['report'] = $report;

        return $this;
    }

    /**
     * Gets reportFilter
     *
     * @return int|null
     */
    public function getReportFilter()
    {
        return $this->container['reportFilter'];
    }

    /**
     * Sets reportFilter
     *
     * @param int|null $reportFilter reportFilter
     *
     * @return self
     */
    public function setReportFilter($reportFilter)
    {
        if (is_null($reportFilter)) {
            array_push($this->openAPINullablesSetToNull, 'reportFilter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reportFilter', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reportFilter'] = $reportFilter;

        return $this;
    }

    /**
     * Gets secureMail
     *
     * @return int|null
     */
    public function getSecureMail()
    {
        return $this->container['secureMail'];
    }

    /**
     * Sets secureMail
     *
     * @param int|null $secureMail secureMail
     *
     * @return self
     */
    public function setSecureMail($secureMail)
    {
        if (is_null($secureMail)) {
            array_push($this->openAPINullablesSetToNull, 'secureMail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secureMail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secureMail'] = $secureMail;

        return $this;
    }

    /**
     * Gets strategy
     *
     * @return int|null
     */
    public function getStrategy()
    {
        return $this->container['strategy'];
    }

    /**
     * Sets strategy
     *
     * @param int|null $strategy strategy
     *
     * @return self
     */
    public function setStrategy($strategy)
    {
        if (is_null($strategy)) {
            array_push($this->openAPINullablesSetToNull, 'strategy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('strategy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['strategy'] = $strategy;

        return $this;
    }

    /**
     * Gets time
     *
     * @return int|null
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param int|null $time time
     *
     * @return self
     */
    public function setTime($time)
    {
        if (is_null($time)) {
            array_push($this->openAPINullablesSetToNull, 'time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets vdvalue
     *
     * @return int|null
     */
    public function getVdvalue()
    {
        return $this->container['vdvalue'];
    }

    /**
     * Sets vdvalue
     *
     * @param int|null $vdvalue vdvalue
     *
     * @return self
     */
    public function setVdvalue($vdvalue)
    {
        if (is_null($vdvalue)) {
            array_push($this->openAPINullablesSetToNull, 'vdvalue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vdvalue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vdvalue'] = $vdvalue;

        return $this;
    }

    /**
     * Gets webuserStar
     *
     * @return int|null
     */
    public function getWebuserStar()
    {
        return $this->container['webuserStar'];
    }

    /**
     * Sets webuserStar
     *
     * @param int|null $webuserStar webuserStar
     *
     * @return self
     */
    public function setWebuserStar($webuserStar)
    {
        if (is_null($webuserStar)) {
            array_push($this->openAPINullablesSetToNull, 'webuserStar');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('webuserStar', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['webuserStar'] = $webuserStar;

        return $this;
    }

    /**
     * Gets xmlTemplate
     *
     * @return int|null
     */
    public function getXmlTemplate()
    {
        return $this->container['xmlTemplate'];
    }

    /**
     * Sets xmlTemplate
     *
     * @param int|null $xmlTemplate xmlTemplate
     *
     * @return self
     */
    public function setXmlTemplate($xmlTemplate)
    {
        if (is_null($xmlTemplate)) {
            array_push($this->openAPINullablesSetToNull, 'xmlTemplate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('xmlTemplate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['xmlTemplate'] = $xmlTemplate;

        return $this;
    }

    /**
     * Gets documentSize
     *
     * @return float|null
     */
    public function getDocumentSize()
    {
        return $this->container['documentSize'];
    }

    /**
     * Sets documentSize
     *
     * @param float|null $documentSize documentSize
     *
     * @return self
     */
    public function setDocumentSize($documentSize)
    {
        if (is_null($documentSize)) {
            array_push($this->openAPINullablesSetToNull, 'documentSize');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('documentSize', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['documentSize'] = $documentSize;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


