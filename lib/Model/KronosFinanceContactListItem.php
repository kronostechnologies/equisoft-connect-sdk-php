<?php
/**
 * KronosFinanceContactListItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0-equisoft2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * KronosFinanceContactListItem Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class KronosFinanceContactListItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'kronos.finance.ContactListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'uuid' => 'string',
        'typeContact' => 'string',
        'indOrg' => 'string',
        'displayName' => 'string',
        'firstName' => 'string',
        'nickname' => 'string',
        'middleName' => 'string',
        'lastName' => 'string',
        'corporationName' => 'string',
        'corporationNameLine2' => 'string',
        'rank' => 'string',
        'facebookLink' => 'string',
        'twitterLink' => 'string',
        'linkedinLink' => 'string',
        'avatar' => 'int',
        'mainEmail' => 'string',
        'mainPhone' => 'string',
        'addressLine1' => 'string',
        'addressLine2' => 'string',
        'city' => 'string',
        'stateProvince' => 'string',
        'country' => 'string',
        'postalCode' => 'string',
        'civicNumber' => 'string',
        'road' => 'string',
        'extType' => 'string',
        'extNumber' => 'string',
        'birthdate' => 'string',
        'gender' => 'string',
        'customerNumber' => 'string',
        'dateModified' => 'string',
        'dateCreated' => 'string',
        'lastUpdateDate' => 'string',
        'spouseId' => 'int',
        'spouseDisplayName' => 'string',
        'spouseFirstName' => 'string',
        'spouseLastName' => 'string',
        'spouseBirthdate' => 'string',
        'spouseGender' => 'string',
        'class' => 'string',
        'classIds' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyInt[]',
        'advisorName' => 'string',
        'advisorEmail' => 'string',
        'advisorInitials' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'uuid' => null,
        'typeContact' => null,
        'indOrg' => null,
        'displayName' => null,
        'firstName' => null,
        'nickname' => null,
        'middleName' => null,
        'lastName' => null,
        'corporationName' => null,
        'corporationNameLine2' => null,
        'rank' => null,
        'facebookLink' => null,
        'twitterLink' => null,
        'linkedinLink' => null,
        'avatar' => null,
        'mainEmail' => null,
        'mainPhone' => null,
        'addressLine1' => null,
        'addressLine2' => null,
        'city' => null,
        'stateProvince' => null,
        'country' => null,
        'postalCode' => null,
        'civicNumber' => null,
        'road' => null,
        'extType' => null,
        'extNumber' => null,
        'birthdate' => null,
        'gender' => null,
        'customerNumber' => null,
        'dateModified' => null,
        'dateCreated' => null,
        'lastUpdateDate' => null,
        'spouseId' => null,
        'spouseDisplayName' => null,
        'spouseFirstName' => null,
        'spouseLastName' => null,
        'spouseBirthdate' => null,
        'spouseGender' => null,
        'class' => null,
        'classIds' => null,
        'advisorName' => null,
        'advisorEmail' => null,
        'advisorInitials' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'uuid' => false,
        'typeContact' => false,
        'indOrg' => false,
        'displayName' => false,
        'firstName' => false,
        'nickname' => false,
        'middleName' => false,
        'lastName' => false,
        'corporationName' => false,
        'corporationNameLine2' => false,
        'rank' => false,
        'facebookLink' => false,
        'twitterLink' => false,
        'linkedinLink' => false,
        'avatar' => false,
        'mainEmail' => false,
        'mainPhone' => false,
        'addressLine1' => false,
        'addressLine2' => false,
        'city' => false,
        'stateProvince' => false,
        'country' => false,
        'postalCode' => false,
        'civicNumber' => false,
        'road' => false,
        'extType' => false,
        'extNumber' => false,
        'birthdate' => false,
        'gender' => false,
        'customerNumber' => false,
        'dateModified' => false,
        'dateCreated' => false,
        'lastUpdateDate' => false,
        'spouseId' => false,
        'spouseDisplayName' => false,
        'spouseFirstName' => false,
        'spouseLastName' => false,
        'spouseBirthdate' => false,
        'spouseGender' => false,
        'class' => false,
        'classIds' => false,
        'advisorName' => false,
        'advisorEmail' => false,
        'advisorInitials' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'uuid' => 'uuid',
        'typeContact' => 'typeContact',
        'indOrg' => 'indOrg',
        'displayName' => 'displayName',
        'firstName' => 'firstName',
        'nickname' => 'nickname',
        'middleName' => 'middleName',
        'lastName' => 'lastName',
        'corporationName' => 'corporationName',
        'corporationNameLine2' => 'corporationNameLine2',
        'rank' => 'rank',
        'facebookLink' => 'facebookLink',
        'twitterLink' => 'twitterLink',
        'linkedinLink' => 'linkedinLink',
        'avatar' => 'avatar',
        'mainEmail' => 'mainEmail',
        'mainPhone' => 'mainPhone',
        'addressLine1' => 'addressLine1',
        'addressLine2' => 'addressLine2',
        'city' => 'city',
        'stateProvince' => 'stateProvince',
        'country' => 'country',
        'postalCode' => 'postalCode',
        'civicNumber' => 'civicNumber',
        'road' => 'road',
        'extType' => 'extType',
        'extNumber' => 'extNumber',
        'birthdate' => 'birthdate',
        'gender' => 'gender',
        'customerNumber' => 'customerNumber',
        'dateModified' => 'date_modified',
        'dateCreated' => 'date_created',
        'lastUpdateDate' => 'lastUpdateDate',
        'spouseId' => 'spouseId',
        'spouseDisplayName' => 'spouseDisplayName',
        'spouseFirstName' => 'spouseFirstName',
        'spouseLastName' => 'spouseLastName',
        'spouseBirthdate' => 'spouseBirthdate',
        'spouseGender' => 'spouseGender',
        'class' => 'class',
        'classIds' => 'classIds',
        'advisorName' => 'advisorName',
        'advisorEmail' => 'advisorEmail',
        'advisorInitials' => 'advisorInitials'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'uuid' => 'setUuid',
        'typeContact' => 'setTypeContact',
        'indOrg' => 'setIndOrg',
        'displayName' => 'setDisplayName',
        'firstName' => 'setFirstName',
        'nickname' => 'setNickname',
        'middleName' => 'setMiddleName',
        'lastName' => 'setLastName',
        'corporationName' => 'setCorporationName',
        'corporationNameLine2' => 'setCorporationNameLine2',
        'rank' => 'setRank',
        'facebookLink' => 'setFacebookLink',
        'twitterLink' => 'setTwitterLink',
        'linkedinLink' => 'setLinkedinLink',
        'avatar' => 'setAvatar',
        'mainEmail' => 'setMainEmail',
        'mainPhone' => 'setMainPhone',
        'addressLine1' => 'setAddressLine1',
        'addressLine2' => 'setAddressLine2',
        'city' => 'setCity',
        'stateProvince' => 'setStateProvince',
        'country' => 'setCountry',
        'postalCode' => 'setPostalCode',
        'civicNumber' => 'setCivicNumber',
        'road' => 'setRoad',
        'extType' => 'setExtType',
        'extNumber' => 'setExtNumber',
        'birthdate' => 'setBirthdate',
        'gender' => 'setGender',
        'customerNumber' => 'setCustomerNumber',
        'dateModified' => 'setDateModified',
        'dateCreated' => 'setDateCreated',
        'lastUpdateDate' => 'setLastUpdateDate',
        'spouseId' => 'setSpouseId',
        'spouseDisplayName' => 'setSpouseDisplayName',
        'spouseFirstName' => 'setSpouseFirstName',
        'spouseLastName' => 'setSpouseLastName',
        'spouseBirthdate' => 'setSpouseBirthdate',
        'spouseGender' => 'setSpouseGender',
        'class' => 'setClass',
        'classIds' => 'setClassIds',
        'advisorName' => 'setAdvisorName',
        'advisorEmail' => 'setAdvisorEmail',
        'advisorInitials' => 'setAdvisorInitials'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'uuid' => 'getUuid',
        'typeContact' => 'getTypeContact',
        'indOrg' => 'getIndOrg',
        'displayName' => 'getDisplayName',
        'firstName' => 'getFirstName',
        'nickname' => 'getNickname',
        'middleName' => 'getMiddleName',
        'lastName' => 'getLastName',
        'corporationName' => 'getCorporationName',
        'corporationNameLine2' => 'getCorporationNameLine2',
        'rank' => 'getRank',
        'facebookLink' => 'getFacebookLink',
        'twitterLink' => 'getTwitterLink',
        'linkedinLink' => 'getLinkedinLink',
        'avatar' => 'getAvatar',
        'mainEmail' => 'getMainEmail',
        'mainPhone' => 'getMainPhone',
        'addressLine1' => 'getAddressLine1',
        'addressLine2' => 'getAddressLine2',
        'city' => 'getCity',
        'stateProvince' => 'getStateProvince',
        'country' => 'getCountry',
        'postalCode' => 'getPostalCode',
        'civicNumber' => 'getCivicNumber',
        'road' => 'getRoad',
        'extType' => 'getExtType',
        'extNumber' => 'getExtNumber',
        'birthdate' => 'getBirthdate',
        'gender' => 'getGender',
        'customerNumber' => 'getCustomerNumber',
        'dateModified' => 'getDateModified',
        'dateCreated' => 'getDateCreated',
        'lastUpdateDate' => 'getLastUpdateDate',
        'spouseId' => 'getSpouseId',
        'spouseDisplayName' => 'getSpouseDisplayName',
        'spouseFirstName' => 'getSpouseFirstName',
        'spouseLastName' => 'getSpouseLastName',
        'spouseBirthdate' => 'getSpouseBirthdate',
        'spouseGender' => 'getSpouseGender',
        'class' => 'getClass',
        'classIds' => 'getClassIds',
        'advisorName' => 'getAdvisorName',
        'advisorEmail' => 'getAdvisorEmail',
        'advisorInitials' => 'getAdvisorInitials'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('typeContact', $data ?? [], null);
        $this->setIfExists('indOrg', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('nickname', $data ?? [], null);
        $this->setIfExists('middleName', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('corporationName', $data ?? [], null);
        $this->setIfExists('corporationNameLine2', $data ?? [], null);
        $this->setIfExists('rank', $data ?? [], null);
        $this->setIfExists('facebookLink', $data ?? [], null);
        $this->setIfExists('twitterLink', $data ?? [], null);
        $this->setIfExists('linkedinLink', $data ?? [], null);
        $this->setIfExists('avatar', $data ?? [], null);
        $this->setIfExists('mainEmail', $data ?? [], null);
        $this->setIfExists('mainPhone', $data ?? [], null);
        $this->setIfExists('addressLine1', $data ?? [], null);
        $this->setIfExists('addressLine2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('stateProvince', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('postalCode', $data ?? [], null);
        $this->setIfExists('civicNumber', $data ?? [], null);
        $this->setIfExists('road', $data ?? [], null);
        $this->setIfExists('extType', $data ?? [], null);
        $this->setIfExists('extNumber', $data ?? [], null);
        $this->setIfExists('birthdate', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('customerNumber', $data ?? [], null);
        $this->setIfExists('dateModified', $data ?? [], null);
        $this->setIfExists('dateCreated', $data ?? [], null);
        $this->setIfExists('lastUpdateDate', $data ?? [], null);
        $this->setIfExists('spouseId', $data ?? [], null);
        $this->setIfExists('spouseDisplayName', $data ?? [], null);
        $this->setIfExists('spouseFirstName', $data ?? [], null);
        $this->setIfExists('spouseLastName', $data ?? [], null);
        $this->setIfExists('spouseBirthdate', $data ?? [], null);
        $this->setIfExists('spouseGender', $data ?? [], null);
        $this->setIfExists('class', $data ?? [], null);
        $this->setIfExists('classIds', $data ?? [], null);
        $this->setIfExists('advisorName', $data ?? [], null);
        $this->setIfExists('advisorEmail', $data ?? [], null);
        $this->setIfExists('advisorInitials', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Id of the contact.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid Contact UUID.
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets typeContact
     *
     * @return string|null
     */
    public function getTypeContact()
    {
        return $this->container['typeContact'];
    }

    /**
     * Sets typeContact
     *
     * @param string|null $typeContact Type of the contact.
     *
     * @return self
     */
    public function setTypeContact($typeContact)
    {
        if (is_null($typeContact)) {
            throw new \InvalidArgumentException('non-nullable typeContact cannot be null');
        }
        $this->container['typeContact'] = $typeContact;

        return $this;
    }

    /**
     * Gets indOrg
     *
     * @return string|null
     */
    public function getIndOrg()
    {
        return $this->container['indOrg'];
    }

    /**
     * Sets indOrg
     *
     * @param string|null $indOrg Type INDIVIDUAL OR ORGANIZATION.
     *
     * @return self
     */
    public function setIndOrg($indOrg)
    {
        if (is_null($indOrg)) {
            throw new \InvalidArgumentException('non-nullable indOrg cannot be null');
        }
        $this->container['indOrg'] = $indOrg;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName Display name of the contact.
     *
     * @return self
     */
    public function setDisplayName($displayName)
    {
        if (is_null($displayName)) {
            throw new \InvalidArgumentException('non-nullable displayName cannot be null');
        }
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName First name of the contact.
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        if (is_null($firstName)) {
            throw new \InvalidArgumentException('non-nullable firstName cannot be null');
        }
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname Nickname of the contact.
     *
     * @return self
     */
    public function setNickname($nickname)
    {
        if (is_null($nickname)) {
            throw new \InvalidArgumentException('non-nullable nickname cannot be null');
        }
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets middleName
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middleName'];
    }

    /**
     * Sets middleName
     *
     * @param string|null $middleName Middle name of the contact.
     *
     * @return self
     */
    public function setMiddleName($middleName)
    {
        if (is_null($middleName)) {
            throw new \InvalidArgumentException('non-nullable middleName cannot be null');
        }
        $this->container['middleName'] = $middleName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName Last name of the contact.
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        if (is_null($lastName)) {
            throw new \InvalidArgumentException('non-nullable lastName cannot be null');
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets corporationName
     *
     * @return string|null
     */
    public function getCorporationName()
    {
        return $this->container['corporationName'];
    }

    /**
     * Sets corporationName
     *
     * @param string|null $corporationName First line of corporation name (Organization).
     *
     * @return self
     */
    public function setCorporationName($corporationName)
    {
        if (is_null($corporationName)) {
            throw new \InvalidArgumentException('non-nullable corporationName cannot be null');
        }
        $this->container['corporationName'] = $corporationName;

        return $this;
    }

    /**
     * Gets corporationNameLine2
     *
     * @return string|null
     */
    public function getCorporationNameLine2()
    {
        return $this->container['corporationNameLine2'];
    }

    /**
     * Sets corporationNameLine2
     *
     * @param string|null $corporationNameLine2 Second line of corporation name (Organization).
     *
     * @return self
     */
    public function setCorporationNameLine2($corporationNameLine2)
    {
        if (is_null($corporationNameLine2)) {
            throw new \InvalidArgumentException('non-nullable corporationNameLine2 cannot be null');
        }
        $this->container['corporationNameLine2'] = $corporationNameLine2;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return string|null
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param string|null $rank Rank of the contact. (Industrial Alliance only).
     *
     * @return self
     */
    public function setRank($rank)
    {
        if (is_null($rank)) {
            throw new \InvalidArgumentException('non-nullable rank cannot be null');
        }
        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets facebookLink
     *
     * @return string|null
     */
    public function getFacebookLink()
    {
        return $this->container['facebookLink'];
    }

    /**
     * Sets facebookLink
     *
     * @param string|null $facebookLink Facebook link.
     *
     * @return self
     */
    public function setFacebookLink($facebookLink)
    {
        if (is_null($facebookLink)) {
            throw new \InvalidArgumentException('non-nullable facebookLink cannot be null');
        }
        $this->container['facebookLink'] = $facebookLink;

        return $this;
    }

    /**
     * Gets twitterLink
     *
     * @return string|null
     */
    public function getTwitterLink()
    {
        return $this->container['twitterLink'];
    }

    /**
     * Sets twitterLink
     *
     * @param string|null $twitterLink Twitter link.
     *
     * @return self
     */
    public function setTwitterLink($twitterLink)
    {
        if (is_null($twitterLink)) {
            throw new \InvalidArgumentException('non-nullable twitterLink cannot be null');
        }
        $this->container['twitterLink'] = $twitterLink;

        return $this;
    }

    /**
     * Gets linkedinLink
     *
     * @return string|null
     */
    public function getLinkedinLink()
    {
        return $this->container['linkedinLink'];
    }

    /**
     * Sets linkedinLink
     *
     * @param string|null $linkedinLink LinkedIn link.
     *
     * @return self
     */
    public function setLinkedinLink($linkedinLink)
    {
        if (is_null($linkedinLink)) {
            throw new \InvalidArgumentException('non-nullable linkedinLink cannot be null');
        }
        $this->container['linkedinLink'] = $linkedinLink;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return int|null
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param int|null $avatar Avatar.
     *
     * @return self
     */
    public function setAvatar($avatar)
    {
        if (is_null($avatar)) {
            throw new \InvalidArgumentException('non-nullable avatar cannot be null');
        }
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets mainEmail
     *
     * @return string|null
     */
    public function getMainEmail()
    {
        return $this->container['mainEmail'];
    }

    /**
     * Sets mainEmail
     *
     * @param string|null $mainEmail Main email of the contact.
     *
     * @return self
     */
    public function setMainEmail($mainEmail)
    {
        if (is_null($mainEmail)) {
            throw new \InvalidArgumentException('non-nullable mainEmail cannot be null');
        }
        $this->container['mainEmail'] = $mainEmail;

        return $this;
    }

    /**
     * Gets mainPhone
     *
     * @return string|null
     */
    public function getMainPhone()
    {
        return $this->container['mainPhone'];
    }

    /**
     * Sets mainPhone
     *
     * @param string|null $mainPhone Main phone number.
     *
     * @return self
     */
    public function setMainPhone($mainPhone)
    {
        if (is_null($mainPhone)) {
            throw new \InvalidArgumentException('non-nullable mainPhone cannot be null');
        }
        $this->container['mainPhone'] = $mainPhone;

        return $this;
    }

    /**
     * Gets addressLine1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['addressLine1'];
    }

    /**
     * Sets addressLine1
     *
     * @param string|null $addressLine1 First line of address of the contact.
     *
     * @return self
     */
    public function setAddressLine1($addressLine1)
    {
        if (is_null($addressLine1)) {
            throw new \InvalidArgumentException('non-nullable addressLine1 cannot be null');
        }
        $this->container['addressLine1'] = $addressLine1;

        return $this;
    }

    /**
     * Gets addressLine2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['addressLine2'];
    }

    /**
     * Sets addressLine2
     *
     * @param string|null $addressLine2 Second line of address of the contact.
     *
     * @return self
     */
    public function setAddressLine2($addressLine2)
    {
        if (is_null($addressLine2)) {
            throw new \InvalidArgumentException('non-nullable addressLine2 cannot be null');
        }
        $this->container['addressLine2'] = $addressLine2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City of the contact.
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets stateProvince
     *
     * @return string|null
     */
    public function getStateProvince()
    {
        return $this->container['stateProvince'];
    }

    /**
     * Sets stateProvince
     *
     * @param string|null $stateProvince State or province of the contact.
     *
     * @return self
     */
    public function setStateProvince($stateProvince)
    {
        if (is_null($stateProvince)) {
            throw new \InvalidArgumentException('non-nullable stateProvince cannot be null');
        }
        $this->container['stateProvince'] = $stateProvince;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country of the contact.
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     *
     * @param string|null $postalCode PostalCode of the contact.
     *
     * @return self
     */
    public function setPostalCode($postalCode)
    {
        if (is_null($postalCode)) {
            throw new \InvalidArgumentException('non-nullable postalCode cannot be null');
        }
        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets civicNumber
     *
     * @return string|null
     */
    public function getCivicNumber()
    {
        return $this->container['civicNumber'];
    }

    /**
     * Sets civicNumber
     *
     * @param string|null $civicNumber Industrielle Alliance Only.
     *
     * @return self
     */
    public function setCivicNumber($civicNumber)
    {
        if (is_null($civicNumber)) {
            throw new \InvalidArgumentException('non-nullable civicNumber cannot be null');
        }
        $this->container['civicNumber'] = $civicNumber;

        return $this;
    }

    /**
     * Gets road
     *
     * @return string|null
     */
    public function getRoad()
    {
        return $this->container['road'];
    }

    /**
     * Sets road
     *
     * @param string|null $road Industrielle Alliance Only.
     *
     * @return self
     */
    public function setRoad($road)
    {
        if (is_null($road)) {
            throw new \InvalidArgumentException('non-nullable road cannot be null');
        }
        $this->container['road'] = $road;

        return $this;
    }

    /**
     * Gets extType
     *
     * @return string|null
     */
    public function getExtType()
    {
        return $this->container['extType'];
    }

    /**
     * Sets extType
     *
     * @param string|null $extType Industrielle Alliance Only.
     *
     * @return self
     */
    public function setExtType($extType)
    {
        if (is_null($extType)) {
            throw new \InvalidArgumentException('non-nullable extType cannot be null');
        }
        $this->container['extType'] = $extType;

        return $this;
    }

    /**
     * Gets extNumber
     *
     * @return string|null
     */
    public function getExtNumber()
    {
        return $this->container['extNumber'];
    }

    /**
     * Sets extNumber
     *
     * @param string|null $extNumber Industrielle Alliance Only.
     *
     * @return self
     */
    public function setExtNumber($extNumber)
    {
        if (is_null($extNumber)) {
            throw new \InvalidArgumentException('non-nullable extNumber cannot be null');
        }
        $this->container['extNumber'] = $extNumber;

        return $this;
    }

    /**
     * Gets birthdate
     *
     * @return string|null
     */
    public function getBirthdate()
    {
        return $this->container['birthdate'];
    }

    /**
     * Sets birthdate
     *
     * @param string|null $birthdate Birthdate.
     *
     * @return self
     */
    public function setBirthdate($birthdate)
    {
        if (is_null($birthdate)) {
            throw new \InvalidArgumentException('non-nullable birthdate cannot be null');
        }
        $this->container['birthdate'] = $birthdate;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender Gender of the contact. Either MALE or FEMALE.
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets customerNumber
     *
     * @return string|null
     */
    public function getCustomerNumber()
    {
        return $this->container['customerNumber'];
    }

    /**
     * Sets customerNumber
     *
     * @param string|null $customerNumber Customer Number.
     *
     * @return self
     */
    public function setCustomerNumber($customerNumber)
    {
        if (is_null($customerNumber)) {
            throw new \InvalidArgumentException('non-nullable customerNumber cannot be null');
        }
        $this->container['customerNumber'] = $customerNumber;

        return $this;
    }

    /**
     * Gets dateModified
     *
     * @return string|null
     * @deprecated
     */
    public function getDateModified()
    {
        return $this->container['dateModified'];
    }

    /**
     * Sets dateModified
     *
     * @param string|null $dateModified Date modified.
     *
     * @return self
     * @deprecated
     */
    public function setDateModified($dateModified)
    {
        if (is_null($dateModified)) {
            throw new \InvalidArgumentException('non-nullable dateModified cannot be null');
        }
        $this->container['dateModified'] = $dateModified;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return string|null
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param string|null $dateCreated Date created.
     *
     * @return self
     */
    public function setDateCreated($dateCreated)
    {
        if (is_null($dateCreated)) {
            throw new \InvalidArgumentException('non-nullable dateCreated cannot be null');
        }
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets lastUpdateDate
     *
     * @return string|null
     */
    public function getLastUpdateDate()
    {
        return $this->container['lastUpdateDate'];
    }

    /**
     * Sets lastUpdateDate
     *
     * @param string|null $lastUpdateDate Last update date.
     *
     * @return self
     */
    public function setLastUpdateDate($lastUpdateDate)
    {
        if (is_null($lastUpdateDate)) {
            throw new \InvalidArgumentException('non-nullable lastUpdateDate cannot be null');
        }
        $this->container['lastUpdateDate'] = $lastUpdateDate;

        return $this;
    }

    /**
     * Gets spouseId
     *
     * @return int|null
     */
    public function getSpouseId()
    {
        return $this->container['spouseId'];
    }

    /**
     * Sets spouseId
     *
     * @param int|null $spouseId Id of the spouse contact.
     *
     * @return self
     */
    public function setSpouseId($spouseId)
    {
        if (is_null($spouseId)) {
            throw new \InvalidArgumentException('non-nullable spouseId cannot be null');
        }
        $this->container['spouseId'] = $spouseId;

        return $this;
    }

    /**
     * Gets spouseDisplayName
     *
     * @return string|null
     */
    public function getSpouseDisplayName()
    {
        return $this->container['spouseDisplayName'];
    }

    /**
     * Sets spouseDisplayName
     *
     * @param string|null $spouseDisplayName Display name  of the spouse contact.
     *
     * @return self
     */
    public function setSpouseDisplayName($spouseDisplayName)
    {
        if (is_null($spouseDisplayName)) {
            throw new \InvalidArgumentException('non-nullable spouseDisplayName cannot be null');
        }
        $this->container['spouseDisplayName'] = $spouseDisplayName;

        return $this;
    }

    /**
     * Gets spouseFirstName
     *
     * @return string|null
     */
    public function getSpouseFirstName()
    {
        return $this->container['spouseFirstName'];
    }

    /**
     * Sets spouseFirstName
     *
     * @param string|null $spouseFirstName First name of the spouse contact.
     *
     * @return self
     */
    public function setSpouseFirstName($spouseFirstName)
    {
        if (is_null($spouseFirstName)) {
            throw new \InvalidArgumentException('non-nullable spouseFirstName cannot be null');
        }
        $this->container['spouseFirstName'] = $spouseFirstName;

        return $this;
    }

    /**
     * Gets spouseLastName
     *
     * @return string|null
     */
    public function getSpouseLastName()
    {
        return $this->container['spouseLastName'];
    }

    /**
     * Sets spouseLastName
     *
     * @param string|null $spouseLastName Last name of the spouse contact.
     *
     * @return self
     */
    public function setSpouseLastName($spouseLastName)
    {
        if (is_null($spouseLastName)) {
            throw new \InvalidArgumentException('non-nullable spouseLastName cannot be null');
        }
        $this->container['spouseLastName'] = $spouseLastName;

        return $this;
    }

    /**
     * Gets spouseBirthdate
     *
     * @return string|null
     */
    public function getSpouseBirthdate()
    {
        return $this->container['spouseBirthdate'];
    }

    /**
     * Sets spouseBirthdate
     *
     * @param string|null $spouseBirthdate Birthdate of the spouse contact.
     *
     * @return self
     */
    public function setSpouseBirthdate($spouseBirthdate)
    {
        if (is_null($spouseBirthdate)) {
            throw new \InvalidArgumentException('non-nullable spouseBirthdate cannot be null');
        }
        $this->container['spouseBirthdate'] = $spouseBirthdate;

        return $this;
    }

    /**
     * Gets spouseGender
     *
     * @return string|null
     */
    public function getSpouseGender()
    {
        return $this->container['spouseGender'];
    }

    /**
     * Sets spouseGender
     *
     * @param string|null $spouseGender Gender of the spouse. Either MALE or FEMALE.
     *
     * @return self
     */
    public function setSpouseGender($spouseGender)
    {
        if (is_null($spouseGender)) {
            throw new \InvalidArgumentException('non-nullable spouseGender cannot be null');
        }
        $this->container['spouseGender'] = $spouseGender;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string|null
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string|null $class Class (separated by ;).
     *
     * @return self
     */
    public function setClass($class)
    {
        if (is_null($class)) {
            throw new \InvalidArgumentException('non-nullable class cannot be null');
        }
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets classIds
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyInt[]|null
     */
    public function getClassIds()
    {
        return $this->container['classIds'];
    }

    /**
     * Sets classIds
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyInt[]|null $classIds Class ids.
     *
     * @return self
     */
    public function setClassIds($classIds)
    {
        if (is_null($classIds)) {
            throw new \InvalidArgumentException('non-nullable classIds cannot be null');
        }
        $this->container['classIds'] = $classIds;

        return $this;
    }

    /**
     * Gets advisorName
     *
     * @return string|null
     */
    public function getAdvisorName()
    {
        return $this->container['advisorName'];
    }

    /**
     * Sets advisorName
     *
     * @param string|null $advisorName Advisor Name.
     *
     * @return self
     */
    public function setAdvisorName($advisorName)
    {
        if (is_null($advisorName)) {
            throw new \InvalidArgumentException('non-nullable advisorName cannot be null');
        }
        $this->container['advisorName'] = $advisorName;

        return $this;
    }

    /**
     * Gets advisorEmail
     *
     * @return string|null
     */
    public function getAdvisorEmail()
    {
        return $this->container['advisorEmail'];
    }

    /**
     * Sets advisorEmail
     *
     * @param string|null $advisorEmail Advisor Email.
     *
     * @return self
     */
    public function setAdvisorEmail($advisorEmail)
    {
        if (is_null($advisorEmail)) {
            throw new \InvalidArgumentException('non-nullable advisorEmail cannot be null');
        }
        $this->container['advisorEmail'] = $advisorEmail;

        return $this;
    }

    /**
     * Gets advisorInitials
     *
     * @return string|null
     */
    public function getAdvisorInitials()
    {
        return $this->container['advisorInitials'];
    }

    /**
     * Sets advisorInitials
     *
     * @param string|null $advisorInitials Advisor initials.
     *
     * @return self
     */
    public function setAdvisorInitials($advisorInitials)
    {
        if (is_null($advisorInitials)) {
            throw new \InvalidArgumentException('non-nullable advisorInitials cannot be null');
        }
        $this->container['advisorInitials'] = $advisorInitials;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


