<?php
/**
 * KronosFinanceGetContactItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-equisoft4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * KronosFinanceGetContactItem Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class KronosFinanceGetContactItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'kronos.finance.GetContactItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'uuid' => 'string',
        'typeContact' => 'string',
        'indOrg' => 'string',
        'displayName' => 'string',
        'firstName' => 'string',
        'nickname' => 'string',
        'middleName' => 'string',
        'lastName' => 'string',
        'corporationName' => 'string',
        'corporationNameLine2' => 'string',
        'rank' => 'string',
        'facebookLink' => 'string',
        'twitterLink' => 'string',
        'linkedinLink' => 'string',
        'avatar' => 'int',
        'picture' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyContactPicture',
        'gender' => 'string',
        'sin' => 'string',
        'birthdate' => 'string',
        'smoker' => 'string',
        'smokerSince' => 'string',
        'addressHome' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress',
        'addressOffice' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress',
        'addressOther' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress',
        'phoneHome' => 'string',
        'phoneHomeSecond' => 'string',
        'phoneAssistant' => 'string',
        'phoneOffice' => 'string',
        'phoneOfficeSecond' => 'string',
        'phoneCell' => 'string',
        'phonePager' => 'string',
        'phoneFax' => 'string',
        'mainEmail' => 'string',
        'emailPersonal' => 'string',
        'webSite' => 'string',
        'emailBusiness' => 'string',
        'emailOther' => 'string',
        'notes' => 'string',
        'peculiarity' => 'string',
        'endFinancialYear' => 'string',
        'users' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyUser[]',
        'language' => 'string',
        'active' => 'string',
        'publish' => 'string',
        'title' => 'string',
        'suffix' => 'string',
        'civility' => 'string',
        'civilityId' => 'int',
        'personAddressed' => 'string',
        'organizationLine1' => 'string',
        'organizationLine2' => 'string',
        'department' => 'string',
        'customerNumber' => 'string',
        'addresses' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress[]',
        'phones' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyContactPhone[]',
        'emails' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyContactEmail[]',
        'webSites' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyContactWebSite[]',
        'birthPlace' => 'string',
        'nationality' => 'string',
        'orgDateCreated' => 'string',
        'orgDateClosed' => 'string',
        'dateEndFinancialYear' => 'string',
        'orgIdNo' => 'string',
        'orgFedNo' => 'string',
        'orgProvNo' => 'string',
        'orgStateId' => 'string',
        'orgEin' => 'string',
        'spouse' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyContactContact',
        'maritalStatus' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyContactMaritalStatus',
        'currentJob' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyContactJob',
        'links' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyContactContactLink[]',
        'class' => 'string',
        'classIds' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyInt[]',
        'group' => 'string',
        'groupIds' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyInt[]',
        'hobby' => 'string',
        'hobbyIds' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyInt[]',
        'origin' => 'string',
        'originIds' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyInt[]',
        'domain' => 'string',
        'domainIds' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyInt[]',
        'territory' => 'string',
        'territoryId' => 'int',
        'seg1' => 'string',
        'seg1Id' => 'int',
        'seg2' => 'string',
        'seg2Id' => 'int',
        'seg3' => 'string',
        'seg3Id' => 'int',
        'seg4' => 'string',
        'seg4Id' => 'int',
        'seg5' => 'string',
        'seg5Id' => 'int',
        'seg6' => 'string',
        'seg6Id' => 'int',
        'createdBy' => 'string',
        'createdOn' => 'string',
        'modifiedBy' => 'string',
        'modifiedOn' => 'string',
        'dateDecease' => 'string',
        'civilStatus' => 'string',
        'civilStatusSince' => 'string',
        'hin' => 'string',
        'advisor' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyUser',
        'sponsor' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyUser',
        'managers' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyUser[]',
        'jobs' => '\Equisoft\SDK\EquisoftConnect\Model\KronosFinanceJob[]',
        'generalInsurances' => '\Equisoft\SDK\EquisoftConnect\Model\KronosFinanceGeneralInsurance[]',
        'passport' => 'string',
        'passportExpiration' => 'string',
        'drivingLicense' => 'string',
        'drivingLicenseExpiration' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'uuid' => null,
        'typeContact' => null,
        'indOrg' => null,
        'displayName' => null,
        'firstName' => null,
        'nickname' => null,
        'middleName' => null,
        'lastName' => null,
        'corporationName' => null,
        'corporationNameLine2' => null,
        'rank' => null,
        'facebookLink' => null,
        'twitterLink' => null,
        'linkedinLink' => null,
        'avatar' => null,
        'picture' => null,
        'gender' => null,
        'sin' => null,
        'birthdate' => null,
        'smoker' => null,
        'smokerSince' => null,
        'addressHome' => null,
        'addressOffice' => null,
        'addressOther' => null,
        'phoneHome' => null,
        'phoneHomeSecond' => null,
        'phoneAssistant' => null,
        'phoneOffice' => null,
        'phoneOfficeSecond' => null,
        'phoneCell' => null,
        'phonePager' => null,
        'phoneFax' => null,
        'mainEmail' => null,
        'emailPersonal' => null,
        'webSite' => null,
        'emailBusiness' => null,
        'emailOther' => null,
        'notes' => null,
        'peculiarity' => null,
        'endFinancialYear' => null,
        'users' => null,
        'language' => null,
        'active' => null,
        'publish' => null,
        'title' => null,
        'suffix' => null,
        'civility' => null,
        'civilityId' => null,
        'personAddressed' => null,
        'organizationLine1' => null,
        'organizationLine2' => null,
        'department' => null,
        'customerNumber' => null,
        'addresses' => null,
        'phones' => null,
        'emails' => null,
        'webSites' => null,
        'birthPlace' => null,
        'nationality' => null,
        'orgDateCreated' => null,
        'orgDateClosed' => null,
        'dateEndFinancialYear' => null,
        'orgIdNo' => null,
        'orgFedNo' => null,
        'orgProvNo' => null,
        'orgStateId' => null,
        'orgEin' => null,
        'spouse' => null,
        'maritalStatus' => null,
        'currentJob' => null,
        'links' => null,
        'class' => null,
        'classIds' => null,
        'group' => null,
        'groupIds' => null,
        'hobby' => null,
        'hobbyIds' => null,
        'origin' => null,
        'originIds' => null,
        'domain' => null,
        'domainIds' => null,
        'territory' => null,
        'territoryId' => null,
        'seg1' => null,
        'seg1Id' => null,
        'seg2' => null,
        'seg2Id' => null,
        'seg3' => null,
        'seg3Id' => null,
        'seg4' => null,
        'seg4Id' => null,
        'seg5' => null,
        'seg5Id' => null,
        'seg6' => null,
        'seg6Id' => null,
        'createdBy' => null,
        'createdOn' => null,
        'modifiedBy' => null,
        'modifiedOn' => null,
        'dateDecease' => null,
        'civilStatus' => null,
        'civilStatusSince' => null,
        'hin' => null,
        'advisor' => null,
        'sponsor' => null,
        'managers' => null,
        'jobs' => null,
        'generalInsurances' => null,
        'passport' => null,
        'passportExpiration' => null,
        'drivingLicense' => null,
        'drivingLicenseExpiration' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'uuid' => false,
		'typeContact' => false,
		'indOrg' => false,
		'displayName' => false,
		'firstName' => false,
		'nickname' => false,
		'middleName' => false,
		'lastName' => false,
		'corporationName' => false,
		'corporationNameLine2' => false,
		'rank' => false,
		'facebookLink' => false,
		'twitterLink' => false,
		'linkedinLink' => false,
		'avatar' => false,
		'picture' => false,
		'gender' => false,
		'sin' => false,
		'birthdate' => false,
		'smoker' => false,
		'smokerSince' => false,
		'addressHome' => false,
		'addressOffice' => false,
		'addressOther' => false,
		'phoneHome' => false,
		'phoneHomeSecond' => false,
		'phoneAssistant' => false,
		'phoneOffice' => false,
		'phoneOfficeSecond' => false,
		'phoneCell' => false,
		'phonePager' => false,
		'phoneFax' => false,
		'mainEmail' => false,
		'emailPersonal' => false,
		'webSite' => false,
		'emailBusiness' => false,
		'emailOther' => false,
		'notes' => false,
		'peculiarity' => false,
		'endFinancialYear' => false,
		'users' => false,
		'language' => false,
		'active' => false,
		'publish' => false,
		'title' => false,
		'suffix' => false,
		'civility' => false,
		'civilityId' => false,
		'personAddressed' => false,
		'organizationLine1' => false,
		'organizationLine2' => false,
		'department' => false,
		'customerNumber' => false,
		'addresses' => false,
		'phones' => false,
		'emails' => false,
		'webSites' => false,
		'birthPlace' => false,
		'nationality' => false,
		'orgDateCreated' => false,
		'orgDateClosed' => false,
		'dateEndFinancialYear' => false,
		'orgIdNo' => false,
		'orgFedNo' => false,
		'orgProvNo' => false,
		'orgStateId' => false,
		'orgEin' => false,
		'spouse' => false,
		'maritalStatus' => false,
		'currentJob' => false,
		'links' => false,
		'class' => false,
		'classIds' => false,
		'group' => false,
		'groupIds' => false,
		'hobby' => false,
		'hobbyIds' => false,
		'origin' => false,
		'originIds' => false,
		'domain' => false,
		'domainIds' => false,
		'territory' => false,
		'territoryId' => false,
		'seg1' => false,
		'seg1Id' => false,
		'seg2' => false,
		'seg2Id' => false,
		'seg3' => false,
		'seg3Id' => false,
		'seg4' => false,
		'seg4Id' => false,
		'seg5' => false,
		'seg5Id' => false,
		'seg6' => false,
		'seg6Id' => false,
		'createdBy' => false,
		'createdOn' => false,
		'modifiedBy' => false,
		'modifiedOn' => false,
		'dateDecease' => false,
		'civilStatus' => false,
		'civilStatusSince' => false,
		'hin' => false,
		'advisor' => false,
		'sponsor' => false,
		'managers' => false,
		'jobs' => false,
		'generalInsurances' => false,
		'passport' => false,
		'passportExpiration' => false,
		'drivingLicense' => false,
		'drivingLicenseExpiration' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'uuid' => 'uuid',
        'typeContact' => 'typeContact',
        'indOrg' => 'indOrg',
        'displayName' => 'displayName',
        'firstName' => 'firstName',
        'nickname' => 'nickname',
        'middleName' => 'middleName',
        'lastName' => 'lastName',
        'corporationName' => 'corporationName',
        'corporationNameLine2' => 'corporationNameLine2',
        'rank' => 'rank',
        'facebookLink' => 'facebookLink',
        'twitterLink' => 'twitterLink',
        'linkedinLink' => 'linkedinLink',
        'avatar' => 'avatar',
        'picture' => 'picture',
        'gender' => 'gender',
        'sin' => 'sin',
        'birthdate' => 'birthdate',
        'smoker' => 'smoker',
        'smokerSince' => 'smokerSince',
        'addressHome' => 'addressHome',
        'addressOffice' => 'addressOffice',
        'addressOther' => 'addressOther',
        'phoneHome' => 'phoneHome',
        'phoneHomeSecond' => 'phoneHomeSecond',
        'phoneAssistant' => 'phoneAssistant',
        'phoneOffice' => 'phoneOffice',
        'phoneOfficeSecond' => 'phoneOfficeSecond',
        'phoneCell' => 'phoneCell',
        'phonePager' => 'phonePager',
        'phoneFax' => 'phoneFax',
        'mainEmail' => 'mainEmail',
        'emailPersonal' => 'emailPersonal',
        'webSite' => 'webSite',
        'emailBusiness' => 'emailBusiness',
        'emailOther' => 'emailOther',
        'notes' => 'notes',
        'peculiarity' => 'peculiarity',
        'endFinancialYear' => 'endFinancialYear',
        'users' => 'users',
        'language' => 'language',
        'active' => 'active',
        'publish' => 'publish',
        'title' => 'title',
        'suffix' => 'suffix',
        'civility' => 'civility',
        'civilityId' => 'civilityId',
        'personAddressed' => 'personAddressed',
        'organizationLine1' => 'organizationLine1',
        'organizationLine2' => 'organizationLine2',
        'department' => 'department',
        'customerNumber' => 'customerNumber',
        'addresses' => 'addresses',
        'phones' => 'phones',
        'emails' => 'emails',
        'webSites' => 'webSites',
        'birthPlace' => 'birthPlace',
        'nationality' => 'nationality',
        'orgDateCreated' => 'orgDateCreated',
        'orgDateClosed' => 'orgDateClosed',
        'dateEndFinancialYear' => 'dateEndFinancialYear',
        'orgIdNo' => 'orgIdNo',
        'orgFedNo' => 'orgFedNo',
        'orgProvNo' => 'orgProvNo',
        'orgStateId' => 'orgStateId',
        'orgEin' => 'orgEin',
        'spouse' => 'spouse',
        'maritalStatus' => 'maritalStatus',
        'currentJob' => 'currentJob',
        'links' => 'links',
        'class' => 'class',
        'classIds' => 'classIds',
        'group' => 'group',
        'groupIds' => 'groupIds',
        'hobby' => 'hobby',
        'hobbyIds' => 'hobbyIds',
        'origin' => 'origin',
        'originIds' => 'originIds',
        'domain' => 'domain',
        'domainIds' => 'domainIds',
        'territory' => 'territory',
        'territoryId' => 'territoryId',
        'seg1' => 'seg1',
        'seg1Id' => 'seg1Id',
        'seg2' => 'seg2',
        'seg2Id' => 'seg2Id',
        'seg3' => 'seg3',
        'seg3Id' => 'seg3Id',
        'seg4' => 'seg4',
        'seg4Id' => 'seg4Id',
        'seg5' => 'seg5',
        'seg5Id' => 'seg5Id',
        'seg6' => 'seg6',
        'seg6Id' => 'seg6Id',
        'createdBy' => 'createdBy',
        'createdOn' => 'createdOn',
        'modifiedBy' => 'modifiedBy',
        'modifiedOn' => 'modifiedOn',
        'dateDecease' => 'dateDecease',
        'civilStatus' => 'civilStatus',
        'civilStatusSince' => 'civilStatusSince',
        'hin' => 'hin',
        'advisor' => 'advisor',
        'sponsor' => 'sponsor',
        'managers' => 'managers',
        'jobs' => 'jobs',
        'generalInsurances' => 'generalInsurances',
        'passport' => 'passport',
        'passportExpiration' => 'passportExpiration',
        'drivingLicense' => 'drivingLicense',
        'drivingLicenseExpiration' => 'drivingLicenseExpiration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'uuid' => 'setUuid',
        'typeContact' => 'setTypeContact',
        'indOrg' => 'setIndOrg',
        'displayName' => 'setDisplayName',
        'firstName' => 'setFirstName',
        'nickname' => 'setNickname',
        'middleName' => 'setMiddleName',
        'lastName' => 'setLastName',
        'corporationName' => 'setCorporationName',
        'corporationNameLine2' => 'setCorporationNameLine2',
        'rank' => 'setRank',
        'facebookLink' => 'setFacebookLink',
        'twitterLink' => 'setTwitterLink',
        'linkedinLink' => 'setLinkedinLink',
        'avatar' => 'setAvatar',
        'picture' => 'setPicture',
        'gender' => 'setGender',
        'sin' => 'setSin',
        'birthdate' => 'setBirthdate',
        'smoker' => 'setSmoker',
        'smokerSince' => 'setSmokerSince',
        'addressHome' => 'setAddressHome',
        'addressOffice' => 'setAddressOffice',
        'addressOther' => 'setAddressOther',
        'phoneHome' => 'setPhoneHome',
        'phoneHomeSecond' => 'setPhoneHomeSecond',
        'phoneAssistant' => 'setPhoneAssistant',
        'phoneOffice' => 'setPhoneOffice',
        'phoneOfficeSecond' => 'setPhoneOfficeSecond',
        'phoneCell' => 'setPhoneCell',
        'phonePager' => 'setPhonePager',
        'phoneFax' => 'setPhoneFax',
        'mainEmail' => 'setMainEmail',
        'emailPersonal' => 'setEmailPersonal',
        'webSite' => 'setWebSite',
        'emailBusiness' => 'setEmailBusiness',
        'emailOther' => 'setEmailOther',
        'notes' => 'setNotes',
        'peculiarity' => 'setPeculiarity',
        'endFinancialYear' => 'setEndFinancialYear',
        'users' => 'setUsers',
        'language' => 'setLanguage',
        'active' => 'setActive',
        'publish' => 'setPublish',
        'title' => 'setTitle',
        'suffix' => 'setSuffix',
        'civility' => 'setCivility',
        'civilityId' => 'setCivilityId',
        'personAddressed' => 'setPersonAddressed',
        'organizationLine1' => 'setOrganizationLine1',
        'organizationLine2' => 'setOrganizationLine2',
        'department' => 'setDepartment',
        'customerNumber' => 'setCustomerNumber',
        'addresses' => 'setAddresses',
        'phones' => 'setPhones',
        'emails' => 'setEmails',
        'webSites' => 'setWebSites',
        'birthPlace' => 'setBirthPlace',
        'nationality' => 'setNationality',
        'orgDateCreated' => 'setOrgDateCreated',
        'orgDateClosed' => 'setOrgDateClosed',
        'dateEndFinancialYear' => 'setDateEndFinancialYear',
        'orgIdNo' => 'setOrgIdNo',
        'orgFedNo' => 'setOrgFedNo',
        'orgProvNo' => 'setOrgProvNo',
        'orgStateId' => 'setOrgStateId',
        'orgEin' => 'setOrgEin',
        'spouse' => 'setSpouse',
        'maritalStatus' => 'setMaritalStatus',
        'currentJob' => 'setCurrentJob',
        'links' => 'setLinks',
        'class' => 'setClass',
        'classIds' => 'setClassIds',
        'group' => 'setGroup',
        'groupIds' => 'setGroupIds',
        'hobby' => 'setHobby',
        'hobbyIds' => 'setHobbyIds',
        'origin' => 'setOrigin',
        'originIds' => 'setOriginIds',
        'domain' => 'setDomain',
        'domainIds' => 'setDomainIds',
        'territory' => 'setTerritory',
        'territoryId' => 'setTerritoryId',
        'seg1' => 'setSeg1',
        'seg1Id' => 'setSeg1Id',
        'seg2' => 'setSeg2',
        'seg2Id' => 'setSeg2Id',
        'seg3' => 'setSeg3',
        'seg3Id' => 'setSeg3Id',
        'seg4' => 'setSeg4',
        'seg4Id' => 'setSeg4Id',
        'seg5' => 'setSeg5',
        'seg5Id' => 'setSeg5Id',
        'seg6' => 'setSeg6',
        'seg6Id' => 'setSeg6Id',
        'createdBy' => 'setCreatedBy',
        'createdOn' => 'setCreatedOn',
        'modifiedBy' => 'setModifiedBy',
        'modifiedOn' => 'setModifiedOn',
        'dateDecease' => 'setDateDecease',
        'civilStatus' => 'setCivilStatus',
        'civilStatusSince' => 'setCivilStatusSince',
        'hin' => 'setHin',
        'advisor' => 'setAdvisor',
        'sponsor' => 'setSponsor',
        'managers' => 'setManagers',
        'jobs' => 'setJobs',
        'generalInsurances' => 'setGeneralInsurances',
        'passport' => 'setPassport',
        'passportExpiration' => 'setPassportExpiration',
        'drivingLicense' => 'setDrivingLicense',
        'drivingLicenseExpiration' => 'setDrivingLicenseExpiration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'uuid' => 'getUuid',
        'typeContact' => 'getTypeContact',
        'indOrg' => 'getIndOrg',
        'displayName' => 'getDisplayName',
        'firstName' => 'getFirstName',
        'nickname' => 'getNickname',
        'middleName' => 'getMiddleName',
        'lastName' => 'getLastName',
        'corporationName' => 'getCorporationName',
        'corporationNameLine2' => 'getCorporationNameLine2',
        'rank' => 'getRank',
        'facebookLink' => 'getFacebookLink',
        'twitterLink' => 'getTwitterLink',
        'linkedinLink' => 'getLinkedinLink',
        'avatar' => 'getAvatar',
        'picture' => 'getPicture',
        'gender' => 'getGender',
        'sin' => 'getSin',
        'birthdate' => 'getBirthdate',
        'smoker' => 'getSmoker',
        'smokerSince' => 'getSmokerSince',
        'addressHome' => 'getAddressHome',
        'addressOffice' => 'getAddressOffice',
        'addressOther' => 'getAddressOther',
        'phoneHome' => 'getPhoneHome',
        'phoneHomeSecond' => 'getPhoneHomeSecond',
        'phoneAssistant' => 'getPhoneAssistant',
        'phoneOffice' => 'getPhoneOffice',
        'phoneOfficeSecond' => 'getPhoneOfficeSecond',
        'phoneCell' => 'getPhoneCell',
        'phonePager' => 'getPhonePager',
        'phoneFax' => 'getPhoneFax',
        'mainEmail' => 'getMainEmail',
        'emailPersonal' => 'getEmailPersonal',
        'webSite' => 'getWebSite',
        'emailBusiness' => 'getEmailBusiness',
        'emailOther' => 'getEmailOther',
        'notes' => 'getNotes',
        'peculiarity' => 'getPeculiarity',
        'endFinancialYear' => 'getEndFinancialYear',
        'users' => 'getUsers',
        'language' => 'getLanguage',
        'active' => 'getActive',
        'publish' => 'getPublish',
        'title' => 'getTitle',
        'suffix' => 'getSuffix',
        'civility' => 'getCivility',
        'civilityId' => 'getCivilityId',
        'personAddressed' => 'getPersonAddressed',
        'organizationLine1' => 'getOrganizationLine1',
        'organizationLine2' => 'getOrganizationLine2',
        'department' => 'getDepartment',
        'customerNumber' => 'getCustomerNumber',
        'addresses' => 'getAddresses',
        'phones' => 'getPhones',
        'emails' => 'getEmails',
        'webSites' => 'getWebSites',
        'birthPlace' => 'getBirthPlace',
        'nationality' => 'getNationality',
        'orgDateCreated' => 'getOrgDateCreated',
        'orgDateClosed' => 'getOrgDateClosed',
        'dateEndFinancialYear' => 'getDateEndFinancialYear',
        'orgIdNo' => 'getOrgIdNo',
        'orgFedNo' => 'getOrgFedNo',
        'orgProvNo' => 'getOrgProvNo',
        'orgStateId' => 'getOrgStateId',
        'orgEin' => 'getOrgEin',
        'spouse' => 'getSpouse',
        'maritalStatus' => 'getMaritalStatus',
        'currentJob' => 'getCurrentJob',
        'links' => 'getLinks',
        'class' => 'getClass',
        'classIds' => 'getClassIds',
        'group' => 'getGroup',
        'groupIds' => 'getGroupIds',
        'hobby' => 'getHobby',
        'hobbyIds' => 'getHobbyIds',
        'origin' => 'getOrigin',
        'originIds' => 'getOriginIds',
        'domain' => 'getDomain',
        'domainIds' => 'getDomainIds',
        'territory' => 'getTerritory',
        'territoryId' => 'getTerritoryId',
        'seg1' => 'getSeg1',
        'seg1Id' => 'getSeg1Id',
        'seg2' => 'getSeg2',
        'seg2Id' => 'getSeg2Id',
        'seg3' => 'getSeg3',
        'seg3Id' => 'getSeg3Id',
        'seg4' => 'getSeg4',
        'seg4Id' => 'getSeg4Id',
        'seg5' => 'getSeg5',
        'seg5Id' => 'getSeg5Id',
        'seg6' => 'getSeg6',
        'seg6Id' => 'getSeg6Id',
        'createdBy' => 'getCreatedBy',
        'createdOn' => 'getCreatedOn',
        'modifiedBy' => 'getModifiedBy',
        'modifiedOn' => 'getModifiedOn',
        'dateDecease' => 'getDateDecease',
        'civilStatus' => 'getCivilStatus',
        'civilStatusSince' => 'getCivilStatusSince',
        'hin' => 'getHin',
        'advisor' => 'getAdvisor',
        'sponsor' => 'getSponsor',
        'managers' => 'getManagers',
        'jobs' => 'getJobs',
        'generalInsurances' => 'getGeneralInsurances',
        'passport' => 'getPassport',
        'passportExpiration' => 'getPassportExpiration',
        'drivingLicense' => 'getDrivingLicense',
        'drivingLicenseExpiration' => 'getDrivingLicenseExpiration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SMOKER_FALSE = 'false';
    public const SMOKER_TRUE = 'true';
    public const SMOKER_EMPTY = '';
    public const SMOKER_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmokerAllowableValues()
    {
        return [
            self::SMOKER_FALSE,
            self::SMOKER_TRUE,
            self::SMOKER_EMPTY,
            self::SMOKER_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('typeContact', $data ?? [], null);
        $this->setIfExists('indOrg', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('nickname', $data ?? [], null);
        $this->setIfExists('middleName', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('corporationName', $data ?? [], null);
        $this->setIfExists('corporationNameLine2', $data ?? [], null);
        $this->setIfExists('rank', $data ?? [], null);
        $this->setIfExists('facebookLink', $data ?? [], null);
        $this->setIfExists('twitterLink', $data ?? [], null);
        $this->setIfExists('linkedinLink', $data ?? [], null);
        $this->setIfExists('avatar', $data ?? [], null);
        $this->setIfExists('picture', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('sin', $data ?? [], null);
        $this->setIfExists('birthdate', $data ?? [], null);
        $this->setIfExists('smoker', $data ?? [], null);
        $this->setIfExists('smokerSince', $data ?? [], null);
        $this->setIfExists('addressHome', $data ?? [], null);
        $this->setIfExists('addressOffice', $data ?? [], null);
        $this->setIfExists('addressOther', $data ?? [], null);
        $this->setIfExists('phoneHome', $data ?? [], null);
        $this->setIfExists('phoneHomeSecond', $data ?? [], null);
        $this->setIfExists('phoneAssistant', $data ?? [], null);
        $this->setIfExists('phoneOffice', $data ?? [], null);
        $this->setIfExists('phoneOfficeSecond', $data ?? [], null);
        $this->setIfExists('phoneCell', $data ?? [], null);
        $this->setIfExists('phonePager', $data ?? [], null);
        $this->setIfExists('phoneFax', $data ?? [], null);
        $this->setIfExists('mainEmail', $data ?? [], null);
        $this->setIfExists('emailPersonal', $data ?? [], null);
        $this->setIfExists('webSite', $data ?? [], null);
        $this->setIfExists('emailBusiness', $data ?? [], null);
        $this->setIfExists('emailOther', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('peculiarity', $data ?? [], null);
        $this->setIfExists('endFinancialYear', $data ?? [], null);
        $this->setIfExists('users', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('publish', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('civility', $data ?? [], null);
        $this->setIfExists('civilityId', $data ?? [], null);
        $this->setIfExists('personAddressed', $data ?? [], null);
        $this->setIfExists('organizationLine1', $data ?? [], null);
        $this->setIfExists('organizationLine2', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('customerNumber', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('phones', $data ?? [], null);
        $this->setIfExists('emails', $data ?? [], null);
        $this->setIfExists('webSites', $data ?? [], null);
        $this->setIfExists('birthPlace', $data ?? [], null);
        $this->setIfExists('nationality', $data ?? [], null);
        $this->setIfExists('orgDateCreated', $data ?? [], null);
        $this->setIfExists('orgDateClosed', $data ?? [], null);
        $this->setIfExists('dateEndFinancialYear', $data ?? [], null);
        $this->setIfExists('orgIdNo', $data ?? [], null);
        $this->setIfExists('orgFedNo', $data ?? [], null);
        $this->setIfExists('orgProvNo', $data ?? [], null);
        $this->setIfExists('orgStateId', $data ?? [], null);
        $this->setIfExists('orgEin', $data ?? [], null);
        $this->setIfExists('spouse', $data ?? [], null);
        $this->setIfExists('maritalStatus', $data ?? [], null);
        $this->setIfExists('currentJob', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('class', $data ?? [], null);
        $this->setIfExists('classIds', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('groupIds', $data ?? [], null);
        $this->setIfExists('hobby', $data ?? [], null);
        $this->setIfExists('hobbyIds', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('originIds', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('domainIds', $data ?? [], null);
        $this->setIfExists('territory', $data ?? [], null);
        $this->setIfExists('territoryId', $data ?? [], null);
        $this->setIfExists('seg1', $data ?? [], null);
        $this->setIfExists('seg1Id', $data ?? [], null);
        $this->setIfExists('seg2', $data ?? [], null);
        $this->setIfExists('seg2Id', $data ?? [], null);
        $this->setIfExists('seg3', $data ?? [], null);
        $this->setIfExists('seg3Id', $data ?? [], null);
        $this->setIfExists('seg4', $data ?? [], null);
        $this->setIfExists('seg4Id', $data ?? [], null);
        $this->setIfExists('seg5', $data ?? [], null);
        $this->setIfExists('seg5Id', $data ?? [], null);
        $this->setIfExists('seg6', $data ?? [], null);
        $this->setIfExists('seg6Id', $data ?? [], null);
        $this->setIfExists('createdBy', $data ?? [], null);
        $this->setIfExists('createdOn', $data ?? [], null);
        $this->setIfExists('modifiedBy', $data ?? [], null);
        $this->setIfExists('modifiedOn', $data ?? [], null);
        $this->setIfExists('dateDecease', $data ?? [], null);
        $this->setIfExists('civilStatus', $data ?? [], null);
        $this->setIfExists('civilStatusSince', $data ?? [], null);
        $this->setIfExists('hin', $data ?? [], null);
        $this->setIfExists('advisor', $data ?? [], null);
        $this->setIfExists('sponsor', $data ?? [], null);
        $this->setIfExists('managers', $data ?? [], null);
        $this->setIfExists('jobs', $data ?? [], null);
        $this->setIfExists('generalInsurances', $data ?? [], null);
        $this->setIfExists('passport', $data ?? [], null);
        $this->setIfExists('passportExpiration', $data ?? [], null);
        $this->setIfExists('drivingLicense', $data ?? [], null);
        $this->setIfExists('drivingLicenseExpiration', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSmokerAllowableValues();
        if (!is_null($this->container['smoker']) && !in_array($this->container['smoker'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'smoker', must be one of '%s'",
                $this->container['smoker'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique id.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid Contact UUID.
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets typeContact
     *
     * @return string|null
     */
    public function getTypeContact()
    {
        return $this->container['typeContact'];
    }

    /**
     * Sets typeContact
     *
     * @param string|null $typeContact Type of the contact.
     *
     * @return self
     */
    public function setTypeContact($typeContact)
    {
        if (is_null($typeContact)) {
            throw new \InvalidArgumentException('non-nullable typeContact cannot be null');
        }
        $this->container['typeContact'] = $typeContact;

        return $this;
    }

    /**
     * Gets indOrg
     *
     * @return string|null
     */
    public function getIndOrg()
    {
        return $this->container['indOrg'];
    }

    /**
     * Sets indOrg
     *
     * @param string|null $indOrg Type INDIVIDUAL OR ORGANIZATION.
     *
     * @return self
     */
    public function setIndOrg($indOrg)
    {
        if (is_null($indOrg)) {
            throw new \InvalidArgumentException('non-nullable indOrg cannot be null');
        }
        $this->container['indOrg'] = $indOrg;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName Display name of the contact.
     *
     * @return self
     */
    public function setDisplayName($displayName)
    {
        if (is_null($displayName)) {
            throw new \InvalidArgumentException('non-nullable displayName cannot be null');
        }
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName First name of the contact.
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        if (is_null($firstName)) {
            throw new \InvalidArgumentException('non-nullable firstName cannot be null');
        }
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname Nickname of the contact.
     *
     * @return self
     */
    public function setNickname($nickname)
    {
        if (is_null($nickname)) {
            throw new \InvalidArgumentException('non-nullable nickname cannot be null');
        }
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets middleName
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middleName'];
    }

    /**
     * Sets middleName
     *
     * @param string|null $middleName Middle name of the contact.
     *
     * @return self
     */
    public function setMiddleName($middleName)
    {
        if (is_null($middleName)) {
            throw new \InvalidArgumentException('non-nullable middleName cannot be null');
        }
        $this->container['middleName'] = $middleName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName Last name of the contact.
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        if (is_null($lastName)) {
            throw new \InvalidArgumentException('non-nullable lastName cannot be null');
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets corporationName
     *
     * @return string|null
     */
    public function getCorporationName()
    {
        return $this->container['corporationName'];
    }

    /**
     * Sets corporationName
     *
     * @param string|null $corporationName First line of corporation name (Organization).
     *
     * @return self
     */
    public function setCorporationName($corporationName)
    {
        if (is_null($corporationName)) {
            throw new \InvalidArgumentException('non-nullable corporationName cannot be null');
        }
        $this->container['corporationName'] = $corporationName;

        return $this;
    }

    /**
     * Gets corporationNameLine2
     *
     * @return string|null
     */
    public function getCorporationNameLine2()
    {
        return $this->container['corporationNameLine2'];
    }

    /**
     * Sets corporationNameLine2
     *
     * @param string|null $corporationNameLine2 Second line of corporation name (Organization).
     *
     * @return self
     */
    public function setCorporationNameLine2($corporationNameLine2)
    {
        if (is_null($corporationNameLine2)) {
            throw new \InvalidArgumentException('non-nullable corporationNameLine2 cannot be null');
        }
        $this->container['corporationNameLine2'] = $corporationNameLine2;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return string|null
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param string|null $rank Rank of the contact. (Industrial Alliance only).
     *
     * @return self
     */
    public function setRank($rank)
    {
        if (is_null($rank)) {
            throw new \InvalidArgumentException('non-nullable rank cannot be null');
        }
        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets facebookLink
     *
     * @return string|null
     */
    public function getFacebookLink()
    {
        return $this->container['facebookLink'];
    }

    /**
     * Sets facebookLink
     *
     * @param string|null $facebookLink Facebook link.
     *
     * @return self
     */
    public function setFacebookLink($facebookLink)
    {
        if (is_null($facebookLink)) {
            throw new \InvalidArgumentException('non-nullable facebookLink cannot be null');
        }
        $this->container['facebookLink'] = $facebookLink;

        return $this;
    }

    /**
     * Gets twitterLink
     *
     * @return string|null
     */
    public function getTwitterLink()
    {
        return $this->container['twitterLink'];
    }

    /**
     * Sets twitterLink
     *
     * @param string|null $twitterLink Twitter link.
     *
     * @return self
     */
    public function setTwitterLink($twitterLink)
    {
        if (is_null($twitterLink)) {
            throw new \InvalidArgumentException('non-nullable twitterLink cannot be null');
        }
        $this->container['twitterLink'] = $twitterLink;

        return $this;
    }

    /**
     * Gets linkedinLink
     *
     * @return string|null
     */
    public function getLinkedinLink()
    {
        return $this->container['linkedinLink'];
    }

    /**
     * Sets linkedinLink
     *
     * @param string|null $linkedinLink LinkedIn link.
     *
     * @return self
     */
    public function setLinkedinLink($linkedinLink)
    {
        if (is_null($linkedinLink)) {
            throw new \InvalidArgumentException('non-nullable linkedinLink cannot be null');
        }
        $this->container['linkedinLink'] = $linkedinLink;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return int|null
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param int|null $avatar Avatar.
     *
     * @return self
     */
    public function setAvatar($avatar)
    {
        if (is_null($avatar)) {
            throw new \InvalidArgumentException('non-nullable avatar cannot be null');
        }
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyContactPicture|null
     */
    public function getPicture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyContactPicture|null $picture picture
     *
     * @return self
     */
    public function setPicture($picture)
    {
        if (is_null($picture)) {
            throw new \InvalidArgumentException('non-nullable picture cannot be null');
        }
        $this->container['picture'] = $picture;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender Gender of the contact. Either MALE, FEMALE or UNKNOWN.
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets sin
     *
     * @return string|null
     */
    public function getSin()
    {
        return $this->container['sin'];
    }

    /**
     * Sets sin
     *
     * @param string|null $sin Sin of the contact.
     *
     * @return self
     */
    public function setSin($sin)
    {
        if (is_null($sin)) {
            throw new \InvalidArgumentException('non-nullable sin cannot be null');
        }
        $this->container['sin'] = $sin;

        return $this;
    }

    /**
     * Gets birthdate
     *
     * @return string|null
     */
    public function getBirthdate()
    {
        return $this->container['birthdate'];
    }

    /**
     * Sets birthdate
     *
     * @param string|null $birthdate Birthdate of the contact.
     *
     * @return self
     */
    public function setBirthdate($birthdate)
    {
        if (is_null($birthdate)) {
            throw new \InvalidArgumentException('non-nullable birthdate cannot be null');
        }
        $this->container['birthdate'] = $birthdate;

        return $this;
    }

    /**
     * Gets smoker
     *
     * @return string|null
     */
    public function getSmoker()
    {
        return $this->container['smoker'];
    }

    /**
     * Sets smoker
     *
     * @param string|null $smoker Smoker status.
     *
     * @return self
     */
    public function setSmoker($smoker)
    {
        if (is_null($smoker)) {
            throw new \InvalidArgumentException('non-nullable smoker cannot be null');
        }
        $allowedValues = $this->getSmokerAllowableValues();
        if (!in_array($smoker, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'smoker', must be one of '%s'",
                    $smoker,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['smoker'] = $smoker;

        return $this;
    }

    /**
     * Gets smokerSince
     *
     * @return string|null
     */
    public function getSmokerSince()
    {
        return $this->container['smokerSince'];
    }

    /**
     * Sets smokerSince
     *
     * @param string|null $smokerSince Date the contact started/stopped smoking.
     *
     * @return self
     */
    public function setSmokerSince($smokerSince)
    {
        if (is_null($smokerSince)) {
            throw new \InvalidArgumentException('non-nullable smokerSince cannot be null');
        }
        $this->container['smokerSince'] = $smokerSince;

        return $this;
    }

    /**
     * Gets addressHome
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress|null
     */
    public function getAddressHome()
    {
        return $this->container['addressHome'];
    }

    /**
     * Sets addressHome
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress|null $addressHome addressHome
     *
     * @return self
     */
    public function setAddressHome($addressHome)
    {
        if (is_null($addressHome)) {
            throw new \InvalidArgumentException('non-nullable addressHome cannot be null');
        }
        $this->container['addressHome'] = $addressHome;

        return $this;
    }

    /**
     * Gets addressOffice
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress|null
     */
    public function getAddressOffice()
    {
        return $this->container['addressOffice'];
    }

    /**
     * Sets addressOffice
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress|null $addressOffice addressOffice
     *
     * @return self
     */
    public function setAddressOffice($addressOffice)
    {
        if (is_null($addressOffice)) {
            throw new \InvalidArgumentException('non-nullable addressOffice cannot be null');
        }
        $this->container['addressOffice'] = $addressOffice;

        return $this;
    }

    /**
     * Gets addressOther
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress|null
     */
    public function getAddressOther()
    {
        return $this->container['addressOther'];
    }

    /**
     * Sets addressOther
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress|null $addressOther addressOther
     *
     * @return self
     */
    public function setAddressOther($addressOther)
    {
        if (is_null($addressOther)) {
            throw new \InvalidArgumentException('non-nullable addressOther cannot be null');
        }
        $this->container['addressOther'] = $addressOther;

        return $this;
    }

    /**
     * Gets phoneHome
     *
     * @return string|null
     */
    public function getPhoneHome()
    {
        return $this->container['phoneHome'];
    }

    /**
     * Sets phoneHome
     *
     * @param string|null $phoneHome Phone number of the contact at home.
     *
     * @return self
     */
    public function setPhoneHome($phoneHome)
    {
        if (is_null($phoneHome)) {
            throw new \InvalidArgumentException('non-nullable phoneHome cannot be null');
        }
        $this->container['phoneHome'] = $phoneHome;

        return $this;
    }

    /**
     * Gets phoneHomeSecond
     *
     * @return string|null
     */
    public function getPhoneHomeSecond()
    {
        return $this->container['phoneHomeSecond'];
    }

    /**
     * Sets phoneHomeSecond
     *
     * @param string|null $phoneHomeSecond Second phone number of the contact at home.
     *
     * @return self
     */
    public function setPhoneHomeSecond($phoneHomeSecond)
    {
        if (is_null($phoneHomeSecond)) {
            throw new \InvalidArgumentException('non-nullable phoneHomeSecond cannot be null');
        }
        $this->container['phoneHomeSecond'] = $phoneHomeSecond;

        return $this;
    }

    /**
     * Gets phoneAssistant
     *
     * @return string|null
     */
    public function getPhoneAssistant()
    {
        return $this->container['phoneAssistant'];
    }

    /**
     * Sets phoneAssistant
     *
     * @param string|null $phoneAssistant Assistant phone number of the contact.
     *
     * @return self
     */
    public function setPhoneAssistant($phoneAssistant)
    {
        if (is_null($phoneAssistant)) {
            throw new \InvalidArgumentException('non-nullable phoneAssistant cannot be null');
        }
        $this->container['phoneAssistant'] = $phoneAssistant;

        return $this;
    }

    /**
     * Gets phoneOffice
     *
     * @return string|null
     */
    public function getPhoneOffice()
    {
        return $this->container['phoneOffice'];
    }

    /**
     * Sets phoneOffice
     *
     * @param string|null $phoneOffice Office phone number of the contact.
     *
     * @return self
     */
    public function setPhoneOffice($phoneOffice)
    {
        if (is_null($phoneOffice)) {
            throw new \InvalidArgumentException('non-nullable phoneOffice cannot be null');
        }
        $this->container['phoneOffice'] = $phoneOffice;

        return $this;
    }

    /**
     * Gets phoneOfficeSecond
     *
     * @return string|null
     */
    public function getPhoneOfficeSecond()
    {
        return $this->container['phoneOfficeSecond'];
    }

    /**
     * Sets phoneOfficeSecond
     *
     * @param string|null $phoneOfficeSecond Second office phone number of the contact.
     *
     * @return self
     */
    public function setPhoneOfficeSecond($phoneOfficeSecond)
    {
        if (is_null($phoneOfficeSecond)) {
            throw new \InvalidArgumentException('non-nullable phoneOfficeSecond cannot be null');
        }
        $this->container['phoneOfficeSecond'] = $phoneOfficeSecond;

        return $this;
    }

    /**
     * Gets phoneCell
     *
     * @return string|null
     */
    public function getPhoneCell()
    {
        return $this->container['phoneCell'];
    }

    /**
     * Sets phoneCell
     *
     * @param string|null $phoneCell Cell phone number of the contact.
     *
     * @return self
     */
    public function setPhoneCell($phoneCell)
    {
        if (is_null($phoneCell)) {
            throw new \InvalidArgumentException('non-nullable phoneCell cannot be null');
        }
        $this->container['phoneCell'] = $phoneCell;

        return $this;
    }

    /**
     * Gets phonePager
     *
     * @return string|null
     */
    public function getPhonePager()
    {
        return $this->container['phonePager'];
    }

    /**
     * Sets phonePager
     *
     * @param string|null $phonePager Pager phone number of the contact.
     *
     * @return self
     */
    public function setPhonePager($phonePager)
    {
        if (is_null($phonePager)) {
            throw new \InvalidArgumentException('non-nullable phonePager cannot be null');
        }
        $this->container['phonePager'] = $phonePager;

        return $this;
    }

    /**
     * Gets phoneFax
     *
     * @return string|null
     */
    public function getPhoneFax()
    {
        return $this->container['phoneFax'];
    }

    /**
     * Sets phoneFax
     *
     * @param string|null $phoneFax Fax phone number of the contact.
     *
     * @return self
     */
    public function setPhoneFax($phoneFax)
    {
        if (is_null($phoneFax)) {
            throw new \InvalidArgumentException('non-nullable phoneFax cannot be null');
        }
        $this->container['phoneFax'] = $phoneFax;

        return $this;
    }

    /**
     * Gets mainEmail
     *
     * @return string|null
     */
    public function getMainEmail()
    {
        return $this->container['mainEmail'];
    }

    /**
     * Sets mainEmail
     *
     * @param string|null $mainEmail Main email of the contact.
     *
     * @return self
     */
    public function setMainEmail($mainEmail)
    {
        if (is_null($mainEmail)) {
            throw new \InvalidArgumentException('non-nullable mainEmail cannot be null');
        }
        $this->container['mainEmail'] = $mainEmail;

        return $this;
    }

    /**
     * Gets emailPersonal
     *
     * @return string|null
     */
    public function getEmailPersonal()
    {
        return $this->container['emailPersonal'];
    }

    /**
     * Sets emailPersonal
     *
     * @param string|null $emailPersonal Personal email of the contact.
     *
     * @return self
     */
    public function setEmailPersonal($emailPersonal)
    {
        if (is_null($emailPersonal)) {
            throw new \InvalidArgumentException('non-nullable emailPersonal cannot be null');
        }
        $this->container['emailPersonal'] = $emailPersonal;

        return $this;
    }

    /**
     * Gets webSite
     *
     * @return string|null
     */
    public function getWebSite()
    {
        return $this->container['webSite'];
    }

    /**
     * Sets webSite
     *
     * @param string|null $webSite Web Site URL. This represent the main website for the contact.
     *
     * @return self
     */
    public function setWebSite($webSite)
    {
        if (is_null($webSite)) {
            throw new \InvalidArgumentException('non-nullable webSite cannot be null');
        }
        $this->container['webSite'] = $webSite;

        return $this;
    }

    /**
     * Gets emailBusiness
     *
     * @return string|null
     */
    public function getEmailBusiness()
    {
        return $this->container['emailBusiness'];
    }

    /**
     * Sets emailBusiness
     *
     * @param string|null $emailBusiness Business email of the contact.
     *
     * @return self
     */
    public function setEmailBusiness($emailBusiness)
    {
        if (is_null($emailBusiness)) {
            throw new \InvalidArgumentException('non-nullable emailBusiness cannot be null');
        }
        $this->container['emailBusiness'] = $emailBusiness;

        return $this;
    }

    /**
     * Gets emailOther
     *
     * @return string|null
     */
    public function getEmailOther()
    {
        return $this->container['emailOther'];
    }

    /**
     * Sets emailOther
     *
     * @param string|null $emailOther Business email of the contact.
     *
     * @return self
     */
    public function setEmailOther($emailOther)
    {
        if (is_null($emailOther)) {
            throw new \InvalidArgumentException('non-nullable emailOther cannot be null');
        }
        $this->container['emailOther'] = $emailOther;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Notes of the contact.
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets peculiarity
     *
     * @return string|null
     */
    public function getPeculiarity()
    {
        return $this->container['peculiarity'];
    }

    /**
     * Sets peculiarity
     *
     * @param string|null $peculiarity Peculiarity of the contact.
     *
     * @return self
     */
    public function setPeculiarity($peculiarity)
    {
        if (is_null($peculiarity)) {
            throw new \InvalidArgumentException('non-nullable peculiarity cannot be null');
        }
        $this->container['peculiarity'] = $peculiarity;

        return $this;
    }

    /**
     * Gets endFinancialYear
     *
     * @return string|null
     */
    public function getEndFinancialYear()
    {
        return $this->container['endFinancialYear'];
    }

    /**
     * Sets endFinancialYear
     *
     * @param string|null $endFinancialYear End of the financial year (for organization).
     *
     * @return self
     */
    public function setEndFinancialYear($endFinancialYear)
    {
        if (is_null($endFinancialYear)) {
            throw new \InvalidArgumentException('non-nullable endFinancialYear cannot be null');
        }
        $this->container['endFinancialYear'] = $endFinancialYear;

        return $this;
    }

    /**
     * Gets users
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyUser[]|null
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyUser[]|null $users Owner of the contact. By default use the current api user.
     *
     * @return self
     */
    public function setUsers($users)
    {
        if (is_null($users)) {
            throw new \InvalidArgumentException('non-nullable users cannot be null');
        }
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language Language.
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets active
     *
     * @return string|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param string|null $active Active (boolean).
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets publish
     *
     * @return string|null
     * @deprecated
     */
    public function getPublish()
    {
        return $this->container['publish'];
    }

    /**
     * Sets publish
     *
     * @param string|null $publish Publish (boolean).
     *
     * @return self
     * @deprecated
     */
    public function setPublish($publish)
    {
        if (is_null($publish)) {
            throw new \InvalidArgumentException('non-nullable publish cannot be null');
        }
        $this->container['publish'] = $publish;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix Suffix.
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            throw new \InvalidArgumentException('non-nullable suffix cannot be null');
        }
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets civility
     *
     * @return string|null
     */
    public function getCivility()
    {
        return $this->container['civility'];
    }

    /**
     * Sets civility
     *
     * @param string|null $civility Civility.
     *
     * @return self
     */
    public function setCivility($civility)
    {
        if (is_null($civility)) {
            throw new \InvalidArgumentException('non-nullable civility cannot be null');
        }
        $this->container['civility'] = $civility;

        return $this;
    }

    /**
     * Gets civilityId
     *
     * @return int|null
     */
    public function getCivilityId()
    {
        return $this->container['civilityId'];
    }

    /**
     * Sets civilityId
     *
     * @param int|null $civilityId Civility id.
     *
     * @return self
     */
    public function setCivilityId($civilityId)
    {
        if (is_null($civilityId)) {
            throw new \InvalidArgumentException('non-nullable civilityId cannot be null');
        }
        $this->container['civilityId'] = $civilityId;

        return $this;
    }

    /**
     * Gets personAddressed
     *
     * @return string|null
     */
    public function getPersonAddressed()
    {
        return $this->container['personAddressed'];
    }

    /**
     * Sets personAddressed
     *
     * @param string|null $personAddressed Person Addressed (Correspondance).
     *
     * @return self
     */
    public function setPersonAddressed($personAddressed)
    {
        if (is_null($personAddressed)) {
            throw new \InvalidArgumentException('non-nullable personAddressed cannot be null');
        }
        $this->container['personAddressed'] = $personAddressed;

        return $this;
    }

    /**
     * Gets organizationLine1
     *
     * @return string|null
     */
    public function getOrganizationLine1()
    {
        return $this->container['organizationLine1'];
    }

    /**
     * Sets organizationLine1
     *
     * @param string|null $organizationLine1 Organization name (Correspondance).
     *
     * @return self
     */
    public function setOrganizationLine1($organizationLine1)
    {
        if (is_null($organizationLine1)) {
            throw new \InvalidArgumentException('non-nullable organizationLine1 cannot be null');
        }
        $this->container['organizationLine1'] = $organizationLine1;

        return $this;
    }

    /**
     * Gets organizationLine2
     *
     * @return string|null
     */
    public function getOrganizationLine2()
    {
        return $this->container['organizationLine2'];
    }

    /**
     * Sets organizationLine2
     *
     * @param string|null $organizationLine2 Organization name - second line (Correspondance).
     *
     * @return self
     */
    public function setOrganizationLine2($organizationLine2)
    {
        if (is_null($organizationLine2)) {
            throw new \InvalidArgumentException('non-nullable organizationLine2 cannot be null');
        }
        $this->container['organizationLine2'] = $organizationLine2;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department Department (Correspondance).
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            throw new \InvalidArgumentException('non-nullable department cannot be null');
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets customerNumber
     *
     * @return string|null
     */
    public function getCustomerNumber()
    {
        return $this->container['customerNumber'];
    }

    /**
     * Sets customerNumber
     *
     * @param string|null $customerNumber Customer Number.
     *
     * @return self
     */
    public function setCustomerNumber($customerNumber)
    {
        if (is_null($customerNumber)) {
            throw new \InvalidArgumentException('non-nullable customerNumber cannot be null');
        }
        $this->container['customerNumber'] = $customerNumber;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress[]|null $addresses Contact addresses.
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            throw new \InvalidArgumentException('non-nullable addresses cannot be null');
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyContactPhone[]|null
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyContactPhone[]|null $phones Contact phones.
     *
     * @return self
     */
    public function setPhones($phones)
    {
        if (is_null($phones)) {
            throw new \InvalidArgumentException('non-nullable phones cannot be null');
        }
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyContactEmail[]|null
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyContactEmail[]|null $emails Contact emails.
     *
     * @return self
     */
    public function setEmails($emails)
    {
        if (is_null($emails)) {
            throw new \InvalidArgumentException('non-nullable emails cannot be null');
        }
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets webSites
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyContactWebSite[]|null
     */
    public function getWebSites()
    {
        return $this->container['webSites'];
    }

    /**
     * Sets webSites
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyContactWebSite[]|null $webSites Contact web sites.
     *
     * @return self
     */
    public function setWebSites($webSites)
    {
        if (is_null($webSites)) {
            throw new \InvalidArgumentException('non-nullable webSites cannot be null');
        }
        $this->container['webSites'] = $webSites;

        return $this;
    }

    /**
     * Gets birthPlace
     *
     * @return string|null
     */
    public function getBirthPlace()
    {
        return $this->container['birthPlace'];
    }

    /**
     * Sets birthPlace
     *
     * @param string|null $birthPlace Birth Place.
     *
     * @return self
     */
    public function setBirthPlace($birthPlace)
    {
        if (is_null($birthPlace)) {
            throw new \InvalidArgumentException('non-nullable birthPlace cannot be null');
        }
        $this->container['birthPlace'] = $birthPlace;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return string|null
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string|null $nationality Nationality.
     *
     * @return self
     */
    public function setNationality($nationality)
    {
        if (is_null($nationality)) {
            throw new \InvalidArgumentException('non-nullable nationality cannot be null');
        }
        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets orgDateCreated
     *
     * @return string|null
     */
    public function getOrgDateCreated()
    {
        return $this->container['orgDateCreated'];
    }

    /**
     * Sets orgDateCreated
     *
     * @param string|null $orgDateCreated Organization created date.
     *
     * @return self
     */
    public function setOrgDateCreated($orgDateCreated)
    {
        if (is_null($orgDateCreated)) {
            throw new \InvalidArgumentException('non-nullable orgDateCreated cannot be null');
        }
        $this->container['orgDateCreated'] = $orgDateCreated;

        return $this;
    }

    /**
     * Gets orgDateClosed
     *
     * @return string|null
     */
    public function getOrgDateClosed()
    {
        return $this->container['orgDateClosed'];
    }

    /**
     * Sets orgDateClosed
     *
     * @param string|null $orgDateClosed Organization closed date.
     *
     * @return self
     */
    public function setOrgDateClosed($orgDateClosed)
    {
        if (is_null($orgDateClosed)) {
            throw new \InvalidArgumentException('non-nullable orgDateClosed cannot be null');
        }
        $this->container['orgDateClosed'] = $orgDateClosed;

        return $this;
    }

    /**
     * Gets dateEndFinancialYear
     *
     * @return string|null
     */
    public function getDateEndFinancialYear()
    {
        return $this->container['dateEndFinancialYear'];
    }

    /**
     * Sets dateEndFinancialYear
     *
     * @param string|null $dateEndFinancialYear Financial year end date.
     *
     * @return self
     */
    public function setDateEndFinancialYear($dateEndFinancialYear)
    {
        if (is_null($dateEndFinancialYear)) {
            throw new \InvalidArgumentException('non-nullable dateEndFinancialYear cannot be null');
        }
        $this->container['dateEndFinancialYear'] = $dateEndFinancialYear;

        return $this;
    }

    /**
     * Gets orgIdNo
     *
     * @return string|null
     */
    public function getOrgIdNo()
    {
        return $this->container['orgIdNo'];
    }

    /**
     * Sets orgIdNo
     *
     * @param string|null $orgIdNo Organization identification number.
     *
     * @return self
     */
    public function setOrgIdNo($orgIdNo)
    {
        if (is_null($orgIdNo)) {
            throw new \InvalidArgumentException('non-nullable orgIdNo cannot be null');
        }
        $this->container['orgIdNo'] = $orgIdNo;

        return $this;
    }

    /**
     * Gets orgFedNo
     *
     * @return string|null
     */
    public function getOrgFedNo()
    {
        return $this->container['orgFedNo'];
    }

    /**
     * Sets orgFedNo
     *
     * @param string|null $orgFedNo Organization federal number.
     *
     * @return self
     */
    public function setOrgFedNo($orgFedNo)
    {
        if (is_null($orgFedNo)) {
            throw new \InvalidArgumentException('non-nullable orgFedNo cannot be null');
        }
        $this->container['orgFedNo'] = $orgFedNo;

        return $this;
    }

    /**
     * Gets orgProvNo
     *
     * @return string|null
     */
    public function getOrgProvNo()
    {
        return $this->container['orgProvNo'];
    }

    /**
     * Sets orgProvNo
     *
     * @param string|null $orgProvNo Organization provincial number.
     *
     * @return self
     */
    public function setOrgProvNo($orgProvNo)
    {
        if (is_null($orgProvNo)) {
            throw new \InvalidArgumentException('non-nullable orgProvNo cannot be null');
        }
        $this->container['orgProvNo'] = $orgProvNo;

        return $this;
    }

    /**
     * Gets orgStateId
     *
     * @return string|null
     */
    public function getOrgStateId()
    {
        return $this->container['orgStateId'];
    }

    /**
     * Sets orgStateId
     *
     * @param string|null $orgStateId Organization state identification
     *
     * @return self
     */
    public function setOrgStateId($orgStateId)
    {
        if (is_null($orgStateId)) {
            throw new \InvalidArgumentException('non-nullable orgStateId cannot be null');
        }
        $this->container['orgStateId'] = $orgStateId;

        return $this;
    }

    /**
     * Gets orgEin
     *
     * @return string|null
     */
    public function getOrgEin()
    {
        return $this->container['orgEin'];
    }

    /**
     * Sets orgEin
     *
     * @param string|null $orgEin Organization EIN.
     *
     * @return self
     */
    public function setOrgEin($orgEin)
    {
        if (is_null($orgEin)) {
            throw new \InvalidArgumentException('non-nullable orgEin cannot be null');
        }
        $this->container['orgEin'] = $orgEin;

        return $this;
    }

    /**
     * Gets spouse
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyContactContact|null
     */
    public function getSpouse()
    {
        return $this->container['spouse'];
    }

    /**
     * Sets spouse
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyContactContact|null $spouse spouse
     *
     * @return self
     */
    public function setSpouse($spouse)
    {
        if (is_null($spouse)) {
            throw new \InvalidArgumentException('non-nullable spouse cannot be null');
        }
        $this->container['spouse'] = $spouse;

        return $this;
    }

    /**
     * Gets maritalStatus
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyContactMaritalStatus|null
     */
    public function getMaritalStatus()
    {
        return $this->container['maritalStatus'];
    }

    /**
     * Sets maritalStatus
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyContactMaritalStatus|null $maritalStatus maritalStatus
     *
     * @return self
     */
    public function setMaritalStatus($maritalStatus)
    {
        if (is_null($maritalStatus)) {
            throw new \InvalidArgumentException('non-nullable maritalStatus cannot be null');
        }
        $this->container['maritalStatus'] = $maritalStatus;

        return $this;
    }

    /**
     * Gets currentJob
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyContactJob|null
     */
    public function getCurrentJob()
    {
        return $this->container['currentJob'];
    }

    /**
     * Sets currentJob
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyContactJob|null $currentJob currentJob
     *
     * @return self
     */
    public function setCurrentJob($currentJob)
    {
        if (is_null($currentJob)) {
            throw new \InvalidArgumentException('non-nullable currentJob cannot be null');
        }
        $this->container['currentJob'] = $currentJob;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyContactContactLink[]|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyContactContactLink[]|null $links Linked contacts.
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string|null
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string|null $class Class (separated by ;).
     *
     * @return self
     */
    public function setClass($class)
    {
        if (is_null($class)) {
            throw new \InvalidArgumentException('non-nullable class cannot be null');
        }
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets classIds
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyInt[]|null
     */
    public function getClassIds()
    {
        return $this->container['classIds'];
    }

    /**
     * Sets classIds
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyInt[]|null $classIds Class ids.
     *
     * @return self
     */
    public function setClassIds($classIds)
    {
        if (is_null($classIds)) {
            throw new \InvalidArgumentException('non-nullable classIds cannot be null');
        }
        $this->container['classIds'] = $classIds;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string|null $group Mailing group (separated by ;).
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets groupIds
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyInt[]|null
     */
    public function getGroupIds()
    {
        return $this->container['groupIds'];
    }

    /**
     * Sets groupIds
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyInt[]|null $groupIds Mailing group ids.
     *
     * @return self
     */
    public function setGroupIds($groupIds)
    {
        if (is_null($groupIds)) {
            throw new \InvalidArgumentException('non-nullable groupIds cannot be null');
        }
        $this->container['groupIds'] = $groupIds;

        return $this;
    }

    /**
     * Gets hobby
     *
     * @return string|null
     */
    public function getHobby()
    {
        return $this->container['hobby'];
    }

    /**
     * Sets hobby
     *
     * @param string|null $hobby Hobby (separated by ;).
     *
     * @return self
     */
    public function setHobby($hobby)
    {
        if (is_null($hobby)) {
            throw new \InvalidArgumentException('non-nullable hobby cannot be null');
        }
        $this->container['hobby'] = $hobby;

        return $this;
    }

    /**
     * Gets hobbyIds
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyInt[]|null
     */
    public function getHobbyIds()
    {
        return $this->container['hobbyIds'];
    }

    /**
     * Sets hobbyIds
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyInt[]|null $hobbyIds Hobby ids.
     *
     * @return self
     */
    public function setHobbyIds($hobbyIds)
    {
        if (is_null($hobbyIds)) {
            throw new \InvalidArgumentException('non-nullable hobbyIds cannot be null');
        }
        $this->container['hobbyIds'] = $hobbyIds;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string|null
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string|null $origin Origin (separated by ;).
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets originIds
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyInt[]|null
     */
    public function getOriginIds()
    {
        return $this->container['originIds'];
    }

    /**
     * Sets originIds
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyInt[]|null $originIds Origin ids.
     *
     * @return self
     */
    public function setOriginIds($originIds)
    {
        if (is_null($originIds)) {
            throw new \InvalidArgumentException('non-nullable originIds cannot be null');
        }
        $this->container['originIds'] = $originIds;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain Activity Domain (separated by ;).
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets domainIds
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyInt[]|null
     */
    public function getDomainIds()
    {
        return $this->container['domainIds'];
    }

    /**
     * Sets domainIds
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyInt[]|null $domainIds Domain ids.
     *
     * @return self
     */
    public function setDomainIds($domainIds)
    {
        if (is_null($domainIds)) {
            throw new \InvalidArgumentException('non-nullable domainIds cannot be null');
        }
        $this->container['domainIds'] = $domainIds;

        return $this;
    }

    /**
     * Gets territory
     *
     * @return string|null
     */
    public function getTerritory()
    {
        return $this->container['territory'];
    }

    /**
     * Sets territory
     *
     * @param string|null $territory Territory.
     *
     * @return self
     */
    public function setTerritory($territory)
    {
        if (is_null($territory)) {
            throw new \InvalidArgumentException('non-nullable territory cannot be null');
        }
        $this->container['territory'] = $territory;

        return $this;
    }

    /**
     * Gets territoryId
     *
     * @return int|null
     */
    public function getTerritoryId()
    {
        return $this->container['territoryId'];
    }

    /**
     * Sets territoryId
     *
     * @param int|null $territoryId Territory id.
     *
     * @return self
     */
    public function setTerritoryId($territoryId)
    {
        if (is_null($territoryId)) {
            throw new \InvalidArgumentException('non-nullable territoryId cannot be null');
        }
        $this->container['territoryId'] = $territoryId;

        return $this;
    }

    /**
     * Gets seg1
     *
     * @return string|null
     */
    public function getSeg1()
    {
        return $this->container['seg1'];
    }

    /**
     * Sets seg1
     *
     * @param string|null $seg1 Segmentation 1.
     *
     * @return self
     */
    public function setSeg1($seg1)
    {
        if (is_null($seg1)) {
            throw new \InvalidArgumentException('non-nullable seg1 cannot be null');
        }
        $this->container['seg1'] = $seg1;

        return $this;
    }

    /**
     * Gets seg1Id
     *
     * @return int|null
     */
    public function getSeg1Id()
    {
        return $this->container['seg1Id'];
    }

    /**
     * Sets seg1Id
     *
     * @param int|null $seg1Id Segmentation 1 id.
     *
     * @return self
     */
    public function setSeg1Id($seg1Id)
    {
        if (is_null($seg1Id)) {
            throw new \InvalidArgumentException('non-nullable seg1Id cannot be null');
        }
        $this->container['seg1Id'] = $seg1Id;

        return $this;
    }

    /**
     * Gets seg2
     *
     * @return string|null
     */
    public function getSeg2()
    {
        return $this->container['seg2'];
    }

    /**
     * Sets seg2
     *
     * @param string|null $seg2 Segmentation 2.
     *
     * @return self
     */
    public function setSeg2($seg2)
    {
        if (is_null($seg2)) {
            throw new \InvalidArgumentException('non-nullable seg2 cannot be null');
        }
        $this->container['seg2'] = $seg2;

        return $this;
    }

    /**
     * Gets seg2Id
     *
     * @return int|null
     */
    public function getSeg2Id()
    {
        return $this->container['seg2Id'];
    }

    /**
     * Sets seg2Id
     *
     * @param int|null $seg2Id Segmentation 2 id.
     *
     * @return self
     */
    public function setSeg2Id($seg2Id)
    {
        if (is_null($seg2Id)) {
            throw new \InvalidArgumentException('non-nullable seg2Id cannot be null');
        }
        $this->container['seg2Id'] = $seg2Id;

        return $this;
    }

    /**
     * Gets seg3
     *
     * @return string|null
     */
    public function getSeg3()
    {
        return $this->container['seg3'];
    }

    /**
     * Sets seg3
     *
     * @param string|null $seg3 Segmentation 3.
     *
     * @return self
     */
    public function setSeg3($seg3)
    {
        if (is_null($seg3)) {
            throw new \InvalidArgumentException('non-nullable seg3 cannot be null');
        }
        $this->container['seg3'] = $seg3;

        return $this;
    }

    /**
     * Gets seg3Id
     *
     * @return int|null
     */
    public function getSeg3Id()
    {
        return $this->container['seg3Id'];
    }

    /**
     * Sets seg3Id
     *
     * @param int|null $seg3Id Segmentation 3 id.
     *
     * @return self
     */
    public function setSeg3Id($seg3Id)
    {
        if (is_null($seg3Id)) {
            throw new \InvalidArgumentException('non-nullable seg3Id cannot be null');
        }
        $this->container['seg3Id'] = $seg3Id;

        return $this;
    }

    /**
     * Gets seg4
     *
     * @return string|null
     */
    public function getSeg4()
    {
        return $this->container['seg4'];
    }

    /**
     * Sets seg4
     *
     * @param string|null $seg4 Segmentation 4.
     *
     * @return self
     */
    public function setSeg4($seg4)
    {
        if (is_null($seg4)) {
            throw new \InvalidArgumentException('non-nullable seg4 cannot be null');
        }
        $this->container['seg4'] = $seg4;

        return $this;
    }

    /**
     * Gets seg4Id
     *
     * @return int|null
     */
    public function getSeg4Id()
    {
        return $this->container['seg4Id'];
    }

    /**
     * Sets seg4Id
     *
     * @param int|null $seg4Id Segmentation 4 id.
     *
     * @return self
     */
    public function setSeg4Id($seg4Id)
    {
        if (is_null($seg4Id)) {
            throw new \InvalidArgumentException('non-nullable seg4Id cannot be null');
        }
        $this->container['seg4Id'] = $seg4Id;

        return $this;
    }

    /**
     * Gets seg5
     *
     * @return string|null
     */
    public function getSeg5()
    {
        return $this->container['seg5'];
    }

    /**
     * Sets seg5
     *
     * @param string|null $seg5 Segmentation 5.
     *
     * @return self
     */
    public function setSeg5($seg5)
    {
        if (is_null($seg5)) {
            throw new \InvalidArgumentException('non-nullable seg5 cannot be null');
        }
        $this->container['seg5'] = $seg5;

        return $this;
    }

    /**
     * Gets seg5Id
     *
     * @return int|null
     */
    public function getSeg5Id()
    {
        return $this->container['seg5Id'];
    }

    /**
     * Sets seg5Id
     *
     * @param int|null $seg5Id Segmentation 5 id.
     *
     * @return self
     */
    public function setSeg5Id($seg5Id)
    {
        if (is_null($seg5Id)) {
            throw new \InvalidArgumentException('non-nullable seg5Id cannot be null');
        }
        $this->container['seg5Id'] = $seg5Id;

        return $this;
    }

    /**
     * Gets seg6
     *
     * @return string|null
     */
    public function getSeg6()
    {
        return $this->container['seg6'];
    }

    /**
     * Sets seg6
     *
     * @param string|null $seg6 Segmentation 6.
     *
     * @return self
     */
    public function setSeg6($seg6)
    {
        if (is_null($seg6)) {
            throw new \InvalidArgumentException('non-nullable seg6 cannot be null');
        }
        $this->container['seg6'] = $seg6;

        return $this;
    }

    /**
     * Gets seg6Id
     *
     * @return int|null
     */
    public function getSeg6Id()
    {
        return $this->container['seg6Id'];
    }

    /**
     * Sets seg6Id
     *
     * @param int|null $seg6Id Segmentation 6 id.
     *
     * @return self
     */
    public function setSeg6Id($seg6Id)
    {
        if (is_null($seg6Id)) {
            throw new \InvalidArgumentException('non-nullable seg6Id cannot be null');
        }
        $this->container['seg6Id'] = $seg6Id;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param string|null $createdBy Email of the user who created the event.
     *
     * @return self
     */
    public function setCreatedBy($createdBy)
    {
        if (is_null($createdBy)) {
            throw new \InvalidArgumentException('non-nullable createdBy cannot be null');
        }
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets createdOn
     *
     * @return string|null
     */
    public function getCreatedOn()
    {
        return $this->container['createdOn'];
    }

    /**
     * Sets createdOn
     *
     * @param string|null $createdOn Date of creation of the event.
     *
     * @return self
     */
    public function setCreatedOn($createdOn)
    {
        if (is_null($createdOn)) {
            throw new \InvalidArgumentException('non-nullable createdOn cannot be null');
        }
        $this->container['createdOn'] = $createdOn;

        return $this;
    }

    /**
     * Gets modifiedBy
     *
     * @return string|null
     */
    public function getModifiedBy()
    {
        return $this->container['modifiedBy'];
    }

    /**
     * Sets modifiedBy
     *
     * @param string|null $modifiedBy Email of the user who last modified the event.
     *
     * @return self
     */
    public function setModifiedBy($modifiedBy)
    {
        if (is_null($modifiedBy)) {
            throw new \InvalidArgumentException('non-nullable modifiedBy cannot be null');
        }
        $this->container['modifiedBy'] = $modifiedBy;

        return $this;
    }

    /**
     * Gets modifiedOn
     *
     * @return string|null
     */
    public function getModifiedOn()
    {
        return $this->container['modifiedOn'];
    }

    /**
     * Sets modifiedOn
     *
     * @param string|null $modifiedOn Date of the last modification of the event.
     *
     * @return self
     */
    public function setModifiedOn($modifiedOn)
    {
        if (is_null($modifiedOn)) {
            throw new \InvalidArgumentException('non-nullable modifiedOn cannot be null');
        }
        $this->container['modifiedOn'] = $modifiedOn;

        return $this;
    }

    /**
     * Gets dateDecease
     *
     * @return string|null
     */
    public function getDateDecease()
    {
        return $this->container['dateDecease'];
    }

    /**
     * Sets dateDecease
     *
     * @param string|null $dateDecease Decease date for this contact. If the contact is alive, this value should be \"\".
     *
     * @return self
     */
    public function setDateDecease($dateDecease)
    {
        if (is_null($dateDecease)) {
            throw new \InvalidArgumentException('non-nullable dateDecease cannot be null');
        }
        $this->container['dateDecease'] = $dateDecease;

        return $this;
    }

    /**
     * Gets civilStatus
     *
     * @return string|null
     */
    public function getCivilStatus()
    {
        return $this->container['civilStatus'];
    }

    /**
     * Sets civilStatus
     *
     * @param string|null $civilStatus Civil status.
     *
     * @return self
     */
    public function setCivilStatus($civilStatus)
    {
        if (is_null($civilStatus)) {
            throw new \InvalidArgumentException('non-nullable civilStatus cannot be null');
        }
        $this->container['civilStatus'] = $civilStatus;

        return $this;
    }

    /**
     * Gets civilStatusSince
     *
     * @return string|null
     */
    public function getCivilStatusSince()
    {
        return $this->container['civilStatusSince'];
    }

    /**
     * Sets civilStatusSince
     *
     * @param string|null $civilStatusSince Date since civil status.
     *
     * @return self
     */
    public function setCivilStatusSince($civilStatusSince)
    {
        if (is_null($civilStatusSince)) {
            throw new \InvalidArgumentException('non-nullable civilStatusSince cannot be null');
        }
        $this->container['civilStatusSince'] = $civilStatusSince;

        return $this;
    }

    /**
     * Gets hin
     *
     * @return string|null
     */
    public function getHin()
    {
        return $this->container['hin'];
    }

    /**
     * Sets hin
     *
     * @param string|null $hin Health Insurance Number.
     *
     * @return self
     */
    public function setHin($hin)
    {
        if (is_null($hin)) {
            throw new \InvalidArgumentException('non-nullable hin cannot be null');
        }
        $this->container['hin'] = $hin;

        return $this;
    }

    /**
     * Gets advisor
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyUser|null
     */
    public function getAdvisor()
    {
        return $this->container['advisor'];
    }

    /**
     * Sets advisor
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyUser|null $advisor advisor
     *
     * @return self
     */
    public function setAdvisor($advisor)
    {
        if (is_null($advisor)) {
            throw new \InvalidArgumentException('non-nullable advisor cannot be null');
        }
        $this->container['advisor'] = $advisor;

        return $this;
    }

    /**
     * Gets sponsor
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyUser|null
     */
    public function getSponsor()
    {
        return $this->container['sponsor'];
    }

    /**
     * Sets sponsor
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyUser|null $sponsor sponsor
     *
     * @return self
     */
    public function setSponsor($sponsor)
    {
        if (is_null($sponsor)) {
            throw new \InvalidArgumentException('non-nullable sponsor cannot be null');
        }
        $this->container['sponsor'] = $sponsor;

        return $this;
    }

    /**
     * Gets managers
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyUser[]|null
     */
    public function getManagers()
    {
        return $this->container['managers'];
    }

    /**
     * Sets managers
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyUser[]|null $managers Manager Users.
     *
     * @return self
     */
    public function setManagers($managers)
    {
        if (is_null($managers)) {
            throw new \InvalidArgumentException('non-nullable managers cannot be null');
        }
        $this->container['managers'] = $managers;

        return $this;
    }

    /**
     * Gets jobs
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\KronosFinanceJob[]|null
     */
    public function getJobs()
    {
        return $this->container['jobs'];
    }

    /**
     * Sets jobs
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\KronosFinanceJob[]|null $jobs List of jobs.
     *
     * @return self
     */
    public function setJobs($jobs)
    {
        if (is_null($jobs)) {
            throw new \InvalidArgumentException('non-nullable jobs cannot be null');
        }
        $this->container['jobs'] = $jobs;

        return $this;
    }

    /**
     * Gets generalInsurances
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\KronosFinanceGeneralInsurance[]|null
     */
    public function getGeneralInsurances()
    {
        return $this->container['generalInsurances'];
    }

    /**
     * Sets generalInsurances
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\KronosFinanceGeneralInsurance[]|null $generalInsurances General insurance (Property and casuality).
     *
     * @return self
     */
    public function setGeneralInsurances($generalInsurances)
    {
        if (is_null($generalInsurances)) {
            throw new \InvalidArgumentException('non-nullable generalInsurances cannot be null');
        }
        $this->container['generalInsurances'] = $generalInsurances;

        return $this;
    }

    /**
     * Gets passport
     *
     * @return string|null
     */
    public function getPassport()
    {
        return $this->container['passport'];
    }

    /**
     * Sets passport
     *
     * @param string|null $passport Passport.
     *
     * @return self
     */
    public function setPassport($passport)
    {
        if (is_null($passport)) {
            throw new \InvalidArgumentException('non-nullable passport cannot be null');
        }
        $this->container['passport'] = $passport;

        return $this;
    }

    /**
     * Gets passportExpiration
     *
     * @return string|null
     */
    public function getPassportExpiration()
    {
        return $this->container['passportExpiration'];
    }

    /**
     * Sets passportExpiration
     *
     * @param string|null $passportExpiration Passport expiration.
     *
     * @return self
     */
    public function setPassportExpiration($passportExpiration)
    {
        if (is_null($passportExpiration)) {
            throw new \InvalidArgumentException('non-nullable passportExpiration cannot be null');
        }
        $this->container['passportExpiration'] = $passportExpiration;

        return $this;
    }

    /**
     * Gets drivingLicense
     *
     * @return string|null
     */
    public function getDrivingLicense()
    {
        return $this->container['drivingLicense'];
    }

    /**
     * Sets drivingLicense
     *
     * @param string|null $drivingLicense Driving license.
     *
     * @return self
     */
    public function setDrivingLicense($drivingLicense)
    {
        if (is_null($drivingLicense)) {
            throw new \InvalidArgumentException('non-nullable drivingLicense cannot be null');
        }
        $this->container['drivingLicense'] = $drivingLicense;

        return $this;
    }

    /**
     * Gets drivingLicenseExpiration
     *
     * @return string|null
     */
    public function getDrivingLicenseExpiration()
    {
        return $this->container['drivingLicenseExpiration'];
    }

    /**
     * Sets drivingLicenseExpiration
     *
     * @param string|null $drivingLicenseExpiration Driving license expiration.
     *
     * @return self
     */
    public function setDrivingLicenseExpiration($drivingLicenseExpiration)
    {
        if (is_null($drivingLicenseExpiration)) {
            throw new \InvalidArgumentException('non-nullable drivingLicenseExpiration cannot be null');
        }
        $this->container['drivingLicenseExpiration'] = $drivingLicenseExpiration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


