<?php
/**
 * ContactsInvestorProfile
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-equisoft1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * ContactsInvestorProfile Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContactsInvestorProfile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'contacts.InvestorProfile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lastUpdate' => '\DateTime',
        'reviewDate' => '\DateTime',
        'profile' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue',
        'investorKnowledge' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue',
        'estimatedEquity' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue',
        'annualIncome' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue',
        'taxCode' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue',
        'style' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue',
        'riskTolerance' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsRiskTolerance',
        'investmentObjective' => '\Equisoft\SDK\EquisoftConnect\Model\ContactsInvestmentObjective'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'lastUpdate' => 'date',
        'reviewDate' => 'date',
        'profile' => null,
        'investorKnowledge' => null,
        'estimatedEquity' => null,
        'annualIncome' => null,
        'taxCode' => null,
        'style' => null,
        'riskTolerance' => null,
        'investmentObjective' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'lastUpdate' => true,
        'reviewDate' => true,
        'profile' => true,
        'investorKnowledge' => true,
        'estimatedEquity' => true,
        'annualIncome' => true,
        'taxCode' => true,
        'style' => true,
        'riskTolerance' => true,
        'investmentObjective' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lastUpdate' => 'lastUpdate',
        'reviewDate' => 'reviewDate',
        'profile' => 'profile',
        'investorKnowledge' => 'investorKnowledge',
        'estimatedEquity' => 'estimatedEquity',
        'annualIncome' => 'annualIncome',
        'taxCode' => 'taxCode',
        'style' => 'style',
        'riskTolerance' => 'riskTolerance',
        'investmentObjective' => 'investmentObjective'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lastUpdate' => 'setLastUpdate',
        'reviewDate' => 'setReviewDate',
        'profile' => 'setProfile',
        'investorKnowledge' => 'setInvestorKnowledge',
        'estimatedEquity' => 'setEstimatedEquity',
        'annualIncome' => 'setAnnualIncome',
        'taxCode' => 'setTaxCode',
        'style' => 'setStyle',
        'riskTolerance' => 'setRiskTolerance',
        'investmentObjective' => 'setInvestmentObjective'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lastUpdate' => 'getLastUpdate',
        'reviewDate' => 'getReviewDate',
        'profile' => 'getProfile',
        'investorKnowledge' => 'getInvestorKnowledge',
        'estimatedEquity' => 'getEstimatedEquity',
        'annualIncome' => 'getAnnualIncome',
        'taxCode' => 'getTaxCode',
        'style' => 'getStyle',
        'riskTolerance' => 'getRiskTolerance',
        'investmentObjective' => 'getInvestmentObjective'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('lastUpdate', $data ?? [], null);
        $this->setIfExists('reviewDate', $data ?? [], null);
        $this->setIfExists('profile', $data ?? [], null);
        $this->setIfExists('investorKnowledge', $data ?? [], null);
        $this->setIfExists('estimatedEquity', $data ?? [], null);
        $this->setIfExists('annualIncome', $data ?? [], null);
        $this->setIfExists('taxCode', $data ?? [], null);
        $this->setIfExists('style', $data ?? [], null);
        $this->setIfExists('riskTolerance', $data ?? [], null);
        $this->setIfExists('investmentObjective', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lastUpdate
     *
     * @return \DateTime|null
     */
    public function getLastUpdate()
    {
        return $this->container['lastUpdate'];
    }

    /**
     * Sets lastUpdate
     *
     * @param \DateTime|null $lastUpdate lastUpdate
     *
     * @return self
     */
    public function setLastUpdate($lastUpdate)
    {
        if (is_null($lastUpdate)) {
            array_push($this->openAPINullablesSetToNull, 'lastUpdate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastUpdate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastUpdate'] = $lastUpdate;

        return $this;
    }

    /**
     * Gets reviewDate
     *
     * @return \DateTime|null
     */
    public function getReviewDate()
    {
        return $this->container['reviewDate'];
    }

    /**
     * Sets reviewDate
     *
     * @param \DateTime|null $reviewDate reviewDate
     *
     * @return self
     */
    public function setReviewDate($reviewDate)
    {
        if (is_null($reviewDate)) {
            array_push($this->openAPINullablesSetToNull, 'reviewDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reviewDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reviewDate'] = $reviewDate;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null $profile profile
     *
     * @return self
     */
    public function setProfile($profile)
    {
        if (is_null($profile)) {
            array_push($this->openAPINullablesSetToNull, 'profile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets investorKnowledge
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null
     */
    public function getInvestorKnowledge()
    {
        return $this->container['investorKnowledge'];
    }

    /**
     * Sets investorKnowledge
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null $investorKnowledge investorKnowledge
     *
     * @return self
     */
    public function setInvestorKnowledge($investorKnowledge)
    {
        if (is_null($investorKnowledge)) {
            array_push($this->openAPINullablesSetToNull, 'investorKnowledge');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('investorKnowledge', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['investorKnowledge'] = $investorKnowledge;

        return $this;
    }

    /**
     * Gets estimatedEquity
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null
     */
    public function getEstimatedEquity()
    {
        return $this->container['estimatedEquity'];
    }

    /**
     * Sets estimatedEquity
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null $estimatedEquity estimatedEquity
     *
     * @return self
     */
    public function setEstimatedEquity($estimatedEquity)
    {
        if (is_null($estimatedEquity)) {
            array_push($this->openAPINullablesSetToNull, 'estimatedEquity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('estimatedEquity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['estimatedEquity'] = $estimatedEquity;

        return $this;
    }

    /**
     * Gets annualIncome
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null
     */
    public function getAnnualIncome()
    {
        return $this->container['annualIncome'];
    }

    /**
     * Sets annualIncome
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null $annualIncome annualIncome
     *
     * @return self
     */
    public function setAnnualIncome($annualIncome)
    {
        if (is_null($annualIncome)) {
            array_push($this->openAPINullablesSetToNull, 'annualIncome');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('annualIncome', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['annualIncome'] = $annualIncome;

        return $this;
    }

    /**
     * Gets taxCode
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null
     */
    public function getTaxCode()
    {
        return $this->container['taxCode'];
    }

    /**
     * Sets taxCode
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null $taxCode taxCode
     *
     * @return self
     */
    public function setTaxCode($taxCode)
    {
        if (is_null($taxCode)) {
            array_push($this->openAPINullablesSetToNull, 'taxCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxCode'] = $taxCode;

        return $this;
    }

    /**
     * Gets style
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsContactFieldValue|null $style style
     *
     * @return self
     */
    public function setStyle($style)
    {
        if (is_null($style)) {
            array_push($this->openAPINullablesSetToNull, 'style');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('style', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets riskTolerance
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsRiskTolerance|null
     */
    public function getRiskTolerance()
    {
        return $this->container['riskTolerance'];
    }

    /**
     * Sets riskTolerance
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsRiskTolerance|null $riskTolerance riskTolerance
     *
     * @return self
     */
    public function setRiskTolerance($riskTolerance)
    {
        if (is_null($riskTolerance)) {
            array_push($this->openAPINullablesSetToNull, 'riskTolerance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('riskTolerance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['riskTolerance'] = $riskTolerance;

        return $this;
    }

    /**
     * Gets investmentObjective
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsInvestmentObjective|null
     */
    public function getInvestmentObjective()
    {
        return $this->container['investmentObjective'];
    }

    /**
     * Sets investmentObjective
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\ContactsInvestmentObjective|null $investmentObjective investmentObjective
     *
     * @return self
     */
    public function setInvestmentObjective($investmentObjective)
    {
        if (is_null($investmentObjective)) {
            array_push($this->openAPINullablesSetToNull, 'investmentObjective');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('investmentObjective', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['investmentObjective'] = $investmentObjective;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


