<?php
/**
 * LegacyFinanceLiability
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0-equisoft1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * LegacyFinanceLiability Class Doc Comment
 *
 * @category Class
 * @description Response datatype returned by the kronos.finance.getAccountStatement method
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LegacyFinanceLiability implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'legacy.finance.Liability';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'product' => 'string',
        'productType' => 'string',
        'rate' => 'float',
        'initialAmount' => 'float',
        'marketValue' => 'float',
        'balance' => 'float',
        'netValue' => 'float',
        'pctOwnership' => 'float',
        'instalment' => 'float',
        'instalmentFrequency' => 'string',
        'dateStart' => '\DateTime',
        'dateEnd' => '\DateTime',
        'dateUpdated' => '\DateTime',
        'notes' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'product' => null,
        'productType' => null,
        'rate' => 'float',
        'initialAmount' => 'float',
        'marketValue' => 'float',
        'balance' => 'float',
        'netValue' => 'float',
        'pctOwnership' => 'float',
        'instalment' => 'float',
        'instalmentFrequency' => null,
        'dateStart' => 'date',
        'dateEnd' => 'date',
        'dateUpdated' => 'date',
        'notes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'product' => false,
        'productType' => false,
        'rate' => false,
        'initialAmount' => false,
        'marketValue' => false,
        'balance' => false,
        'netValue' => false,
        'pctOwnership' => false,
        'instalment' => false,
        'instalmentFrequency' => false,
        'dateStart' => false,
        'dateEnd' => false,
        'dateUpdated' => true,
        'notes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'product' => 'product',
        'productType' => 'productType',
        'rate' => 'rate',
        'initialAmount' => 'initialAmount',
        'marketValue' => 'marketValue',
        'balance' => 'balance',
        'netValue' => 'netValue',
        'pctOwnership' => 'pctOwnership',
        'instalment' => 'instalment',
        'instalmentFrequency' => 'instalmentFrequency',
        'dateStart' => 'dateStart',
        'dateEnd' => 'dateEnd',
        'dateUpdated' => 'dateUpdated',
        'notes' => 'notes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'product' => 'setProduct',
        'productType' => 'setProductType',
        'rate' => 'setRate',
        'initialAmount' => 'setInitialAmount',
        'marketValue' => 'setMarketValue',
        'balance' => 'setBalance',
        'netValue' => 'setNetValue',
        'pctOwnership' => 'setPctOwnership',
        'instalment' => 'setInstalment',
        'instalmentFrequency' => 'setInstalmentFrequency',
        'dateStart' => 'setDateStart',
        'dateEnd' => 'setDateEnd',
        'dateUpdated' => 'setDateUpdated',
        'notes' => 'setNotes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'product' => 'getProduct',
        'productType' => 'getProductType',
        'rate' => 'getRate',
        'initialAmount' => 'getInitialAmount',
        'marketValue' => 'getMarketValue',
        'balance' => 'getBalance',
        'netValue' => 'getNetValue',
        'pctOwnership' => 'getPctOwnership',
        'instalment' => 'getInstalment',
        'instalmentFrequency' => 'getInstalmentFrequency',
        'dateStart' => 'getDateStart',
        'dateEnd' => 'getDateEnd',
        'dateUpdated' => 'getDateUpdated',
        'notes' => 'getNotes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('productType', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('initialAmount', $data ?? [], null);
        $this->setIfExists('marketValue', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('netValue', $data ?? [], null);
        $this->setIfExists('pctOwnership', $data ?? [], null);
        $this->setIfExists('instalment', $data ?? [], null);
        $this->setIfExists('instalmentFrequency', $data ?? [], null);
        $this->setIfExists('dateStart', $data ?? [], null);
        $this->setIfExists('dateEnd', $data ?? [], null);
        $this->setIfExists('dateUpdated', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product Product.
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets productType
     *
     * @return string|null
     */
    public function getProductType()
    {
        return $this->container['productType'];
    }

    /**
     * Sets productType
     *
     * @param string|null $productType Product type.
     *
     * @return self
     */
    public function setProductType($productType)
    {
        if (is_null($productType)) {
            throw new \InvalidArgumentException('non-nullable productType cannot be null');
        }
        $this->container['productType'] = $productType;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float|null $rate Rate.
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets initialAmount
     *
     * @return float|null
     */
    public function getInitialAmount()
    {
        return $this->container['initialAmount'];
    }

    /**
     * Sets initialAmount
     *
     * @param float|null $initialAmount Initial amount.
     *
     * @return self
     */
    public function setInitialAmount($initialAmount)
    {
        if (is_null($initialAmount)) {
            throw new \InvalidArgumentException('non-nullable initialAmount cannot be null');
        }
        $this->container['initialAmount'] = $initialAmount;

        return $this;
    }

    /**
     * Gets marketValue
     *
     * @return float|null
     */
    public function getMarketValue()
    {
        return $this->container['marketValue'];
    }

    /**
     * Sets marketValue
     *
     * @param float|null $marketValue Market value.
     *
     * @return self
     */
    public function setMarketValue($marketValue)
    {
        if (is_null($marketValue)) {
            throw new \InvalidArgumentException('non-nullable marketValue cannot be null');
        }
        $this->container['marketValue'] = $marketValue;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance Balance.
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets netValue
     *
     * @return float|null
     */
    public function getNetValue()
    {
        return $this->container['netValue'];
    }

    /**
     * Sets netValue
     *
     * @param float|null $netValue Net value.
     *
     * @return self
     */
    public function setNetValue($netValue)
    {
        if (is_null($netValue)) {
            throw new \InvalidArgumentException('non-nullable netValue cannot be null');
        }
        $this->container['netValue'] = $netValue;

        return $this;
    }

    /**
     * Gets pctOwnership
     *
     * @return float|null
     */
    public function getPctOwnership()
    {
        return $this->container['pctOwnership'];
    }

    /**
     * Sets pctOwnership
     *
     * @param float|null $pctOwnership Percentage ownership.
     *
     * @return self
     */
    public function setPctOwnership($pctOwnership)
    {
        if (is_null($pctOwnership)) {
            throw new \InvalidArgumentException('non-nullable pctOwnership cannot be null');
        }
        $this->container['pctOwnership'] = $pctOwnership;

        return $this;
    }

    /**
     * Gets instalment
     *
     * @return float|null
     */
    public function getInstalment()
    {
        return $this->container['instalment'];
    }

    /**
     * Sets instalment
     *
     * @param float|null $instalment Instalment.
     *
     * @return self
     */
    public function setInstalment($instalment)
    {
        if (is_null($instalment)) {
            throw new \InvalidArgumentException('non-nullable instalment cannot be null');
        }
        $this->container['instalment'] = $instalment;

        return $this;
    }

    /**
     * Gets instalmentFrequency
     *
     * @return string|null
     */
    public function getInstalmentFrequency()
    {
        return $this->container['instalmentFrequency'];
    }

    /**
     * Sets instalmentFrequency
     *
     * @param string|null $instalmentFrequency Instalment frequency.
     *
     * @return self
     */
    public function setInstalmentFrequency($instalmentFrequency)
    {
        if (is_null($instalmentFrequency)) {
            throw new \InvalidArgumentException('non-nullable instalmentFrequency cannot be null');
        }
        $this->container['instalmentFrequency'] = $instalmentFrequency;

        return $this;
    }

    /**
     * Gets dateStart
     *
     * @return \DateTime|null
     */
    public function getDateStart()
    {
        return $this->container['dateStart'];
    }

    /**
     * Sets dateStart
     *
     * @param \DateTime|null $dateStart Start date.
     *
     * @return self
     */
    public function setDateStart($dateStart)
    {
        if (is_null($dateStart)) {
            throw new \InvalidArgumentException('non-nullable dateStart cannot be null');
        }
        $this->container['dateStart'] = $dateStart;

        return $this;
    }

    /**
     * Gets dateEnd
     *
     * @return \DateTime|null
     */
    public function getDateEnd()
    {
        return $this->container['dateEnd'];
    }

    /**
     * Sets dateEnd
     *
     * @param \DateTime|null $dateEnd End date.
     *
     * @return self
     */
    public function setDateEnd($dateEnd)
    {
        if (is_null($dateEnd)) {
            throw new \InvalidArgumentException('non-nullable dateEnd cannot be null');
        }
        $this->container['dateEnd'] = $dateEnd;

        return $this;
    }

    /**
     * Gets dateUpdated
     *
     * @return \DateTime|null
     */
    public function getDateUpdated()
    {
        return $this->container['dateUpdated'];
    }

    /**
     * Sets dateUpdated
     *
     * @param \DateTime|null $dateUpdated Updated date.
     *
     * @return self
     */
    public function setDateUpdated($dateUpdated)
    {
        if (is_null($dateUpdated)) {
            array_push($this->openAPINullablesSetToNull, 'dateUpdated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dateUpdated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dateUpdated'] = $dateUpdated;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Notes.
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


