<?php
/**
 * LegacyProvisioningUserItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-equisoft4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * LegacyProvisioningUserItem Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LegacyProvisioningUserItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'legacy.provisioning.UserItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'orgId' => 'string',
        'uuid' => 'string',
        'userId' => 'string',
        'displayName' => 'string',
        'firstName' => 'string',
        'lastName' => 'string',
        'initials' => 'string',
        'email' => 'string',
        'role' => 'string',
        'lang' => 'string',
        'concurrentAccess' => 'int',
        'active' => 'string',
        'locked' => 'string',
        'enableMobile' => 'bool',
        'gender' => 'string',
        'phoneWork' => 'string',
        'phoneWorkExtension' => 'string',
        'phoneHome' => 'string',
        'phoneCell' => 'string',
        'phoneFax' => 'string',
        'address' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress[]',
        'groups' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyProvisioningGroupItem[]',
        'externalIdentifiers' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyProvisioningUserIdentifier[]',
        'allowDelegation' => 'string',
        'deletable' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'orgId' => null,
        'uuid' => null,
        'userId' => null,
        'displayName' => null,
        'firstName' => null,
        'lastName' => null,
        'initials' => null,
        'email' => null,
        'role' => null,
        'lang' => null,
        'concurrentAccess' => null,
        'active' => null,
        'locked' => null,
        'enableMobile' => null,
        'gender' => null,
        'phoneWork' => null,
        'phoneWorkExtension' => null,
        'phoneHome' => null,
        'phoneCell' => null,
        'phoneFax' => null,
        'address' => null,
        'groups' => null,
        'externalIdentifiers' => null,
        'allowDelegation' => null,
        'deletable' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'orgId' => false,
		'uuid' => false,
		'userId' => false,
		'displayName' => false,
		'firstName' => false,
		'lastName' => false,
		'initials' => false,
		'email' => false,
		'role' => false,
		'lang' => false,
		'concurrentAccess' => false,
		'active' => false,
		'locked' => false,
		'enableMobile' => false,
		'gender' => false,
		'phoneWork' => false,
		'phoneWorkExtension' => false,
		'phoneHome' => false,
		'phoneCell' => false,
		'phoneFax' => false,
		'address' => false,
		'groups' => false,
		'externalIdentifiers' => false,
		'allowDelegation' => false,
		'deletable' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orgId' => 'orgId',
        'uuid' => 'uuid',
        'userId' => 'userId',
        'displayName' => 'displayName',
        'firstName' => 'firstName',
        'lastName' => 'lastName',
        'initials' => 'initials',
        'email' => 'email',
        'role' => 'role',
        'lang' => 'lang',
        'concurrentAccess' => 'concurrentAccess',
        'active' => 'active',
        'locked' => 'locked',
        'enableMobile' => 'enableMobile',
        'gender' => 'gender',
        'phoneWork' => 'phoneWork',
        'phoneWorkExtension' => 'phoneWorkExtension',
        'phoneHome' => 'phoneHome',
        'phoneCell' => 'phoneCell',
        'phoneFax' => 'phoneFax',
        'address' => 'address',
        'groups' => 'groups',
        'externalIdentifiers' => 'externalIdentifiers',
        'allowDelegation' => 'allowDelegation',
        'deletable' => 'deletable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orgId' => 'setOrgId',
        'uuid' => 'setUuid',
        'userId' => 'setUserId',
        'displayName' => 'setDisplayName',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'initials' => 'setInitials',
        'email' => 'setEmail',
        'role' => 'setRole',
        'lang' => 'setLang',
        'concurrentAccess' => 'setConcurrentAccess',
        'active' => 'setActive',
        'locked' => 'setLocked',
        'enableMobile' => 'setEnableMobile',
        'gender' => 'setGender',
        'phoneWork' => 'setPhoneWork',
        'phoneWorkExtension' => 'setPhoneWorkExtension',
        'phoneHome' => 'setPhoneHome',
        'phoneCell' => 'setPhoneCell',
        'phoneFax' => 'setPhoneFax',
        'address' => 'setAddress',
        'groups' => 'setGroups',
        'externalIdentifiers' => 'setExternalIdentifiers',
        'allowDelegation' => 'setAllowDelegation',
        'deletable' => 'setDeletable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orgId' => 'getOrgId',
        'uuid' => 'getUuid',
        'userId' => 'getUserId',
        'displayName' => 'getDisplayName',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'initials' => 'getInitials',
        'email' => 'getEmail',
        'role' => 'getRole',
        'lang' => 'getLang',
        'concurrentAccess' => 'getConcurrentAccess',
        'active' => 'getActive',
        'locked' => 'getLocked',
        'enableMobile' => 'getEnableMobile',
        'gender' => 'getGender',
        'phoneWork' => 'getPhoneWork',
        'phoneWorkExtension' => 'getPhoneWorkExtension',
        'phoneHome' => 'getPhoneHome',
        'phoneCell' => 'getPhoneCell',
        'phoneFax' => 'getPhoneFax',
        'address' => 'getAddress',
        'groups' => 'getGroups',
        'externalIdentifiers' => 'getExternalIdentifiers',
        'allowDelegation' => 'getAllowDelegation',
        'deletable' => 'getDeletable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ROLE_USER = 'USER';
    public const ROLE_ADMIN = 'ADMIN';
    public const ROLE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const LANG_EN = 'en';
    public const LANG_FR = 'fr';
    public const LANG_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const ACTIVE_N = 'N';
    public const ACTIVE_Y = 'Y';
    public const ACTIVE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const LOCKED_N = 'N';
    public const LOCKED_Y = 'Y';
    public const LOCKED_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const GENDER_F = 'F';
    public const GENDER_M = 'M';
    public const GENDER_UNKNOWN = 'UNKNOWN';
    public const GENDER_EMPTY = '';
    public const GENDER_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const ALLOW_DELEGATION_FALSE = 'false';
    public const ALLOW_DELEGATION_TRUE = 'true';
    public const ALLOW_DELEGATION_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const DELETABLE_N = 'N';
    public const DELETABLE_Y = 'Y';
    public const DELETABLE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoleAllowableValues()
    {
        return [
            self::ROLE_USER,
            self::ROLE_ADMIN,
            self::ROLE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLangAllowableValues()
    {
        return [
            self::LANG_EN,
            self::LANG_FR,
            self::LANG_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActiveAllowableValues()
    {
        return [
            self::ACTIVE_N,
            self::ACTIVE_Y,
            self::ACTIVE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLockedAllowableValues()
    {
        return [
            self::LOCKED_N,
            self::LOCKED_Y,
            self::LOCKED_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_F,
            self::GENDER_M,
            self::GENDER_UNKNOWN,
            self::GENDER_EMPTY,
            self::GENDER_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowDelegationAllowableValues()
    {
        return [
            self::ALLOW_DELEGATION_FALSE,
            self::ALLOW_DELEGATION_TRUE,
            self::ALLOW_DELEGATION_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeletableAllowableValues()
    {
        return [
            self::DELETABLE_N,
            self::DELETABLE_Y,
            self::DELETABLE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('orgId', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('userId', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('initials', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('lang', $data ?? [], null);
        $this->setIfExists('concurrentAccess', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('locked', $data ?? [], null);
        $this->setIfExists('enableMobile', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('phoneWork', $data ?? [], null);
        $this->setIfExists('phoneWorkExtension', $data ?? [], null);
        $this->setIfExists('phoneHome', $data ?? [], null);
        $this->setIfExists('phoneCell', $data ?? [], null);
        $this->setIfExists('phoneFax', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('externalIdentifiers', $data ?? [], null);
        $this->setIfExists('allowDelegation', $data ?? [], null);
        $this->setIfExists('deletable', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($this->container['role']) && !in_array($this->container['role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'role', must be one of '%s'",
                $this->container['role'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLangAllowableValues();
        if (!is_null($this->container['lang']) && !in_array($this->container['lang'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lang', must be one of '%s'",
                $this->container['lang'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActiveAllowableValues();
        if (!is_null($this->container['active']) && !in_array($this->container['active'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'active', must be one of '%s'",
                $this->container['active'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLockedAllowableValues();
        if (!is_null($this->container['locked']) && !in_array($this->container['locked'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'locked', must be one of '%s'",
                $this->container['locked'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gender', must be one of '%s'",
                $this->container['gender'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAllowDelegationAllowableValues();
        if (!is_null($this->container['allowDelegation']) && !in_array($this->container['allowDelegation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allowDelegation', must be one of '%s'",
                $this->container['allowDelegation'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeletableAllowableValues();
        if (!is_null($this->container['deletable']) && !in_array($this->container['deletable'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'deletable', must be one of '%s'",
                $this->container['deletable'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orgId
     *
     * @return string|null
     */
    public function getOrgId()
    {
        return $this->container['orgId'];
    }

    /**
     * Sets orgId
     *
     * @param string|null $orgId User organization id.
     *
     * @return self
     */
    public function setOrgId($orgId)
    {
        if (is_null($orgId)) {
            throw new \InvalidArgumentException('non-nullable orgId cannot be null');
        }
        $this->container['orgId'] = $orgId;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid User globally unique identifier.
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param string|null $userId User unique identifier.
     *
     * @return self
     */
    public function setUserId($userId)
    {
        if (is_null($userId)) {
            throw new \InvalidArgumentException('non-nullable userId cannot be null');
        }
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName User display name.
     *
     * @return self
     */
    public function setDisplayName($displayName)
    {
        if (is_null($displayName)) {
            throw new \InvalidArgumentException('non-nullable displayName cannot be null');
        }
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName First name.
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        if (is_null($firstName)) {
            throw new \InvalidArgumentException('non-nullable firstName cannot be null');
        }
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName Last name.
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        if (is_null($lastName)) {
            throw new \InvalidArgumentException('non-nullable lastName cannot be null');
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets initials
     *
     * @return string|null
     */
    public function getInitials()
    {
        return $this->container['initials'];
    }

    /**
     * Sets initials
     *
     * @param string|null $initials Initials.
     *
     * @return self
     */
    public function setInitials($initials)
    {
        if (is_null($initials)) {
            throw new \InvalidArgumentException('non-nullable initials cannot be null');
        }
        $this->container['initials'] = $initials;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email address used for login.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role User role.
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            throw new \InvalidArgumentException('non-nullable role cannot be null');
        }
        $allowedValues = $this->getRoleAllowableValues();
        if (!in_array($role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'role', must be one of '%s'",
                    $role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang User language. Organisation default lang will be used if not provided.
     *
     * @return self
     */
    public function setLang($lang)
    {
        if (is_null($lang)) {
            throw new \InvalidArgumentException('non-nullable lang cannot be null');
        }
        $allowedValues = $this->getLangAllowableValues();
        if (!in_array($lang, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lang', must be one of '%s'",
                    $lang,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets concurrentAccess
     *
     * @return int|null
     */
    public function getConcurrentAccess()
    {
        return $this->container['concurrentAccess'];
    }

    /**
     * Sets concurrentAccess
     *
     * @param int|null $concurrentAccess Number of allowed concurrent accesses with this user. Default 1.
     *
     * @return self
     */
    public function setConcurrentAccess($concurrentAccess)
    {
        if (is_null($concurrentAccess)) {
            throw new \InvalidArgumentException('non-nullable concurrentAccess cannot be null');
        }
        $this->container['concurrentAccess'] = $concurrentAccess;

        return $this;
    }

    /**
     * Gets active
     *
     * @return string|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param string|null $active Is the user active (N: false, Y: true).
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $allowedValues = $this->getActiveAllowableValues();
        if (!in_array($active, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'active', must be one of '%s'",
                    $active,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return string|null
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param string|null $locked Is the user locked (N: false, Y: true).
     *
     * @return self
     */
    public function setLocked($locked)
    {
        if (is_null($locked)) {
            throw new \InvalidArgumentException('non-nullable locked cannot be null');
        }
        $allowedValues = $this->getLockedAllowableValues();
        if (!in_array($locked, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'locked', must be one of '%s'",
                    $locked,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets enableMobile
     *
     * @return bool|null
     */
    public function getEnableMobile()
    {
        return $this->container['enableMobile'];
    }

    /**
     * Sets enableMobile
     *
     * @param bool|null $enableMobile Enable Mobile version. Default: false.
     *
     * @return self
     */
    public function setEnableMobile($enableMobile)
    {
        if (is_null($enableMobile)) {
            throw new \InvalidArgumentException('non-nullable enableMobile cannot be null');
        }
        $this->container['enableMobile'] = $enableMobile;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender Gender of this user.
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gender', must be one of '%s'",
                    $gender,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets phoneWork
     *
     * @return string|null
     */
    public function getPhoneWork()
    {
        return $this->container['phoneWork'];
    }

    /**
     * Sets phoneWork
     *
     * @param string|null $phoneWork Work phone number of this user.
     *
     * @return self
     */
    public function setPhoneWork($phoneWork)
    {
        if (is_null($phoneWork)) {
            throw new \InvalidArgumentException('non-nullable phoneWork cannot be null');
        }
        $this->container['phoneWork'] = $phoneWork;

        return $this;
    }

    /**
     * Gets phoneWorkExtension
     *
     * @return string|null
     */
    public function getPhoneWorkExtension()
    {
        return $this->container['phoneWorkExtension'];
    }

    /**
     * Sets phoneWorkExtension
     *
     * @param string|null $phoneWorkExtension Extension of work phone number of this user.
     *
     * @return self
     */
    public function setPhoneWorkExtension($phoneWorkExtension)
    {
        if (is_null($phoneWorkExtension)) {
            throw new \InvalidArgumentException('non-nullable phoneWorkExtension cannot be null');
        }
        $this->container['phoneWorkExtension'] = $phoneWorkExtension;

        return $this;
    }

    /**
     * Gets phoneHome
     *
     * @return string|null
     */
    public function getPhoneHome()
    {
        return $this->container['phoneHome'];
    }

    /**
     * Sets phoneHome
     *
     * @param string|null $phoneHome Home phone number of this user..
     *
     * @return self
     */
    public function setPhoneHome($phoneHome)
    {
        if (is_null($phoneHome)) {
            throw new \InvalidArgumentException('non-nullable phoneHome cannot be null');
        }
        $this->container['phoneHome'] = $phoneHome;

        return $this;
    }

    /**
     * Gets phoneCell
     *
     * @return string|null
     */
    public function getPhoneCell()
    {
        return $this->container['phoneCell'];
    }

    /**
     * Sets phoneCell
     *
     * @param string|null $phoneCell Cellphone number of this user.
     *
     * @return self
     */
    public function setPhoneCell($phoneCell)
    {
        if (is_null($phoneCell)) {
            throw new \InvalidArgumentException('non-nullable phoneCell cannot be null');
        }
        $this->container['phoneCell'] = $phoneCell;

        return $this;
    }

    /**
     * Gets phoneFax
     *
     * @return string|null
     */
    public function getPhoneFax()
    {
        return $this->container['phoneFax'];
    }

    /**
     * Sets phoneFax
     *
     * @param string|null $phoneFax Fax phone number of this user.
     *
     * @return self
     */
    public function setPhoneFax($phoneFax)
    {
        if (is_null($phoneFax)) {
            throw new \InvalidArgumentException('non-nullable phoneFax cannot be null');
        }
        $this->container['phoneFax'] = $phoneFax;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress[]|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress[]|null $address Address of this user.
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyProvisioningGroupItem[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyProvisioningGroupItem[]|null $groups Groups the user is a member of.
     *
     * @return self
     */
    public function setGroups($groups)
    {
        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets externalIdentifiers
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyProvisioningUserIdentifier[]|null
     */
    public function getExternalIdentifiers()
    {
        return $this->container['externalIdentifiers'];
    }

    /**
     * Sets externalIdentifiers
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyProvisioningUserIdentifier[]|null $externalIdentifiers List of identifier to uniquely identify the user. (Ex: Extranet2 or domain userId).
     *
     * @return self
     */
    public function setExternalIdentifiers($externalIdentifiers)
    {
        if (is_null($externalIdentifiers)) {
            throw new \InvalidArgumentException('non-nullable externalIdentifiers cannot be null');
        }
        $this->container['externalIdentifiers'] = $externalIdentifiers;

        return $this;
    }

    /**
     * Gets allowDelegation
     *
     * @return string|null
     */
    public function getAllowDelegation()
    {
        return $this->container['allowDelegation'];
    }

    /**
     * Sets allowDelegation
     *
     * @param string|null $allowDelegation Allow the user to delegate access to his data.
     *
     * @return self
     */
    public function setAllowDelegation($allowDelegation)
    {
        if (is_null($allowDelegation)) {
            throw new \InvalidArgumentException('non-nullable allowDelegation cannot be null');
        }
        $allowedValues = $this->getAllowDelegationAllowableValues();
        if (!in_array($allowDelegation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allowDelegation', must be one of '%s'",
                    $allowDelegation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allowDelegation'] = $allowDelegation;

        return $this;
    }

    /**
     * Gets deletable
     *
     * @return string|null
     */
    public function getDeletable()
    {
        return $this->container['deletable'];
    }

    /**
     * Sets deletable
     *
     * @param string|null $deletable Can the user be deleted (N: false, Y: true).
     *
     * @return self
     */
    public function setDeletable($deletable)
    {
        if (is_null($deletable)) {
            throw new \InvalidArgumentException('non-nullable deletable cannot be null');
        }
        $allowedValues = $this->getDeletableAllowableValues();
        if (!in_array($deletable, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'deletable', must be one of '%s'",
                    $deletable,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deletable'] = $deletable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


