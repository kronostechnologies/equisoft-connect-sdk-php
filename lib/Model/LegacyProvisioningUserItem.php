<?php
/**
 * LegacyProvisioningUserItem
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * LegacyProvisioningUserItem Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LegacyProvisioningUserItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'legacy.provisioning.UserItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'orgId' => 'string''uuid' => 'string''userId' => 'string''displayName' => 'string''firstName' => 'string''lastName' => 'string''initials' => 'string''email' => 'string''role' => 'string''lang' => 'string''concurrentAccess' => 'int''active' => 'string''locked' => 'string''enableMobile' => 'string''gender' => 'string''phoneWork' => 'string''phoneWorkExtension' => 'string''phoneHome' => 'string''phoneCell' => 'string''phoneFax' => 'string''address' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress[]''groups' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyProvisioningGroupItem[]''externalIdentifiers' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyProvisioningUserIdentifier[]''allowDelegation' => 'string''deletable' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'orgId' => null'uuid' => null'userId' => null'displayName' => null'firstName' => null'lastName' => null'initials' => null'email' => null'role' => null'lang' => null'concurrentAccess' => null'active' => null'locked' => null'enableMobile' => null'gender' => null'phoneWork' => null'phoneWorkExtension' => null'phoneHome' => null'phoneCell' => null'phoneFax' => null'address' => null'groups' => null'externalIdentifiers' => null'allowDelegation' => null'deletable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orgId' => 'orgId''uuid' => 'uuid''userId' => 'userId''displayName' => 'displayName''firstName' => 'firstName''lastName' => 'lastName''initials' => 'initials''email' => 'email''role' => 'role''lang' => 'lang''concurrentAccess' => 'concurrentAccess''active' => 'active''locked' => 'locked''enableMobile' => 'enableMobile''gender' => 'gender''phoneWork' => 'phoneWork''phoneWorkExtension' => 'phoneWorkExtension''phoneHome' => 'phoneHome''phoneCell' => 'phoneCell''phoneFax' => 'phoneFax''address' => 'address''groups' => 'groups''externalIdentifiers' => 'externalIdentifiers''allowDelegation' => 'allowDelegation''deletable' => 'deletable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orgId' => 'setOrgId''uuid' => 'setUuid''userId' => 'setUserId''displayName' => 'setDisplayName''firstName' => 'setFirstName''lastName' => 'setLastName''initials' => 'setInitials''email' => 'setEmail''role' => 'setRole''lang' => 'setLang''concurrentAccess' => 'setConcurrentAccess''active' => 'setActive''locked' => 'setLocked''enableMobile' => 'setEnableMobile''gender' => 'setGender''phoneWork' => 'setPhoneWork''phoneWorkExtension' => 'setPhoneWorkExtension''phoneHome' => 'setPhoneHome''phoneCell' => 'setPhoneCell''phoneFax' => 'setPhoneFax''address' => 'setAddress''groups' => 'setGroups''externalIdentifiers' => 'setExternalIdentifiers''allowDelegation' => 'setAllowDelegation''deletable' => 'setDeletable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orgId' => 'getOrgId''uuid' => 'getUuid''userId' => 'getUserId''displayName' => 'getDisplayName''firstName' => 'getFirstName''lastName' => 'getLastName''initials' => 'getInitials''email' => 'getEmail''role' => 'getRole''lang' => 'getLang''concurrentAccess' => 'getConcurrentAccess''active' => 'getActive''locked' => 'getLocked''enableMobile' => 'getEnableMobile''gender' => 'getGender''phoneWork' => 'getPhoneWork''phoneWorkExtension' => 'getPhoneWorkExtension''phoneHome' => 'getPhoneHome''phoneCell' => 'getPhoneCell''phoneFax' => 'getPhoneFax''address' => 'getAddress''groups' => 'getGroups''externalIdentifiers' => 'getExternalIdentifiers''allowDelegation' => 'getAllowDelegation''deletable' => 'getDeletable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['orgId'] = isset($data['orgId']) ? $data['orgId'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['userId'] = isset($data['userId']) ? $data['userId'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['firstName'] = isset($data['firstName']) ? $data['firstName'] : null;
        $this->container['lastName'] = isset($data['lastName']) ? $data['lastName'] : null;
        $this->container['initials'] = isset($data['initials']) ? $data['initials'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['concurrentAccess'] = isset($data['concurrentAccess']) ? $data['concurrentAccess'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['enableMobile'] = isset($data['enableMobile']) ? $data['enableMobile'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['phoneWork'] = isset($data['phoneWork']) ? $data['phoneWork'] : null;
        $this->container['phoneWorkExtension'] = isset($data['phoneWorkExtension']) ? $data['phoneWorkExtension'] : null;
        $this->container['phoneHome'] = isset($data['phoneHome']) ? $data['phoneHome'] : null;
        $this->container['phoneCell'] = isset($data['phoneCell']) ? $data['phoneCell'] : null;
        $this->container['phoneFax'] = isset($data['phoneFax']) ? $data['phoneFax'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['externalIdentifiers'] = isset($data['externalIdentifiers']) ? $data['externalIdentifiers'] : null;
        $this->container['allowDelegation'] = isset($data['allowDelegation']) ? $data['allowDelegation'] : null;
        $this->container['deletable'] = isset($data['deletable']) ? $data['deletable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orgId
     *
     * @return string|null
     */
    public function getOrgId()
    {
        return $this->container['orgId'];
    }

    /**
     * Sets orgId
     *
     * @param string|null $orgId User organization id
     *
     * @return $this
     */
    public function setOrgId($orgId)
    {
        $this->container['orgId'] = $orgId;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid User globaly unique identifier
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param string|null $userId User unique identifier
     *
     * @return $this
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName User display name
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName First name
     *
     * @return $this
     */
    public function setFirstName($firstName)
    {
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName Last name
     *
     * @return $this
     */
    public function setLastName($lastName)
    {
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets initials
     *
     * @return string|null
     */
    public function getInitials()
    {
        return $this->container['initials'];
    }

    /**
     * Sets initials
     *
     * @param string|null $initials Initials
     *
     * @return $this
     */
    public function setInitials($initials)
    {
        $this->container['initials'] = $initials;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email address used for login
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role User role. Accepts USER or ADMIN
     *
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang User language. Organisation default lang will be used if not provided. Accepts FR or EN.
     *
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets concurrentAccess
     *
     * @return int|null
     */
    public function getConcurrentAccess()
    {
        return $this->container['concurrentAccess'];
    }

    /**
     * Sets concurrentAccess
     *
     * @param int|null $concurrentAccess Number of allowed concurrent accesses with this user. Default 1.
     *
     * @return $this
     */
    public function setConcurrentAccess($concurrentAccess)
    {
        $this->container['concurrentAccess'] = $concurrentAccess;

        return $this;
    }

    /**
     * Gets active
     *
     * @return string|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param string|null $active User is active or not (true or false)
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return string|null
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param string|null $locked User is locked or not (true or false)
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets enableMobile
     *
     * @return string|null
     */
    public function getEnableMobile()
    {
        return $this->container['enableMobile'];
    }

    /**
     * Sets enableMobile
     *
     * @param string|null $enableMobile Enable Mobile version. Accepts true or false. Default false
     *
     * @return $this
     */
    public function setEnableMobile($enableMobile)
    {
        $this->container['enableMobile'] = $enableMobile;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender Gender of this user. Accepts M or F.
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets phoneWork
     *
     * @return string|null
     */
    public function getPhoneWork()
    {
        return $this->container['phoneWork'];
    }

    /**
     * Sets phoneWork
     *
     * @param string|null $phoneWork Work phone number of this user
     *
     * @return $this
     */
    public function setPhoneWork($phoneWork)
    {
        $this->container['phoneWork'] = $phoneWork;

        return $this;
    }

    /**
     * Gets phoneWorkExtension
     *
     * @return string|null
     */
    public function getPhoneWorkExtension()
    {
        return $this->container['phoneWorkExtension'];
    }

    /**
     * Sets phoneWorkExtension
     *
     * @param string|null $phoneWorkExtension Extension of work phone number of this user.
     *
     * @return $this
     */
    public function setPhoneWorkExtension($phoneWorkExtension)
    {
        $this->container['phoneWorkExtension'] = $phoneWorkExtension;

        return $this;
    }

    /**
     * Gets phoneHome
     *
     * @return string|null
     */
    public function getPhoneHome()
    {
        return $this->container['phoneHome'];
    }

    /**
     * Sets phoneHome
     *
     * @param string|null $phoneHome Home phone number of this user.
     *
     * @return $this
     */
    public function setPhoneHome($phoneHome)
    {
        $this->container['phoneHome'] = $phoneHome;

        return $this;
    }

    /**
     * Gets phoneCell
     *
     * @return string|null
     */
    public function getPhoneCell()
    {
        return $this->container['phoneCell'];
    }

    /**
     * Sets phoneCell
     *
     * @param string|null $phoneCell Cellphone number of this user.
     *
     * @return $this
     */
    public function setPhoneCell($phoneCell)
    {
        $this->container['phoneCell'] = $phoneCell;

        return $this;
    }

    /**
     * Gets phoneFax
     *
     * @return string|null
     */
    public function getPhoneFax()
    {
        return $this->container['phoneFax'];
    }

    /**
     * Sets phoneFax
     *
     * @param string|null $phoneFax Fax phone number of this user.
     *
     * @return $this
     */
    public function setPhoneFax($phoneFax)
    {
        $this->container['phoneFax'] = $phoneFax;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress[]|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress[]|null $address Address of this user.
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyProvisioningGroupItem[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyProvisioningGroupItem[]|null $groups Groups the user is a member of.
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets externalIdentifiers
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyProvisioningUserIdentifier[]|null
     */
    public function getExternalIdentifiers()
    {
        return $this->container['externalIdentifiers'];
    }

    /**
     * Sets externalIdentifiers
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyProvisioningUserIdentifier[]|null $externalIdentifiers List of identifier to uniquely identify the user. (Ex: Extranet2 or domain userId)
     *
     * @return $this
     */
    public function setExternalIdentifiers($externalIdentifiers)
    {
        $this->container['externalIdentifiers'] = $externalIdentifiers;

        return $this;
    }

    /**
     * Gets allowDelegation
     *
     * @return string|null
     */
    public function getAllowDelegation()
    {
        return $this->container['allowDelegation'];
    }

    /**
     * Sets allowDelegation
     *
     * @param string|null $allowDelegation Allow the user to delegate access to his data Accepts true or false.
     *
     * @return $this
     */
    public function setAllowDelegation($allowDelegation)
    {
        $this->container['allowDelegation'] = $allowDelegation;

        return $this;
    }

    /**
     * Gets deletable
     *
     * @return string|null
     */
    public function getDeletable()
    {
        return $this->container['deletable'];
    }

    /**
     * Sets deletable
     *
     * @param string|null $deletable Can the user be deleted Accepts true or false.
     *
     * @return $this
     */
    public function setDeletable($deletable)
    {
        $this->container['deletable'] = $deletable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


