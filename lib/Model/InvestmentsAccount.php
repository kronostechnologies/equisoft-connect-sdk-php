<?php
/**
 * InvestmentsAccount
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-equisoft1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * InvestmentsAccount Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvestmentsAccount implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'investments.Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'accountNumber' => 'string',
        'owner1' => 'string',
        'owner2' => 'string',
        'type' => 'string',
        'description' => 'string',
        'jointSignature' => 'string',
        'jointSurvivor' => 'string',
        'inTrust' => 'bool',
        'groupPlan' => 'string',
        'recipient' => 'string',
        'spousal' => 'bool',
        'selfDirectedAccount' => 'bool',
        'selfDirectedAccountNumber' => 'string',
        'lockedIn' => 'bool',
        'currency' => 'string',
        'taxCode' => 'string',
        'taxStatus' => 'string',
        'marketValue' => 'float',
        'marketValueUpdateDate' => '\DateTime',
        'designation' => 'string',
        'designationIntermediary' => 'string',
        'designationIntermediaryAccountNumber' => 'string',
        'notes' => 'string',
        'managed' => 'bool',
        'dataSource' => 'string',
        'openedDate' => '\DateTime',
        'closedDate' => '\DateTime',
        'followUpDate' => '\DateTime',
        'status' => 'bool',
        'createdDate' => '\DateTime',
        'createdBy' => 'string',
        'modifiedDate' => '\DateTime',
        'modifiedBy' => 'string',
        'users' => '\Equisoft\SDK\EquisoftConnect\Model\InvestmentsAccountUser[]',
        'assets' => '\Equisoft\SDK\EquisoftConnect\Model\InvestmentsAsset[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'accountNumber' => null,
        'owner1' => null,
        'owner2' => null,
        'type' => null,
        'description' => null,
        'jointSignature' => null,
        'jointSurvivor' => null,
        'inTrust' => null,
        'groupPlan' => null,
        'recipient' => null,
        'spousal' => null,
        'selfDirectedAccount' => null,
        'selfDirectedAccountNumber' => null,
        'lockedIn' => null,
        'currency' => null,
        'taxCode' => null,
        'taxStatus' => null,
        'marketValue' => 'float',
        'marketValueUpdateDate' => 'date',
        'designation' => null,
        'designationIntermediary' => null,
        'designationIntermediaryAccountNumber' => null,
        'notes' => null,
        'managed' => null,
        'dataSource' => null,
        'openedDate' => 'date',
        'closedDate' => 'date',
        'followUpDate' => 'date',
        'status' => null,
        'createdDate' => 'date',
        'createdBy' => null,
        'modifiedDate' => 'date',
        'modifiedBy' => null,
        'users' => null,
        'assets' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'accountNumber' => false,
        'owner1' => false,
        'owner2' => false,
        'type' => false,
        'description' => false,
        'jointSignature' => false,
        'jointSurvivor' => false,
        'inTrust' => false,
        'groupPlan' => false,
        'recipient' => false,
        'spousal' => false,
        'selfDirectedAccount' => false,
        'selfDirectedAccountNumber' => false,
        'lockedIn' => false,
        'currency' => false,
        'taxCode' => false,
        'taxStatus' => false,
        'marketValue' => false,
        'marketValueUpdateDate' => false,
        'designation' => false,
        'designationIntermediary' => false,
        'designationIntermediaryAccountNumber' => false,
        'notes' => false,
        'managed' => false,
        'dataSource' => false,
        'openedDate' => false,
        'closedDate' => false,
        'followUpDate' => false,
        'status' => false,
        'createdDate' => false,
        'createdBy' => false,
        'modifiedDate' => false,
        'modifiedBy' => false,
        'users' => false,
        'assets' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'accountNumber' => 'accountNumber',
        'owner1' => 'owner1',
        'owner2' => 'owner2',
        'type' => 'type',
        'description' => 'description',
        'jointSignature' => 'jointSignature',
        'jointSurvivor' => 'jointSurvivor',
        'inTrust' => 'inTrust',
        'groupPlan' => 'groupPlan',
        'recipient' => 'recipient',
        'spousal' => 'spousal',
        'selfDirectedAccount' => 'selfDirectedAccount',
        'selfDirectedAccountNumber' => 'selfDirectedAccountNumber',
        'lockedIn' => 'lockedIn',
        'currency' => 'currency',
        'taxCode' => 'taxCode',
        'taxStatus' => 'taxStatus',
        'marketValue' => 'marketValue',
        'marketValueUpdateDate' => 'marketValueUpdateDate',
        'designation' => 'designation',
        'designationIntermediary' => 'designationIntermediary',
        'designationIntermediaryAccountNumber' => 'designationIntermediaryAccountNumber',
        'notes' => 'notes',
        'managed' => 'managed',
        'dataSource' => 'dataSource',
        'openedDate' => 'openedDate',
        'closedDate' => 'closedDate',
        'followUpDate' => 'followUpDate',
        'status' => 'status',
        'createdDate' => 'createdDate',
        'createdBy' => 'createdBy',
        'modifiedDate' => 'modifiedDate',
        'modifiedBy' => 'modifiedBy',
        'users' => 'users',
        'assets' => 'assets'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'accountNumber' => 'setAccountNumber',
        'owner1' => 'setOwner1',
        'owner2' => 'setOwner2',
        'type' => 'setType',
        'description' => 'setDescription',
        'jointSignature' => 'setJointSignature',
        'jointSurvivor' => 'setJointSurvivor',
        'inTrust' => 'setInTrust',
        'groupPlan' => 'setGroupPlan',
        'recipient' => 'setRecipient',
        'spousal' => 'setSpousal',
        'selfDirectedAccount' => 'setSelfDirectedAccount',
        'selfDirectedAccountNumber' => 'setSelfDirectedAccountNumber',
        'lockedIn' => 'setLockedIn',
        'currency' => 'setCurrency',
        'taxCode' => 'setTaxCode',
        'taxStatus' => 'setTaxStatus',
        'marketValue' => 'setMarketValue',
        'marketValueUpdateDate' => 'setMarketValueUpdateDate',
        'designation' => 'setDesignation',
        'designationIntermediary' => 'setDesignationIntermediary',
        'designationIntermediaryAccountNumber' => 'setDesignationIntermediaryAccountNumber',
        'notes' => 'setNotes',
        'managed' => 'setManaged',
        'dataSource' => 'setDataSource',
        'openedDate' => 'setOpenedDate',
        'closedDate' => 'setClosedDate',
        'followUpDate' => 'setFollowUpDate',
        'status' => 'setStatus',
        'createdDate' => 'setCreatedDate',
        'createdBy' => 'setCreatedBy',
        'modifiedDate' => 'setModifiedDate',
        'modifiedBy' => 'setModifiedBy',
        'users' => 'setUsers',
        'assets' => 'setAssets'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'accountNumber' => 'getAccountNumber',
        'owner1' => 'getOwner1',
        'owner2' => 'getOwner2',
        'type' => 'getType',
        'description' => 'getDescription',
        'jointSignature' => 'getJointSignature',
        'jointSurvivor' => 'getJointSurvivor',
        'inTrust' => 'getInTrust',
        'groupPlan' => 'getGroupPlan',
        'recipient' => 'getRecipient',
        'spousal' => 'getSpousal',
        'selfDirectedAccount' => 'getSelfDirectedAccount',
        'selfDirectedAccountNumber' => 'getSelfDirectedAccountNumber',
        'lockedIn' => 'getLockedIn',
        'currency' => 'getCurrency',
        'taxCode' => 'getTaxCode',
        'taxStatus' => 'getTaxStatus',
        'marketValue' => 'getMarketValue',
        'marketValueUpdateDate' => 'getMarketValueUpdateDate',
        'designation' => 'getDesignation',
        'designationIntermediary' => 'getDesignationIntermediary',
        'designationIntermediaryAccountNumber' => 'getDesignationIntermediaryAccountNumber',
        'notes' => 'getNotes',
        'managed' => 'getManaged',
        'dataSource' => 'getDataSource',
        'openedDate' => 'getOpenedDate',
        'closedDate' => 'getClosedDate',
        'followUpDate' => 'getFollowUpDate',
        'status' => 'getStatus',
        'createdDate' => 'getCreatedDate',
        'createdBy' => 'getCreatedBy',
        'modifiedDate' => 'getModifiedDate',
        'modifiedBy' => 'getModifiedBy',
        'users' => 'getUsers',
        'assets' => 'getAssets'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('accountNumber', $data ?? [], null);
        $this->setIfExists('owner1', $data ?? [], null);
        $this->setIfExists('owner2', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('jointSignature', $data ?? [], null);
        $this->setIfExists('jointSurvivor', $data ?? [], null);
        $this->setIfExists('inTrust', $data ?? [], null);
        $this->setIfExists('groupPlan', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
        $this->setIfExists('spousal', $data ?? [], null);
        $this->setIfExists('selfDirectedAccount', $data ?? [], null);
        $this->setIfExists('selfDirectedAccountNumber', $data ?? [], null);
        $this->setIfExists('lockedIn', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('taxCode', $data ?? [], null);
        $this->setIfExists('taxStatus', $data ?? [], null);
        $this->setIfExists('marketValue', $data ?? [], null);
        $this->setIfExists('marketValueUpdateDate', $data ?? [], null);
        $this->setIfExists('designation', $data ?? [], null);
        $this->setIfExists('designationIntermediary', $data ?? [], null);
        $this->setIfExists('designationIntermediaryAccountNumber', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('managed', $data ?? [], null);
        $this->setIfExists('dataSource', $data ?? [], null);
        $this->setIfExists('openedDate', $data ?? [], null);
        $this->setIfExists('closedDate', $data ?? [], null);
        $this->setIfExists('followUpDate', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('createdDate', $data ?? [], null);
        $this->setIfExists('createdBy', $data ?? [], null);
        $this->setIfExists('modifiedDate', $data ?? [], null);
        $this->setIfExists('modifiedBy', $data ?? [], null);
        $this->setIfExists('users', $data ?? [], null);
        $this->setIfExists('assets', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets accountNumber
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['accountNumber'];
    }

    /**
     * Sets accountNumber
     *
     * @param string|null $accountNumber accountNumber
     *
     * @return self
     */
    public function setAccountNumber($accountNumber)
    {
        if (is_null($accountNumber)) {
            throw new \InvalidArgumentException('non-nullable accountNumber cannot be null');
        }
        $this->container['accountNumber'] = $accountNumber;

        return $this;
    }

    /**
     * Gets owner1
     *
     * @return string|null
     */
    public function getOwner1()
    {
        return $this->container['owner1'];
    }

    /**
     * Sets owner1
     *
     * @param string|null $owner1 owner1
     *
     * @return self
     */
    public function setOwner1($owner1)
    {
        if (is_null($owner1)) {
            throw new \InvalidArgumentException('non-nullable owner1 cannot be null');
        }
        $this->container['owner1'] = $owner1;

        return $this;
    }

    /**
     * Gets owner2
     *
     * @return string|null
     */
    public function getOwner2()
    {
        return $this->container['owner2'];
    }

    /**
     * Sets owner2
     *
     * @param string|null $owner2 owner2
     *
     * @return self
     */
    public function setOwner2($owner2)
    {
        if (is_null($owner2)) {
            throw new \InvalidArgumentException('non-nullable owner2 cannot be null');
        }
        $this->container['owner2'] = $owner2;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets jointSignature
     *
     * @return string|null
     */
    public function getJointSignature()
    {
        return $this->container['jointSignature'];
    }

    /**
     * Sets jointSignature
     *
     * @param string|null $jointSignature jointSignature
     *
     * @return self
     */
    public function setJointSignature($jointSignature)
    {
        if (is_null($jointSignature)) {
            throw new \InvalidArgumentException('non-nullable jointSignature cannot be null');
        }
        $this->container['jointSignature'] = $jointSignature;

        return $this;
    }

    /**
     * Gets jointSurvivor
     *
     * @return string|null
     */
    public function getJointSurvivor()
    {
        return $this->container['jointSurvivor'];
    }

    /**
     * Sets jointSurvivor
     *
     * @param string|null $jointSurvivor jointSurvivor
     *
     * @return self
     */
    public function setJointSurvivor($jointSurvivor)
    {
        if (is_null($jointSurvivor)) {
            throw new \InvalidArgumentException('non-nullable jointSurvivor cannot be null');
        }
        $this->container['jointSurvivor'] = $jointSurvivor;

        return $this;
    }

    /**
     * Gets inTrust
     *
     * @return bool|null
     */
    public function getInTrust()
    {
        return $this->container['inTrust'];
    }

    /**
     * Sets inTrust
     *
     * @param bool|null $inTrust inTrust
     *
     * @return self
     */
    public function setInTrust($inTrust)
    {
        if (is_null($inTrust)) {
            throw new \InvalidArgumentException('non-nullable inTrust cannot be null');
        }
        $this->container['inTrust'] = $inTrust;

        return $this;
    }

    /**
     * Gets groupPlan
     *
     * @return string|null
     */
    public function getGroupPlan()
    {
        return $this->container['groupPlan'];
    }

    /**
     * Sets groupPlan
     *
     * @param string|null $groupPlan groupPlan
     *
     * @return self
     */
    public function setGroupPlan($groupPlan)
    {
        if (is_null($groupPlan)) {
            throw new \InvalidArgumentException('non-nullable groupPlan cannot be null');
        }
        $this->container['groupPlan'] = $groupPlan;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return string|null
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param string|null $recipient recipient
     *
     * @return self
     */
    public function setRecipient($recipient)
    {
        if (is_null($recipient)) {
            throw new \InvalidArgumentException('non-nullable recipient cannot be null');
        }
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets spousal
     *
     * @return bool|null
     */
    public function getSpousal()
    {
        return $this->container['spousal'];
    }

    /**
     * Sets spousal
     *
     * @param bool|null $spousal spousal
     *
     * @return self
     */
    public function setSpousal($spousal)
    {
        if (is_null($spousal)) {
            throw new \InvalidArgumentException('non-nullable spousal cannot be null');
        }
        $this->container['spousal'] = $spousal;

        return $this;
    }

    /**
     * Gets selfDirectedAccount
     *
     * @return bool|null
     */
    public function getSelfDirectedAccount()
    {
        return $this->container['selfDirectedAccount'];
    }

    /**
     * Sets selfDirectedAccount
     *
     * @param bool|null $selfDirectedAccount selfDirectedAccount
     *
     * @return self
     */
    public function setSelfDirectedAccount($selfDirectedAccount)
    {
        if (is_null($selfDirectedAccount)) {
            throw new \InvalidArgumentException('non-nullable selfDirectedAccount cannot be null');
        }
        $this->container['selfDirectedAccount'] = $selfDirectedAccount;

        return $this;
    }

    /**
     * Gets selfDirectedAccountNumber
     *
     * @return string|null
     */
    public function getSelfDirectedAccountNumber()
    {
        return $this->container['selfDirectedAccountNumber'];
    }

    /**
     * Sets selfDirectedAccountNumber
     *
     * @param string|null $selfDirectedAccountNumber selfDirectedAccountNumber
     *
     * @return self
     */
    public function setSelfDirectedAccountNumber($selfDirectedAccountNumber)
    {
        if (is_null($selfDirectedAccountNumber)) {
            throw new \InvalidArgumentException('non-nullable selfDirectedAccountNumber cannot be null');
        }
        $this->container['selfDirectedAccountNumber'] = $selfDirectedAccountNumber;

        return $this;
    }

    /**
     * Gets lockedIn
     *
     * @return bool|null
     */
    public function getLockedIn()
    {
        return $this->container['lockedIn'];
    }

    /**
     * Sets lockedIn
     *
     * @param bool|null $lockedIn lockedIn
     *
     * @return self
     */
    public function setLockedIn($lockedIn)
    {
        if (is_null($lockedIn)) {
            throw new \InvalidArgumentException('non-nullable lockedIn cannot be null');
        }
        $this->container['lockedIn'] = $lockedIn;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets taxCode
     *
     * @return string|null
     */
    public function getTaxCode()
    {
        return $this->container['taxCode'];
    }

    /**
     * Sets taxCode
     *
     * @param string|null $taxCode taxCode
     *
     * @return self
     */
    public function setTaxCode($taxCode)
    {
        if (is_null($taxCode)) {
            throw new \InvalidArgumentException('non-nullable taxCode cannot be null');
        }
        $this->container['taxCode'] = $taxCode;

        return $this;
    }

    /**
     * Gets taxStatus
     *
     * @return string|null
     */
    public function getTaxStatus()
    {
        return $this->container['taxStatus'];
    }

    /**
     * Sets taxStatus
     *
     * @param string|null $taxStatus taxStatus
     *
     * @return self
     */
    public function setTaxStatus($taxStatus)
    {
        if (is_null($taxStatus)) {
            throw new \InvalidArgumentException('non-nullable taxStatus cannot be null');
        }
        $this->container['taxStatus'] = $taxStatus;

        return $this;
    }

    /**
     * Gets marketValue
     *
     * @return float|null
     */
    public function getMarketValue()
    {
        return $this->container['marketValue'];
    }

    /**
     * Sets marketValue
     *
     * @param float|null $marketValue marketValue
     *
     * @return self
     */
    public function setMarketValue($marketValue)
    {
        if (is_null($marketValue)) {
            throw new \InvalidArgumentException('non-nullable marketValue cannot be null');
        }
        $this->container['marketValue'] = $marketValue;

        return $this;
    }

    /**
     * Gets marketValueUpdateDate
     *
     * @return \DateTime|null
     */
    public function getMarketValueUpdateDate()
    {
        return $this->container['marketValueUpdateDate'];
    }

    /**
     * Sets marketValueUpdateDate
     *
     * @param \DateTime|null $marketValueUpdateDate marketValueUpdateDate
     *
     * @return self
     */
    public function setMarketValueUpdateDate($marketValueUpdateDate)
    {
        if (is_null($marketValueUpdateDate)) {
            throw new \InvalidArgumentException('non-nullable marketValueUpdateDate cannot be null');
        }
        $this->container['marketValueUpdateDate'] = $marketValueUpdateDate;

        return $this;
    }

    /**
     * Gets designation
     *
     * @return string|null
     */
    public function getDesignation()
    {
        return $this->container['designation'];
    }

    /**
     * Sets designation
     *
     * @param string|null $designation designation
     *
     * @return self
     */
    public function setDesignation($designation)
    {
        if (is_null($designation)) {
            throw new \InvalidArgumentException('non-nullable designation cannot be null');
        }
        $this->container['designation'] = $designation;

        return $this;
    }

    /**
     * Gets designationIntermediary
     *
     * @return string|null
     */
    public function getDesignationIntermediary()
    {
        return $this->container['designationIntermediary'];
    }

    /**
     * Sets designationIntermediary
     *
     * @param string|null $designationIntermediary designationIntermediary
     *
     * @return self
     */
    public function setDesignationIntermediary($designationIntermediary)
    {
        if (is_null($designationIntermediary)) {
            throw new \InvalidArgumentException('non-nullable designationIntermediary cannot be null');
        }
        $this->container['designationIntermediary'] = $designationIntermediary;

        return $this;
    }

    /**
     * Gets designationIntermediaryAccountNumber
     *
     * @return string|null
     */
    public function getDesignationIntermediaryAccountNumber()
    {
        return $this->container['designationIntermediaryAccountNumber'];
    }

    /**
     * Sets designationIntermediaryAccountNumber
     *
     * @param string|null $designationIntermediaryAccountNumber designationIntermediaryAccountNumber
     *
     * @return self
     */
    public function setDesignationIntermediaryAccountNumber($designationIntermediaryAccountNumber)
    {
        if (is_null($designationIntermediaryAccountNumber)) {
            throw new \InvalidArgumentException('non-nullable designationIntermediaryAccountNumber cannot be null');
        }
        $this->container['designationIntermediaryAccountNumber'] = $designationIntermediaryAccountNumber;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets managed
     *
     * @return bool|null
     */
    public function getManaged()
    {
        return $this->container['managed'];
    }

    /**
     * Sets managed
     *
     * @param bool|null $managed managed
     *
     * @return self
     */
    public function setManaged($managed)
    {
        if (is_null($managed)) {
            throw new \InvalidArgumentException('non-nullable managed cannot be null');
        }
        $this->container['managed'] = $managed;

        return $this;
    }

    /**
     * Gets dataSource
     *
     * @return string|null
     */
    public function getDataSource()
    {
        return $this->container['dataSource'];
    }

    /**
     * Sets dataSource
     *
     * @param string|null $dataSource dataSource
     *
     * @return self
     */
    public function setDataSource($dataSource)
    {
        if (is_null($dataSource)) {
            throw new \InvalidArgumentException('non-nullable dataSource cannot be null');
        }
        $this->container['dataSource'] = $dataSource;

        return $this;
    }

    /**
     * Gets openedDate
     *
     * @return \DateTime|null
     */
    public function getOpenedDate()
    {
        return $this->container['openedDate'];
    }

    /**
     * Sets openedDate
     *
     * @param \DateTime|null $openedDate openedDate
     *
     * @return self
     */
    public function setOpenedDate($openedDate)
    {
        if (is_null($openedDate)) {
            throw new \InvalidArgumentException('non-nullable openedDate cannot be null');
        }
        $this->container['openedDate'] = $openedDate;

        return $this;
    }

    /**
     * Gets closedDate
     *
     * @return \DateTime|null
     */
    public function getClosedDate()
    {
        return $this->container['closedDate'];
    }

    /**
     * Sets closedDate
     *
     * @param \DateTime|null $closedDate closedDate
     *
     * @return self
     */
    public function setClosedDate($closedDate)
    {
        if (is_null($closedDate)) {
            throw new \InvalidArgumentException('non-nullable closedDate cannot be null');
        }
        $this->container['closedDate'] = $closedDate;

        return $this;
    }

    /**
     * Gets followUpDate
     *
     * @return \DateTime|null
     */
    public function getFollowUpDate()
    {
        return $this->container['followUpDate'];
    }

    /**
     * Sets followUpDate
     *
     * @param \DateTime|null $followUpDate followUpDate
     *
     * @return self
     */
    public function setFollowUpDate($followUpDate)
    {
        if (is_null($followUpDate)) {
            throw new \InvalidArgumentException('non-nullable followUpDate cannot be null');
        }
        $this->container['followUpDate'] = $followUpDate;

        return $this;
    }

    /**
     * Gets status
     *
     * @return bool|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param bool|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime|null $createdDate createdDate
     *
     * @return self
     */
    public function setCreatedDate($createdDate)
    {
        if (is_null($createdDate)) {
            throw new \InvalidArgumentException('non-nullable createdDate cannot be null');
        }
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param string|null $createdBy createdBy
     *
     * @return self
     */
    public function setCreatedBy($createdBy)
    {
        if (is_null($createdBy)) {
            throw new \InvalidArgumentException('non-nullable createdBy cannot be null');
        }
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets modifiedDate
     *
     * @return \DateTime|null
     */
    public function getModifiedDate()
    {
        return $this->container['modifiedDate'];
    }

    /**
     * Sets modifiedDate
     *
     * @param \DateTime|null $modifiedDate modifiedDate
     *
     * @return self
     */
    public function setModifiedDate($modifiedDate)
    {
        if (is_null($modifiedDate)) {
            throw new \InvalidArgumentException('non-nullable modifiedDate cannot be null');
        }
        $this->container['modifiedDate'] = $modifiedDate;

        return $this;
    }

    /**
     * Gets modifiedBy
     *
     * @return string|null
     */
    public function getModifiedBy()
    {
        return $this->container['modifiedBy'];
    }

    /**
     * Sets modifiedBy
     *
     * @param string|null $modifiedBy modifiedBy
     *
     * @return self
     */
    public function setModifiedBy($modifiedBy)
    {
        if (is_null($modifiedBy)) {
            throw new \InvalidArgumentException('non-nullable modifiedBy cannot be null');
        }
        $this->container['modifiedBy'] = $modifiedBy;

        return $this;
    }

    /**
     * Gets users
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\InvestmentsAccountUser[]|null
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\InvestmentsAccountUser[]|null $users users
     *
     * @return self
     */
    public function setUsers($users)
    {
        if (is_null($users)) {
            throw new \InvalidArgumentException('non-nullable users cannot be null');
        }
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets assets
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\InvestmentsAsset[]|null
     */
    public function getAssets()
    {
        return $this->container['assets'];
    }

    /**
     * Sets assets
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\InvestmentsAsset[]|null $assets assets
     *
     * @return self
     */
    public function setAssets($assets)
    {
        if (is_null($assets)) {
            throw new \InvalidArgumentException('non-nullable assets cannot be null');
        }
        $this->container['assets'] = $assets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


