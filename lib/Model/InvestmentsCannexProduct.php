<?php
/**
 * InvestmentsCannexProduct
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-equisoft1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * InvestmentsCannexProduct Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvestmentsCannexProduct implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'investments.CannexProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'uniqueCode' => 'string',
        'fundCode' => 'string',
        'fundName' => '\Equisoft\SDK\EquisoftConnect\Model\Translation[]',
        'fundCategoryName' => '\Equisoft\SDK\EquisoftConnect\Model\Translation[]',
        'cusip' => 'string',
        'masterFund' => 'bool',
        'masterUniqueCode' => 'string',
        'masterFundCode' => 'string',
        'issueDate' => '\DateTime',
        'status' => 'string',
        'price' => 'float',
        'priceDate' => '\DateTime',
        'exchange' => '\Equisoft\SDK\EquisoftConnect\Model\InvestmentsCannexExchange',
        'symbol' => 'string',
        'changeDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'uniqueCode' => null,
        'fundCode' => null,
        'fundName' => null,
        'fundCategoryName' => null,
        'cusip' => null,
        'masterFund' => null,
        'masterUniqueCode' => null,
        'masterFundCode' => null,
        'issueDate' => 'date',
        'status' => null,
        'price' => 'float',
        'priceDate' => 'date',
        'exchange' => null,
        'symbol' => null,
        'changeDate' => 'date'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'uniqueCode' => false,
        'fundCode' => false,
        'fundName' => false,
        'fundCategoryName' => false,
        'cusip' => false,
        'masterFund' => false,
        'masterUniqueCode' => false,
        'masterFundCode' => false,
        'issueDate' => true,
        'status' => true,
        'price' => true,
        'priceDate' => true,
        'exchange' => true,
        'symbol' => false,
        'changeDate' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'uniqueCode' => 'uniqueCode',
        'fundCode' => 'fundCode',
        'fundName' => 'fundName',
        'fundCategoryName' => 'fundCategoryName',
        'cusip' => 'cusip',
        'masterFund' => 'masterFund',
        'masterUniqueCode' => 'masterUniqueCode',
        'masterFundCode' => 'masterFundCode',
        'issueDate' => 'issueDate',
        'status' => 'status',
        'price' => 'price',
        'priceDate' => 'priceDate',
        'exchange' => 'exchange',
        'symbol' => 'symbol',
        'changeDate' => 'changeDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'uniqueCode' => 'setUniqueCode',
        'fundCode' => 'setFundCode',
        'fundName' => 'setFundName',
        'fundCategoryName' => 'setFundCategoryName',
        'cusip' => 'setCusip',
        'masterFund' => 'setMasterFund',
        'masterUniqueCode' => 'setMasterUniqueCode',
        'masterFundCode' => 'setMasterFundCode',
        'issueDate' => 'setIssueDate',
        'status' => 'setStatus',
        'price' => 'setPrice',
        'priceDate' => 'setPriceDate',
        'exchange' => 'setExchange',
        'symbol' => 'setSymbol',
        'changeDate' => 'setChangeDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'uniqueCode' => 'getUniqueCode',
        'fundCode' => 'getFundCode',
        'fundName' => 'getFundName',
        'fundCategoryName' => 'getFundCategoryName',
        'cusip' => 'getCusip',
        'masterFund' => 'getMasterFund',
        'masterUniqueCode' => 'getMasterUniqueCode',
        'masterFundCode' => 'getMasterFundCode',
        'issueDate' => 'getIssueDate',
        'status' => 'getStatus',
        'price' => 'getPrice',
        'priceDate' => 'getPriceDate',
        'exchange' => 'getExchange',
        'symbol' => 'getSymbol',
        'changeDate' => 'getChangeDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_A = 'A';
    public const STATUS_D = 'D';
    public const STATUS_S = 'S';
    public const STATUS_X = 'X';
    public const STATUS_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_A,
            self::STATUS_D,
            self::STATUS_S,
            self::STATUS_X,
            self::STATUS_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('uniqueCode', $data ?? [], null);
        $this->setIfExists('fundCode', $data ?? [], null);
        $this->setIfExists('fundName', $data ?? [], null);
        $this->setIfExists('fundCategoryName', $data ?? [], null);
        $this->setIfExists('cusip', $data ?? [], null);
        $this->setIfExists('masterFund', $data ?? [], null);
        $this->setIfExists('masterUniqueCode', $data ?? [], null);
        $this->setIfExists('masterFundCode', $data ?? [], null);
        $this->setIfExists('issueDate', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('priceDate', $data ?? [], null);
        $this->setIfExists('exchange', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('changeDate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uniqueCode
     *
     * @return string|null
     */
    public function getUniqueCode()
    {
        return $this->container['uniqueCode'];
    }

    /**
     * Sets uniqueCode
     *
     * @param string|null $uniqueCode uniqueCode
     *
     * @return self
     */
    public function setUniqueCode($uniqueCode)
    {
        if (is_null($uniqueCode)) {
            throw new \InvalidArgumentException('non-nullable uniqueCode cannot be null');
        }
        $this->container['uniqueCode'] = $uniqueCode;

        return $this;
    }

    /**
     * Gets fundCode
     *
     * @return string|null
     */
    public function getFundCode()
    {
        return $this->container['fundCode'];
    }

    /**
     * Sets fundCode
     *
     * @param string|null $fundCode fundCode
     *
     * @return self
     */
    public function setFundCode($fundCode)
    {
        if (is_null($fundCode)) {
            throw new \InvalidArgumentException('non-nullable fundCode cannot be null');
        }
        $this->container['fundCode'] = $fundCode;

        return $this;
    }

    /**
     * Gets fundName
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\Translation[]|null
     */
    public function getFundName()
    {
        return $this->container['fundName'];
    }

    /**
     * Sets fundName
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\Translation[]|null $fundName fundName
     *
     * @return self
     */
    public function setFundName($fundName)
    {
        if (is_null($fundName)) {
            throw new \InvalidArgumentException('non-nullable fundName cannot be null');
        }
        $this->container['fundName'] = $fundName;

        return $this;
    }

    /**
     * Gets fundCategoryName
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\Translation[]|null
     */
    public function getFundCategoryName()
    {
        return $this->container['fundCategoryName'];
    }

    /**
     * Sets fundCategoryName
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\Translation[]|null $fundCategoryName fundCategoryName
     *
     * @return self
     */
    public function setFundCategoryName($fundCategoryName)
    {
        if (is_null($fundCategoryName)) {
            throw new \InvalidArgumentException('non-nullable fundCategoryName cannot be null');
        }
        $this->container['fundCategoryName'] = $fundCategoryName;

        return $this;
    }

    /**
     * Gets cusip
     *
     * @return string|null
     */
    public function getCusip()
    {
        return $this->container['cusip'];
    }

    /**
     * Sets cusip
     *
     * @param string|null $cusip cusip
     *
     * @return self
     */
    public function setCusip($cusip)
    {
        if (is_null($cusip)) {
            throw new \InvalidArgumentException('non-nullable cusip cannot be null');
        }
        $this->container['cusip'] = $cusip;

        return $this;
    }

    /**
     * Gets masterFund
     *
     * @return bool|null
     */
    public function getMasterFund()
    {
        return $this->container['masterFund'];
    }

    /**
     * Sets masterFund
     *
     * @param bool|null $masterFund masterFund
     *
     * @return self
     */
    public function setMasterFund($masterFund)
    {
        if (is_null($masterFund)) {
            throw new \InvalidArgumentException('non-nullable masterFund cannot be null');
        }
        $this->container['masterFund'] = $masterFund;

        return $this;
    }

    /**
     * Gets masterUniqueCode
     *
     * @return string|null
     */
    public function getMasterUniqueCode()
    {
        return $this->container['masterUniqueCode'];
    }

    /**
     * Sets masterUniqueCode
     *
     * @param string|null $masterUniqueCode masterUniqueCode
     *
     * @return self
     */
    public function setMasterUniqueCode($masterUniqueCode)
    {
        if (is_null($masterUniqueCode)) {
            throw new \InvalidArgumentException('non-nullable masterUniqueCode cannot be null');
        }
        $this->container['masterUniqueCode'] = $masterUniqueCode;

        return $this;
    }

    /**
     * Gets masterFundCode
     *
     * @return string|null
     */
    public function getMasterFundCode()
    {
        return $this->container['masterFundCode'];
    }

    /**
     * Sets masterFundCode
     *
     * @param string|null $masterFundCode masterFundCode
     *
     * @return self
     */
    public function setMasterFundCode($masterFundCode)
    {
        if (is_null($masterFundCode)) {
            throw new \InvalidArgumentException('non-nullable masterFundCode cannot be null');
        }
        $this->container['masterFundCode'] = $masterFundCode;

        return $this;
    }

    /**
     * Gets issueDate
     *
     * @return \DateTime|null
     */
    public function getIssueDate()
    {
        return $this->container['issueDate'];
    }

    /**
     * Sets issueDate
     *
     * @param \DateTime|null $issueDate issueDate
     *
     * @return self
     */
    public function setIssueDate($issueDate)
    {
        if (is_null($issueDate)) {
            array_push($this->openAPINullablesSetToNull, 'issueDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issueDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['issueDate'] = $issueDate;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            $status = self::STATUS_UNKNOWN_DEFAULT_OPEN_API;
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            array_push($this->openAPINullablesSetToNull, 'price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets priceDate
     *
     * @return \DateTime|null
     */
    public function getPriceDate()
    {
        return $this->container['priceDate'];
    }

    /**
     * Sets priceDate
     *
     * @param \DateTime|null $priceDate priceDate
     *
     * @return self
     */
    public function setPriceDate($priceDate)
    {
        if (is_null($priceDate)) {
            array_push($this->openAPINullablesSetToNull, 'priceDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priceDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priceDate'] = $priceDate;

        return $this;
    }

    /**
     * Gets exchange
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\InvestmentsCannexExchange|null
     */
    public function getExchange()
    {
        return $this->container['exchange'];
    }

    /**
     * Sets exchange
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\InvestmentsCannexExchange|null $exchange exchange
     *
     * @return self
     */
    public function setExchange($exchange)
    {
        if (is_null($exchange)) {
            array_push($this->openAPINullablesSetToNull, 'exchange');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exchange', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exchange'] = $exchange;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets changeDate
     *
     * @return \DateTime|null
     */
    public function getChangeDate()
    {
        return $this->container['changeDate'];
    }

    /**
     * Sets changeDate
     *
     * @param \DateTime|null $changeDate changeDate
     *
     * @return self
     */
    public function setChangeDate($changeDate)
    {
        if (is_null($changeDate)) {
            array_push($this->openAPINullablesSetToNull, 'changeDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('changeDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['changeDate'] = $changeDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


