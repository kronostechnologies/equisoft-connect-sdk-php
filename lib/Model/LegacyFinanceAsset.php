<?php
/**
 * LegacyFinanceAsset
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-equisoft4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * LegacyFinanceAsset Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LegacyFinanceAsset implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'legacy.finance.Asset';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'assetType' => 'string',
        'category' => 'string',
        'manufacturerName' => 'string',
        'productName' => 'string',
        'productCode' => 'string',
        'loadType' => 'string',
        'currency' => 'string',
        'productDescription' => 'string',
        'accountName' => 'string',
        'certificateNb' => 'string',
        'units' => 'string',
        'unitPrice' => 'string',
        'marketValue' => 'string',
        'marketValueDate' => 'string',
        'maturityAmount' => 'string',
        'maturityAmountDate' => 'string',
        'interestRate' => 'string',
        'initialAmount' => 'string',
        'transactions' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceTransaction[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'assetType' => null,
        'category' => null,
        'manufacturerName' => null,
        'productName' => null,
        'productCode' => null,
        'loadType' => null,
        'currency' => null,
        'productDescription' => null,
        'accountName' => null,
        'certificateNb' => null,
        'units' => null,
        'unitPrice' => null,
        'marketValue' => null,
        'marketValueDate' => null,
        'maturityAmount' => null,
        'maturityAmountDate' => null,
        'interestRate' => null,
        'initialAmount' => null,
        'transactions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'assetType' => false,
		'category' => false,
		'manufacturerName' => false,
		'productName' => false,
		'productCode' => false,
		'loadType' => false,
		'currency' => false,
		'productDescription' => false,
		'accountName' => false,
		'certificateNb' => false,
		'units' => false,
		'unitPrice' => false,
		'marketValue' => false,
		'marketValueDate' => false,
		'maturityAmount' => false,
		'maturityAmountDate' => false,
		'interestRate' => false,
		'initialAmount' => false,
		'transactions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'assetType' => 'assetType',
        'category' => 'category',
        'manufacturerName' => 'manufacturerName',
        'productName' => 'productName',
        'productCode' => 'productCode',
        'loadType' => 'loadType',
        'currency' => 'currency',
        'productDescription' => 'productDescription',
        'accountName' => 'accountName',
        'certificateNb' => 'certificateNb',
        'units' => 'units',
        'unitPrice' => 'unitPrice',
        'marketValue' => 'marketValue',
        'marketValueDate' => 'marketValueDate',
        'maturityAmount' => 'maturityAmount',
        'maturityAmountDate' => 'maturityAmountDate',
        'interestRate' => 'interestRate',
        'initialAmount' => 'initialAmount',
        'transactions' => 'transactions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'assetType' => 'setAssetType',
        'category' => 'setCategory',
        'manufacturerName' => 'setManufacturerName',
        'productName' => 'setProductName',
        'productCode' => 'setProductCode',
        'loadType' => 'setLoadType',
        'currency' => 'setCurrency',
        'productDescription' => 'setProductDescription',
        'accountName' => 'setAccountName',
        'certificateNb' => 'setCertificateNb',
        'units' => 'setUnits',
        'unitPrice' => 'setUnitPrice',
        'marketValue' => 'setMarketValue',
        'marketValueDate' => 'setMarketValueDate',
        'maturityAmount' => 'setMaturityAmount',
        'maturityAmountDate' => 'setMaturityAmountDate',
        'interestRate' => 'setInterestRate',
        'initialAmount' => 'setInitialAmount',
        'transactions' => 'setTransactions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'assetType' => 'getAssetType',
        'category' => 'getCategory',
        'manufacturerName' => 'getManufacturerName',
        'productName' => 'getProductName',
        'productCode' => 'getProductCode',
        'loadType' => 'getLoadType',
        'currency' => 'getCurrency',
        'productDescription' => 'getProductDescription',
        'accountName' => 'getAccountName',
        'certificateNb' => 'getCertificateNb',
        'units' => 'getUnits',
        'unitPrice' => 'getUnitPrice',
        'marketValue' => 'getMarketValue',
        'marketValueDate' => 'getMarketValueDate',
        'maturityAmount' => 'getMaturityAmount',
        'maturityAmountDate' => 'getMaturityAmountDate',
        'interestRate' => 'getInterestRate',
        'initialAmount' => 'getInitialAmount',
        'transactions' => 'getTransactions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('assetType', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('manufacturerName', $data ?? [], null);
        $this->setIfExists('productName', $data ?? [], null);
        $this->setIfExists('productCode', $data ?? [], null);
        $this->setIfExists('loadType', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('productDescription', $data ?? [], null);
        $this->setIfExists('accountName', $data ?? [], null);
        $this->setIfExists('certificateNb', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('unitPrice', $data ?? [], null);
        $this->setIfExists('marketValue', $data ?? [], null);
        $this->setIfExists('marketValueDate', $data ?? [], null);
        $this->setIfExists('maturityAmount', $data ?? [], null);
        $this->setIfExists('maturityAmountDate', $data ?? [], null);
        $this->setIfExists('interestRate', $data ?? [], null);
        $this->setIfExists('initialAmount', $data ?? [], null);
        $this->setIfExists('transactions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets assetType
     *
     * @return string|null
     */
    public function getAssetType()
    {
        return $this->container['assetType'];
    }

    /**
     * Sets assetType
     *
     * @param string|null $assetType Asset type.
     *
     * @return self
     */
    public function setAssetType($assetType)
    {
        if (is_null($assetType)) {
            throw new \InvalidArgumentException('non-nullable assetType cannot be null');
        }
        $this->container['assetType'] = $assetType;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     * @deprecated
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Category.
     *
     * @return self
     * @deprecated
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets manufacturerName
     *
     * @return string|null
     */
    public function getManufacturerName()
    {
        return $this->container['manufacturerName'];
    }

    /**
     * Sets manufacturerName
     *
     * @param string|null $manufacturerName Manufacturer name.
     *
     * @return self
     */
    public function setManufacturerName($manufacturerName)
    {
        if (is_null($manufacturerName)) {
            throw new \InvalidArgumentException('non-nullable manufacturerName cannot be null');
        }
        $this->container['manufacturerName'] = $manufacturerName;

        return $this;
    }

    /**
     * Gets productName
     *
     * @return string|null
     */
    public function getProductName()
    {
        return $this->container['productName'];
    }

    /**
     * Sets productName
     *
     * @param string|null $productName Product name.
     *
     * @return self
     */
    public function setProductName($productName)
    {
        if (is_null($productName)) {
            throw new \InvalidArgumentException('non-nullable productName cannot be null');
        }
        $this->container['productName'] = $productName;

        return $this;
    }

    /**
     * Gets productCode
     *
     * @return string|null
     */
    public function getProductCode()
    {
        return $this->container['productCode'];
    }

    /**
     * Sets productCode
     *
     * @param string|null $productCode Product code.
     *
     * @return self
     */
    public function setProductCode($productCode)
    {
        if (is_null($productCode)) {
            throw new \InvalidArgumentException('non-nullable productCode cannot be null');
        }
        $this->container['productCode'] = $productCode;

        return $this;
    }

    /**
     * Gets loadType
     *
     * @return string|null
     */
    public function getLoadType()
    {
        return $this->container['loadType'];
    }

    /**
     * Sets loadType
     *
     * @param string|null $loadType Load type.
     *
     * @return self
     */
    public function setLoadType($loadType)
    {
        if (is_null($loadType)) {
            throw new \InvalidArgumentException('non-nullable loadType cannot be null');
        }
        $this->container['loadType'] = $loadType;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets productDescription
     *
     * @return string|null
     */
    public function getProductDescription()
    {
        return $this->container['productDescription'];
    }

    /**
     * Sets productDescription
     *
     * @param string|null $productDescription Product description.
     *
     * @return self
     */
    public function setProductDescription($productDescription)
    {
        if (is_null($productDescription)) {
            throw new \InvalidArgumentException('non-nullable productDescription cannot be null');
        }
        $this->container['productDescription'] = $productDescription;

        return $this;
    }

    /**
     * Gets accountName
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['accountName'];
    }

    /**
     * Sets accountName
     *
     * @param string|null $accountName Account name.
     *
     * @return self
     */
    public function setAccountName($accountName)
    {
        if (is_null($accountName)) {
            throw new \InvalidArgumentException('non-nullable accountName cannot be null');
        }
        $this->container['accountName'] = $accountName;

        return $this;
    }

    /**
     * Gets certificateNb
     *
     * @return string|null
     */
    public function getCertificateNb()
    {
        return $this->container['certificateNb'];
    }

    /**
     * Sets certificateNb
     *
     * @param string|null $certificateNb Certification number.
     *
     * @return self
     */
    public function setCertificateNb($certificateNb)
    {
        if (is_null($certificateNb)) {
            throw new \InvalidArgumentException('non-nullable certificateNb cannot be null');
        }
        $this->container['certificateNb'] = $certificateNb;

        return $this;
    }

    /**
     * Gets units
     *
     * @return string|null
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param string|null $units Units.
     *
     * @return self
     */
    public function setUnits($units)
    {
        if (is_null($units)) {
            throw new \InvalidArgumentException('non-nullable units cannot be null');
        }
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets unitPrice
     *
     * @return string|null
     */
    public function getUnitPrice()
    {
        return $this->container['unitPrice'];
    }

    /**
     * Sets unitPrice
     *
     * @param string|null $unitPrice Unit price.
     *
     * @return self
     */
    public function setUnitPrice($unitPrice)
    {
        if (is_null($unitPrice)) {
            throw new \InvalidArgumentException('non-nullable unitPrice cannot be null');
        }
        $this->container['unitPrice'] = $unitPrice;

        return $this;
    }

    /**
     * Gets marketValue
     *
     * @return string|null
     */
    public function getMarketValue()
    {
        return $this->container['marketValue'];
    }

    /**
     * Sets marketValue
     *
     * @param string|null $marketValue Market value.
     *
     * @return self
     */
    public function setMarketValue($marketValue)
    {
        if (is_null($marketValue)) {
            throw new \InvalidArgumentException('non-nullable marketValue cannot be null');
        }
        $this->container['marketValue'] = $marketValue;

        return $this;
    }

    /**
     * Gets marketValueDate
     *
     * @return string|null
     */
    public function getMarketValueDate()
    {
        return $this->container['marketValueDate'];
    }

    /**
     * Sets marketValueDate
     *
     * @param string|null $marketValueDate Market value date.
     *
     * @return self
     */
    public function setMarketValueDate($marketValueDate)
    {
        if (is_null($marketValueDate)) {
            throw new \InvalidArgumentException('non-nullable marketValueDate cannot be null');
        }
        $this->container['marketValueDate'] = $marketValueDate;

        return $this;
    }

    /**
     * Gets maturityAmount
     *
     * @return string|null
     */
    public function getMaturityAmount()
    {
        return $this->container['maturityAmount'];
    }

    /**
     * Sets maturityAmount
     *
     * @param string|null $maturityAmount Maturity amount.
     *
     * @return self
     */
    public function setMaturityAmount($maturityAmount)
    {
        if (is_null($maturityAmount)) {
            throw new \InvalidArgumentException('non-nullable maturityAmount cannot be null');
        }
        $this->container['maturityAmount'] = $maturityAmount;

        return $this;
    }

    /**
     * Gets maturityAmountDate
     *
     * @return string|null
     */
    public function getMaturityAmountDate()
    {
        return $this->container['maturityAmountDate'];
    }

    /**
     * Sets maturityAmountDate
     *
     * @param string|null $maturityAmountDate Maturity amount date.
     *
     * @return self
     */
    public function setMaturityAmountDate($maturityAmountDate)
    {
        if (is_null($maturityAmountDate)) {
            throw new \InvalidArgumentException('non-nullable maturityAmountDate cannot be null');
        }
        $this->container['maturityAmountDate'] = $maturityAmountDate;

        return $this;
    }

    /**
     * Gets interestRate
     *
     * @return string|null
     */
    public function getInterestRate()
    {
        return $this->container['interestRate'];
    }

    /**
     * Sets interestRate
     *
     * @param string|null $interestRate Interest rate.
     *
     * @return self
     */
    public function setInterestRate($interestRate)
    {
        if (is_null($interestRate)) {
            throw new \InvalidArgumentException('non-nullable interestRate cannot be null');
        }
        $this->container['interestRate'] = $interestRate;

        return $this;
    }

    /**
     * Gets initialAmount
     *
     * @return string|null
     */
    public function getInitialAmount()
    {
        return $this->container['initialAmount'];
    }

    /**
     * Sets initialAmount
     *
     * @param string|null $initialAmount Initial amount.
     *
     * @return self
     */
    public function setInitialAmount($initialAmount)
    {
        if (is_null($initialAmount)) {
            throw new \InvalidArgumentException('non-nullable initialAmount cannot be null');
        }
        $this->container['initialAmount'] = $initialAmount;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceTransaction[]|null
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinanceTransaction[]|null $transactions Initial amount.
     *
     * @return self
     */
    public function setTransactions($transactions)
    {
        if (is_null($transactions)) {
            throw new \InvalidArgumentException('non-nullable transactions cannot be null');
        }
        $this->container['transactions'] = $transactions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


