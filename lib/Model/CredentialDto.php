<?php
/**
 * CredentialDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * CredentialDto Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CredentialDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CredentialDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'dealerCode' => 'string',
        'repCode' => 'string',
        'status' => 'string',
        'district' => 'string',
        'us' => 'string',
        'creationDate' => 'string',
        'approvalDate' => 'string',
        'refusalDate' => 'string',
        'revocationDate' => 'string',
        'isActive' => 'bool',
        'webUserName' => 'string',
        'webUserEmail' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'dealerCode' => null,
        'repCode' => null,
        'status' => null,
        'district' => null,
        'us' => null,
        'creationDate' => null,
        'approvalDate' => null,
        'refusalDate' => null,
        'revocationDate' => null,
        'isActive' => null,
        'webUserName' => null,
        'webUserEmail' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'dealerCode' => 'dealerCode',
        'repCode' => 'repCode',
        'status' => 'status',
        'district' => 'district',
        'us' => 'us',
        'creationDate' => 'creationDate',
        'approvalDate' => 'approvalDate',
        'refusalDate' => 'refusalDate',
        'revocationDate' => 'revocationDate',
        'isActive' => 'isActive',
        'webUserName' => 'webUserName',
        'webUserEmail' => 'webUserEmail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'dealerCode' => 'setDealerCode',
        'repCode' => 'setRepCode',
        'status' => 'setStatus',
        'district' => 'setDistrict',
        'us' => 'setUs',
        'creationDate' => 'setCreationDate',
        'approvalDate' => 'setApprovalDate',
        'refusalDate' => 'setRefusalDate',
        'revocationDate' => 'setRevocationDate',
        'isActive' => 'setIsActive',
        'webUserName' => 'setWebUserName',
        'webUserEmail' => 'setWebUserEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'dealerCode' => 'getDealerCode',
        'repCode' => 'getRepCode',
        'status' => 'getStatus',
        'district' => 'getDistrict',
        'us' => 'getUs',
        'creationDate' => 'getCreationDate',
        'approvalDate' => 'getApprovalDate',
        'refusalDate' => 'getRefusalDate',
        'revocationDate' => 'getRevocationDate',
        'isActive' => 'getIsActive',
        'webUserName' => 'getWebUserName',
        'webUserEmail' => 'getWebUserEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['dealerCode'] = $data['dealerCode'] ?? null;
        $this->container['repCode'] = $data['repCode'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['district'] = $data['district'] ?? null;
        $this->container['us'] = $data['us'] ?? null;
        $this->container['creationDate'] = $data['creationDate'] ?? null;
        $this->container['approvalDate'] = $data['approvalDate'] ?? null;
        $this->container['refusalDate'] = $data['refusalDate'] ?? null;
        $this->container['revocationDate'] = $data['revocationDate'] ?? null;
        $this->container['isActive'] = $data['isActive'] ?? null;
        $this->container['webUserName'] = $data['webUserName'] ?? null;
        $this->container['webUserEmail'] = $data['webUserEmail'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['repCode'] === null) {
            $invalidProperties[] = "'repCode' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['isActive'] === null) {
            $invalidProperties[] = "'isActive' can't be null";
        }
        if ($this->container['webUserName'] === null) {
            $invalidProperties[] = "'webUserName' can't be null";
        }
        if ($this->container['webUserEmail'] === null) {
            $invalidProperties[] = "'webUserEmail' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets dealerCode
     *
     * @return string|null
     */
    public function getDealerCode()
    {
        return $this->container['dealerCode'];
    }

    /**
     * Sets dealerCode
     *
     * @param string|null $dealerCode dealerCode
     *
     * @return self
     */
    public function setDealerCode($dealerCode)
    {
        $this->container['dealerCode'] = $dealerCode;

        return $this;
    }

    /**
     * Gets repCode
     *
     * @return string
     */
    public function getRepCode()
    {
        return $this->container['repCode'];
    }

    /**
     * Sets repCode
     *
     * @param string $repCode repCode
     *
     * @return self
     */
    public function setRepCode($repCode)
    {
        $this->container['repCode'] = $repCode;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets district
     *
     * @return string|null
     */
    public function getDistrict()
    {
        return $this->container['district'];
    }

    /**
     * Sets district
     *
     * @param string|null $district district
     *
     * @return self
     */
    public function setDistrict($district)
    {
        $this->container['district'] = $district;

        return $this;
    }

    /**
     * Gets us
     *
     * @return string|null
     */
    public function getUs()
    {
        return $this->container['us'];
    }

    /**
     * Sets us
     *
     * @param string|null $us us
     *
     * @return self
     */
    public function setUs($us)
    {
        $this->container['us'] = $us;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return string|null
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param string|null $creationDate creationDate
     *
     * @return self
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets approvalDate
     *
     * @return string|null
     */
    public function getApprovalDate()
    {
        return $this->container['approvalDate'];
    }

    /**
     * Sets approvalDate
     *
     * @param string|null $approvalDate approvalDate
     *
     * @return self
     */
    public function setApprovalDate($approvalDate)
    {
        $this->container['approvalDate'] = $approvalDate;

        return $this;
    }

    /**
     * Gets refusalDate
     *
     * @return string|null
     */
    public function getRefusalDate()
    {
        return $this->container['refusalDate'];
    }

    /**
     * Sets refusalDate
     *
     * @param string|null $refusalDate refusalDate
     *
     * @return self
     */
    public function setRefusalDate($refusalDate)
    {
        $this->container['refusalDate'] = $refusalDate;

        return $this;
    }

    /**
     * Gets revocationDate
     *
     * @return string|null
     */
    public function getRevocationDate()
    {
        return $this->container['revocationDate'];
    }

    /**
     * Sets revocationDate
     *
     * @param string|null $revocationDate revocationDate
     *
     * @return self
     */
    public function setRevocationDate($revocationDate)
    {
        $this->container['revocationDate'] = $revocationDate;

        return $this;
    }

    /**
     * Gets isActive
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool $isActive isActive
     *
     * @return self
     */
    public function setIsActive($isActive)
    {
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets webUserName
     *
     * @return string
     */
    public function getWebUserName()
    {
        return $this->container['webUserName'];
    }

    /**
     * Sets webUserName
     *
     * @param string $webUserName webUserName
     *
     * @return self
     */
    public function setWebUserName($webUserName)
    {
        $this->container['webUserName'] = $webUserName;

        return $this;
    }

    /**
     * Gets webUserEmail
     *
     * @return string
     */
    public function getWebUserEmail()
    {
        return $this->container['webUserEmail'];
    }

    /**
     * Sets webUserEmail
     *
     * @param string $webUserEmail webUserEmail
     *
     * @return self
     */
    public function setWebUserEmail($webUserEmail)
    {
        $this->container['webUserEmail'] = $webUserEmail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


