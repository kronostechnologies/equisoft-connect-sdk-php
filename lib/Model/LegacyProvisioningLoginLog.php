<?php
/**
 * LegacyProvisioningLoginLog
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * LegacyProvisioningLoginLog Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LegacyProvisioningLoginLog implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'legacy.provisioning.LoginLog';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'datetime' => 'string',
        'service' => 'string',
        'userId' => 'int',
        'userEmail' => 'string',
        'userIdentifier' => 'string',
        'action' => 'string',
        'errorMessage' => 'string',
        'remoteIP' => 'string',
        'host' => 'string',
        'loginURI' => 'string',
        'concurrentAccesses' => 'int',
        'userAgent' => 'string',
        'assumedUserId' => 'int',
        'assumedUserEmail' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'datetime' => null,
        'service' => null,
        'userId' => null,
        'userEmail' => null,
        'userIdentifier' => null,
        'action' => null,
        'errorMessage' => null,
        'remoteIP' => null,
        'host' => null,
        'loginURI' => null,
        'concurrentAccesses' => null,
        'userAgent' => null,
        'assumedUserId' => null,
        'assumedUserEmail' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'datetime' => 'datetime',
        'service' => 'service',
        'userId' => 'userId',
        'userEmail' => 'userEmail',
        'userIdentifier' => 'userIdentifier',
        'action' => 'action',
        'errorMessage' => 'errorMessage',
        'remoteIP' => 'remoteIP',
        'host' => 'host',
        'loginURI' => 'loginURI',
        'concurrentAccesses' => 'concurrentAccesses',
        'userAgent' => 'userAgent',
        'assumedUserId' => 'assumedUserId',
        'assumedUserEmail' => 'assumedUserEmail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'datetime' => 'setDatetime',
        'service' => 'setService',
        'userId' => 'setUserId',
        'userEmail' => 'setUserEmail',
        'userIdentifier' => 'setUserIdentifier',
        'action' => 'setAction',
        'errorMessage' => 'setErrorMessage',
        'remoteIP' => 'setRemoteIP',
        'host' => 'setHost',
        'loginURI' => 'setLoginURI',
        'concurrentAccesses' => 'setConcurrentAccesses',
        'userAgent' => 'setUserAgent',
        'assumedUserId' => 'setAssumedUserId',
        'assumedUserEmail' => 'setAssumedUserEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'datetime' => 'getDatetime',
        'service' => 'getService',
        'userId' => 'getUserId',
        'userEmail' => 'getUserEmail',
        'userIdentifier' => 'getUserIdentifier',
        'action' => 'getAction',
        'errorMessage' => 'getErrorMessage',
        'remoteIP' => 'getRemoteIP',
        'host' => 'getHost',
        'loginURI' => 'getLoginURI',
        'concurrentAccesses' => 'getConcurrentAccesses',
        'userAgent' => 'getUserAgent',
        'assumedUserId' => 'getAssumedUserId',
        'assumedUserEmail' => 'getAssumedUserEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['datetime'] = $data['datetime'] ?? null;
        $this->container['service'] = $data['service'] ?? null;
        $this->container['userId'] = $data['userId'] ?? null;
        $this->container['userEmail'] = $data['userEmail'] ?? null;
        $this->container['userIdentifier'] = $data['userIdentifier'] ?? null;
        $this->container['action'] = $data['action'] ?? null;
        $this->container['errorMessage'] = $data['errorMessage'] ?? null;
        $this->container['remoteIP'] = $data['remoteIP'] ?? null;
        $this->container['host'] = $data['host'] ?? null;
        $this->container['loginURI'] = $data['loginURI'] ?? null;
        $this->container['concurrentAccesses'] = $data['concurrentAccesses'] ?? null;
        $this->container['userAgent'] = $data['userAgent'] ?? null;
        $this->container['assumedUserId'] = $data['assumedUserId'] ?? null;
        $this->container['assumedUserEmail'] = $data['assumedUserEmail'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets datetime
     *
     * @return string|null
     */
    public function getDatetime()
    {
        return $this->container['datetime'];
    }

    /**
     * Sets datetime
     *
     * @param string|null $datetime Log datetime.
     *
     * @return self
     */
    public function setDatetime($datetime)
    {
        $this->container['datetime'] = $datetime;

        return $this;
    }

    /**
     * Gets service
     *
     * @return string|null
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param string|null $service Service accessed.
     *
     * @return self
     */
    public function setService($service)
    {
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param int|null $userId User unique ID.
     *
     * @return self
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets userEmail
     *
     * @return string|null
     */
    public function getUserEmail()
    {
        return $this->container['userEmail'];
    }

    /**
     * Sets userEmail
     *
     * @param string|null $userEmail User email address.
     *
     * @return self
     */
    public function setUserEmail($userEmail)
    {
        $this->container['userEmail'] = $userEmail;

        return $this;
    }

    /**
     * Gets userIdentifier
     *
     * @return string|null
     */
    public function getUserIdentifier()
    {
        return $this->container['userIdentifier'];
    }

    /**
     * Sets userIdentifier
     *
     * @param string|null $userIdentifier Identifier used for login.
     *
     * @return self
     */
    public function setUserIdentifier($userIdentifier)
    {
        $this->container['userIdentifier'] = $userIdentifier;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action Session opening action: LOGIN : Normal login. OPEN_EXISTING : Existing session was found and used. BUMP : Existing session was found and bumped. DONT_BUMP : Existing session was found but the user refused to bump it. LOGOUT : Normal logout. ERROR : An error prevented the login. See errorMessage.
     *
     * @return self
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets errorMessage
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['errorMessage'];
    }

    /**
     * Sets errorMessage
     *
     * @param string|null $errorMessage Login error message.
     *
     * @return self
     */
    public function setErrorMessage($errorMessage)
    {
        $this->container['errorMessage'] = $errorMessage;

        return $this;
    }

    /**
     * Gets remoteIP
     *
     * @return string|null
     */
    public function getRemoteIP()
    {
        return $this->container['remoteIP'];
    }

    /**
     * Sets remoteIP
     *
     * @param string|null $remoteIP IP address of the user.
     *
     * @return self
     */
    public function setRemoteIP($remoteIP)
    {
        $this->container['remoteIP'] = $remoteIP;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string|null
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string|null $host Server where the session was created.
     *
     * @return self
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets loginURI
     *
     * @return string|null
     */
    public function getLoginURI()
    {
        return $this->container['loginURI'];
    }

    /**
     * Sets loginURI
     *
     * @param string|null $loginURI URI from which the session was created.
     *
     * @return self
     */
    public function setLoginURI($loginURI)
    {
        $this->container['loginURI'] = $loginURI;

        return $this;
    }

    /**
     * Gets concurrentAccesses
     *
     * @return int|null
     */
    public function getConcurrentAccesses()
    {
        return $this->container['concurrentAccesses'];
    }

    /**
     * Sets concurrentAccesses
     *
     * @param int|null $concurrentAccesses Number of concurrent accesses at login.
     *
     * @return self
     */
    public function setConcurrentAccesses($concurrentAccesses)
    {
        $this->container['concurrentAccesses'] = $concurrentAccesses;

        return $this;
    }

    /**
     * Gets userAgent
     *
     * @return string|null
     */
    public function getUserAgent()
    {
        return $this->container['userAgent'];
    }

    /**
     * Sets userAgent
     *
     * @param string|null $userAgent Used browser user agent.
     *
     * @return self
     */
    public function setUserAgent($userAgent)
    {
        $this->container['userAgent'] = $userAgent;

        return $this;
    }

    /**
     * Gets assumedUserId
     *
     * @return int|null
     */
    public function getAssumedUserId()
    {
        return $this->container['assumedUserId'];
    }

    /**
     * Sets assumedUserId
     *
     * @param int|null $assumedUserId Assumed user unique ID.
     *
     * @return self
     */
    public function setAssumedUserId($assumedUserId)
    {
        $this->container['assumedUserId'] = $assumedUserId;

        return $this;
    }

    /**
     * Gets assumedUserEmail
     *
     * @return string|null
     */
    public function getAssumedUserEmail()
    {
        return $this->container['assumedUserEmail'];
    }

    /**
     * Sets assumedUserEmail
     *
     * @param string|null $assumedUserEmail Assumed user email.
     *
     * @return self
     */
    public function setAssumedUserEmail($assumedUserEmail)
    {
        $this->container['assumedUserEmail'] = $assumedUserEmail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


