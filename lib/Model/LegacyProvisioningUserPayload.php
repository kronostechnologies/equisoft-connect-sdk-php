<?php
/**
 * LegacyProvisioningUserPayload
 *
 * PHP version 5
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * LegacyProvisioningUserPayload Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LegacyProvisioningUserPayload implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'legacy.provisioning.UserPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'firstName' => 'string',
        'lastName' => 'string',
        'email' => 'string',
        'lang' => 'string',
        'role' => 'string',
        'concurrentAccess' => 'int',
        'password' => 'string',
        'noPassword' => 'string',
        'requirePasswordChange' => 'string',
        'enableMobile' => 'string',
        'externalIdentifiers' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyProvisioningUserIdentifier[]',
        'allowDelegation' => 'string',
        'gender' => 'string',
        'phoneWork' => 'string',
        'phoneWorkExtension' => 'string',
        'phoneHome' => 'string',
        'phoneCell' => 'string',
        'phoneFax' => 'string',
        'phoneMain' => 'string',
        'address' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress[]',
        'noFNA' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'firstName' => null,
        'lastName' => null,
        'email' => null,
        'lang' => null,
        'role' => null,
        'concurrentAccess' => null,
        'password' => null,
        'noPassword' => null,
        'requirePasswordChange' => null,
        'enableMobile' => null,
        'externalIdentifiers' => null,
        'allowDelegation' => null,
        'gender' => null,
        'phoneWork' => null,
        'phoneWorkExtension' => null,
        'phoneHome' => null,
        'phoneCell' => null,
        'phoneFax' => null,
        'phoneMain' => null,
        'address' => null,
        'noFNA' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'firstName' => 'firstName',
        'lastName' => 'lastName',
        'email' => 'email',
        'lang' => 'lang',
        'role' => 'role',
        'concurrentAccess' => 'concurrentAccess',
        'password' => 'password',
        'noPassword' => 'noPassword',
        'requirePasswordChange' => 'requirePasswordChange',
        'enableMobile' => 'enableMobile',
        'externalIdentifiers' => 'externalIdentifiers',
        'allowDelegation' => 'allowDelegation',
        'gender' => 'gender',
        'phoneWork' => 'phoneWork',
        'phoneWorkExtension' => 'phoneWorkExtension',
        'phoneHome' => 'phoneHome',
        'phoneCell' => 'phoneCell',
        'phoneFax' => 'phoneFax',
        'phoneMain' => 'phoneMain',
        'address' => 'address',
        'noFNA' => 'noFNA'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'email' => 'setEmail',
        'lang' => 'setLang',
        'role' => 'setRole',
        'concurrentAccess' => 'setConcurrentAccess',
        'password' => 'setPassword',
        'noPassword' => 'setNoPassword',
        'requirePasswordChange' => 'setRequirePasswordChange',
        'enableMobile' => 'setEnableMobile',
        'externalIdentifiers' => 'setExternalIdentifiers',
        'allowDelegation' => 'setAllowDelegation',
        'gender' => 'setGender',
        'phoneWork' => 'setPhoneWork',
        'phoneWorkExtension' => 'setPhoneWorkExtension',
        'phoneHome' => 'setPhoneHome',
        'phoneCell' => 'setPhoneCell',
        'phoneFax' => 'setPhoneFax',
        'phoneMain' => 'setPhoneMain',
        'address' => 'setAddress',
        'noFNA' => 'setNoFNA'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'email' => 'getEmail',
        'lang' => 'getLang',
        'role' => 'getRole',
        'concurrentAccess' => 'getConcurrentAccess',
        'password' => 'getPassword',
        'noPassword' => 'getNoPassword',
        'requirePasswordChange' => 'getRequirePasswordChange',
        'enableMobile' => 'getEnableMobile',
        'externalIdentifiers' => 'getExternalIdentifiers',
        'allowDelegation' => 'getAllowDelegation',
        'gender' => 'getGender',
        'phoneWork' => 'getPhoneWork',
        'phoneWorkExtension' => 'getPhoneWorkExtension',
        'phoneHome' => 'getPhoneHome',
        'phoneCell' => 'getPhoneCell',
        'phoneFax' => 'getPhoneFax',
        'phoneMain' => 'getPhoneMain',
        'address' => 'getAddress',
        'noFNA' => 'getNoFNA'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['firstName'] = isset($data['firstName']) ? $data['firstName'] : null;
        $this->container['lastName'] = isset($data['lastName']) ? $data['lastName'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['concurrentAccess'] = isset($data['concurrentAccess']) ? $data['concurrentAccess'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['noPassword'] = isset($data['noPassword']) ? $data['noPassword'] : null;
        $this->container['requirePasswordChange'] = isset($data['requirePasswordChange']) ? $data['requirePasswordChange'] : null;
        $this->container['enableMobile'] = isset($data['enableMobile']) ? $data['enableMobile'] : null;
        $this->container['externalIdentifiers'] = isset($data['externalIdentifiers']) ? $data['externalIdentifiers'] : null;
        $this->container['allowDelegation'] = isset($data['allowDelegation']) ? $data['allowDelegation'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['phoneWork'] = isset($data['phoneWork']) ? $data['phoneWork'] : null;
        $this->container['phoneWorkExtension'] = isset($data['phoneWorkExtension']) ? $data['phoneWorkExtension'] : null;
        $this->container['phoneHome'] = isset($data['phoneHome']) ? $data['phoneHome'] : null;
        $this->container['phoneCell'] = isset($data['phoneCell']) ? $data['phoneCell'] : null;
        $this->container['phoneFax'] = isset($data['phoneFax']) ? $data['phoneFax'] : null;
        $this->container['phoneMain'] = isset($data['phoneMain']) ? $data['phoneMain'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['noFNA'] = isset($data['noFNA']) ? $data['noFNA'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName First name
     *
     * @return $this
     */
    public function setFirstName($firstName)
    {
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName Last name
     *
     * @return $this
     */
    public function setLastName($lastName)
    {
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email address used for login
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang User language. Organisation default lang will be used if not provided. Accepts FR or EN.
     *
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role User role. Accepts USER or ADMIN
     *
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets concurrentAccess
     *
     * @return int|null
     */
    public function getConcurrentAccess()
    {
        return $this->container['concurrentAccess'];
    }

    /**
     * Sets concurrentAccess
     *
     * @param int|null $concurrentAccess Number of allowed concurrent accesses with this user. Default 1.
     *
     * @return $this
     */
    public function setConcurrentAccess($concurrentAccess)
    {
        $this->container['concurrentAccess'] = $concurrentAccess;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password User initial password. A random password will be set if none is specified and noPassword option is not used.
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets noPassword
     *
     * @return string|null
     */
    public function getNoPassword()
    {
        return $this->container['noPassword'];
    }

    /**
     * Sets noPassword
     *
     * @param string|null $noPassword Disable password authentication. Accepts true or false. Default false
     *
     * @return $this
     */
    public function setNoPassword($noPassword)
    {
        $this->container['noPassword'] = $noPassword;

        return $this;
    }

    /**
     * Gets requirePasswordChange
     *
     * @return string|null
     */
    public function getRequirePasswordChange()
    {
        return $this->container['requirePasswordChange'];
    }

    /**
     * Sets requirePasswordChange
     *
     * @param string|null $requirePasswordChange The user will be ask to define a new password on the first login Accepts true or false. Default true
     *
     * @return $this
     */
    public function setRequirePasswordChange($requirePasswordChange)
    {
        $this->container['requirePasswordChange'] = $requirePasswordChange;

        return $this;
    }

    /**
     * Gets enableMobile
     *
     * @return string|null
     */
    public function getEnableMobile()
    {
        return $this->container['enableMobile'];
    }

    /**
     * Sets enableMobile
     *
     * @param string|null $enableMobile Enable Mobile version. Deprecated: the mobile is not enabled per user anymore. Accepts true or false. Default false
     *
     * @return $this
     */
    public function setEnableMobile($enableMobile)
    {
        $this->container['enableMobile'] = $enableMobile;

        return $this;
    }

    /**
     * Gets externalIdentifiers
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyProvisioningUserIdentifier[]|null
     */
    public function getExternalIdentifiers()
    {
        return $this->container['externalIdentifiers'];
    }

    /**
     * Sets externalIdentifiers
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyProvisioningUserIdentifier[]|null $externalIdentifiers List of identifier to uniquely identify the user.
     *
     * @return $this
     */
    public function setExternalIdentifiers($externalIdentifiers)
    {
        $this->container['externalIdentifiers'] = $externalIdentifiers;

        return $this;
    }

    /**
     * Gets allowDelegation
     *
     * @return string|null
     */
    public function getAllowDelegation()
    {
        return $this->container['allowDelegation'];
    }

    /**
     * Sets allowDelegation
     *
     * @param string|null $allowDelegation Allow the user to delegate access to his data Accepts true or false. Default false
     *
     * @return $this
     */
    public function setAllowDelegation($allowDelegation)
    {
        $this->container['allowDelegation'] = $allowDelegation;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender Gender of this user. Accepts M or F.
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets phoneWork
     *
     * @return string|null
     */
    public function getPhoneWork()
    {
        return $this->container['phoneWork'];
    }

    /**
     * Sets phoneWork
     *
     * @param string|null $phoneWork Work phone number of this user
     *
     * @return $this
     */
    public function setPhoneWork($phoneWork)
    {
        $this->container['phoneWork'] = $phoneWork;

        return $this;
    }

    /**
     * Gets phoneWorkExtension
     *
     * @return string|null
     */
    public function getPhoneWorkExtension()
    {
        return $this->container['phoneWorkExtension'];
    }

    /**
     * Sets phoneWorkExtension
     *
     * @param string|null $phoneWorkExtension Extension of work phone number of this user.
     *
     * @return $this
     */
    public function setPhoneWorkExtension($phoneWorkExtension)
    {
        $this->container['phoneWorkExtension'] = $phoneWorkExtension;

        return $this;
    }

    /**
     * Gets phoneHome
     *
     * @return string|null
     */
    public function getPhoneHome()
    {
        return $this->container['phoneHome'];
    }

    /**
     * Sets phoneHome
     *
     * @param string|null $phoneHome Home phone number of this user.
     *
     * @return $this
     */
    public function setPhoneHome($phoneHome)
    {
        $this->container['phoneHome'] = $phoneHome;

        return $this;
    }

    /**
     * Gets phoneCell
     *
     * @return string|null
     */
    public function getPhoneCell()
    {
        return $this->container['phoneCell'];
    }

    /**
     * Sets phoneCell
     *
     * @param string|null $phoneCell Cellphone number of this user.
     *
     * @return $this
     */
    public function setPhoneCell($phoneCell)
    {
        $this->container['phoneCell'] = $phoneCell;

        return $this;
    }

    /**
     * Gets phoneFax
     *
     * @return string|null
     */
    public function getPhoneFax()
    {
        return $this->container['phoneFax'];
    }

    /**
     * Sets phoneFax
     *
     * @param string|null $phoneFax Fax phone number of this user.
     *
     * @return $this
     */
    public function setPhoneFax($phoneFax)
    {
        $this->container['phoneFax'] = $phoneFax;

        return $this;
    }

    /**
     * Gets phoneMain
     *
     * @return string|null
     */
    public function getPhoneMain()
    {
        return $this->container['phoneMain'];
    }

    /**
     * Sets phoneMain
     *
     * @param string|null $phoneMain The phone type to be the main phone number. Accepts fax, cell, home, work. Default work
     *
     * @return $this
     */
    public function setPhoneMain($phoneMain)
    {
        $this->container['phoneMain'] = $phoneMain;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress[]|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyContactAddress[]|null $address Address of this user.
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets noFNA
     *
     * @return string|null
     */
    public function getNoFNA()
    {
        return $this->container['noFNA'];
    }

    /**
     * Sets noFNA
     *
     * @param string|null $noFNA Accepts true or false. Default false
     *
     * @return $this
     */
    public function setNoFNA($noFNA)
    {
        $this->container['noFNA'] = $noFNA;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


