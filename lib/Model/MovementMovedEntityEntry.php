<?php
/**
 * MovementMovedEntityEntry
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-equisoft1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * MovementMovedEntityEntry Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MovementMovedEntityEntry implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'movement.MovedEntityEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'srcUuid' => 'string',
        'srcId' => 'int',
        'dstUuid' => 'string',
        'dstId' => 'int',
        'movementType' => 'string',
        'children' => 'array<string,\Equisoft\SDK\EquisoftConnect\Model\MovementMovedEntityEntry[]>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'srcUuid' => null,
        'srcId' => null,
        'dstUuid' => null,
        'dstId' => null,
        'movementType' => null,
        'children' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'srcUuid' => true,
        'srcId' => false,
        'dstUuid' => true,
        'dstId' => false,
        'movementType' => true,
        'children' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'srcUuid' => 'srcUuid',
        'srcId' => 'srcId',
        'dstUuid' => 'dstUuid',
        'dstId' => 'dstId',
        'movementType' => 'movementType',
        'children' => 'children'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'srcUuid' => 'setSrcUuid',
        'srcId' => 'setSrcId',
        'dstUuid' => 'setDstUuid',
        'dstId' => 'setDstId',
        'movementType' => 'setMovementType',
        'children' => 'setChildren'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'srcUuid' => 'getSrcUuid',
        'srcId' => 'getSrcId',
        'dstUuid' => 'getDstUuid',
        'dstId' => 'getDstId',
        'movementType' => 'getMovementType',
        'children' => 'getChildren'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MOVEMENT_TYPE_MOVE = 'move';
    public const MOVEMENT_TYPE_COPY = 'copy';
    public const MOVEMENT_TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMovementTypeAllowableValues()
    {
        return [
            self::MOVEMENT_TYPE_MOVE,
            self::MOVEMENT_TYPE_COPY,
            self::MOVEMENT_TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('srcUuid', $data ?? [], null);
        $this->setIfExists('srcId', $data ?? [], null);
        $this->setIfExists('dstUuid', $data ?? [], null);
        $this->setIfExists('dstId', $data ?? [], null);
        $this->setIfExists('movementType', $data ?? [], null);
        $this->setIfExists('children', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMovementTypeAllowableValues();
        if (!is_null($this->container['movementType']) && !in_array($this->container['movementType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'movementType', must be one of '%s'",
                $this->container['movementType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets srcUuid
     *
     * @return string|null
     */
    public function getSrcUuid()
    {
        return $this->container['srcUuid'];
    }

    /**
     * Sets srcUuid
     *
     * @param string|null $srcUuid Source DB Id
     *
     * @return self
     */
    public function setSrcUuid($srcUuid)
    {
        if (is_null($srcUuid)) {
            array_push($this->openAPINullablesSetToNull, 'srcUuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('srcUuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['srcUuid'] = $srcUuid;

        return $this;
    }

    /**
     * Gets srcId
     *
     * @return int|null
     */
    public function getSrcId()
    {
        return $this->container['srcId'];
    }

    /**
     * Sets srcId
     *
     * @param int|null $srcId Source DB UUID
     *
     * @return self
     */
    public function setSrcId($srcId)
    {
        if (is_null($srcId)) {
            throw new \InvalidArgumentException('non-nullable srcId cannot be null');
        }
        $this->container['srcId'] = $srcId;

        return $this;
    }

    /**
     * Gets dstUuid
     *
     * @return string|null
     */
    public function getDstUuid()
    {
        return $this->container['dstUuid'];
    }

    /**
     * Sets dstUuid
     *
     * @param string|null $dstUuid Destination DB UUID
     *
     * @return self
     */
    public function setDstUuid($dstUuid)
    {
        if (is_null($dstUuid)) {
            array_push($this->openAPINullablesSetToNull, 'dstUuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dstUuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dstUuid'] = $dstUuid;

        return $this;
    }

    /**
     * Gets dstId
     *
     * @return int|null
     */
    public function getDstId()
    {
        return $this->container['dstId'];
    }

    /**
     * Sets dstId
     *
     * @param int|null $dstId Destination DB Id
     *
     * @return self
     */
    public function setDstId($dstId)
    {
        if (is_null($dstId)) {
            throw new \InvalidArgumentException('non-nullable dstId cannot be null');
        }
        $this->container['dstId'] = $dstId;

        return $this;
    }

    /**
     * Gets movementType
     *
     * @return string|null
     */
    public function getMovementType()
    {
        return $this->container['movementType'];
    }

    /**
     * Sets movementType
     *
     * @param string|null $movementType Type of movement (move, copy)
     *
     * @return self
     */
    public function setMovementType($movementType)
    {
        if (is_null($movementType)) {
            array_push($this->openAPINullablesSetToNull, 'movementType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('movementType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getMovementTypeAllowableValues();
        if (!is_null($movementType) && !in_array($movementType, $allowedValues, true)) {
            $movementType = self::MOVEMENT_TYPE_UNKNOWN_DEFAULT_OPEN_API;
        }
        $this->container['movementType'] = $movementType;

        return $this;
    }

    /**
     * Gets children
     *
     * @return array<string,\Equisoft\SDK\EquisoftConnect\Model\MovementMovedEntityEntry[]>|null
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param array<string,\Equisoft\SDK\EquisoftConnect\Model\MovementMovedEntityEntry[]>|null $children List of entity, indexed by entity type
     *
     * @return self
     */
    public function setChildren($children)
    {
        if (is_null($children)) {
            throw new \InvalidArgumentException('non-nullable children cannot be null');
        }
        $this->container['children'] = $children;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


