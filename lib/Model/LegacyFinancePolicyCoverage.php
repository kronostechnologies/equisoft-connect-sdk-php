<?php
/**
 * LegacyFinancePolicyCoverage
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * LegacyFinancePolicyCoverage Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LegacyFinancePolicyCoverage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'legacy.finance.PolicyCoverage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'coverageType' => 'string',
        'product' => 'string',
        'productType' => 'string',
        'productSubType' => 'string',
        'deathCapital' => 'string',
        'issueDate' => 'string',
        'annualPremium' => 'string',
        'modalPremium' => 'string',
        'annualizedPremium' => 'string',
        'premiumMode' => 'string',
        'surrenderValue' => 'string',
        'accumulatedFund' => 'string',
        'elimPeriodAcc' => 'string',
        'elimPeriodSick' => 'string',
        'benefitPeriod' => 'string',
        'benefitAmount' => 'string',
        'beneficiary' => 'string',
        'insureds' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePolicyCoverageInsured[]',
        'livesType' => 'string',
        'coverageOptions' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePolicyCoverageOption[]',
        'isInsured' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'coverageType' => null,
        'product' => null,
        'productType' => null,
        'productSubType' => null,
        'deathCapital' => null,
        'issueDate' => null,
        'annualPremium' => null,
        'modalPremium' => null,
        'annualizedPremium' => null,
        'premiumMode' => null,
        'surrenderValue' => null,
        'accumulatedFund' => null,
        'elimPeriodAcc' => null,
        'elimPeriodSick' => null,
        'benefitPeriod' => null,
        'benefitAmount' => null,
        'beneficiary' => null,
        'insureds' => null,
        'livesType' => null,
        'coverageOptions' => null,
        'isInsured' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coverageType' => 'coverageType',
        'product' => 'product',
        'productType' => 'productType',
        'productSubType' => 'productSubType',
        'deathCapital' => 'deathCapital',
        'issueDate' => 'issueDate',
        'annualPremium' => 'annualPremium',
        'modalPremium' => 'modalPremium',
        'annualizedPremium' => 'annualizedPremium',
        'premiumMode' => 'premiumMode',
        'surrenderValue' => 'surrenderValue',
        'accumulatedFund' => 'accumulatedFund',
        'elimPeriodAcc' => 'elimPeriodAcc',
        'elimPeriodSick' => 'elimPeriodSick',
        'benefitPeriod' => 'benefitPeriod',
        'benefitAmount' => 'benefitAmount',
        'beneficiary' => 'beneficiary',
        'insureds' => 'insureds',
        'livesType' => 'livesType',
        'coverageOptions' => 'coverageOptions',
        'isInsured' => 'isInsured'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'coverageType' => 'setCoverageType',
        'product' => 'setProduct',
        'productType' => 'setProductType',
        'productSubType' => 'setProductSubType',
        'deathCapital' => 'setDeathCapital',
        'issueDate' => 'setIssueDate',
        'annualPremium' => 'setAnnualPremium',
        'modalPremium' => 'setModalPremium',
        'annualizedPremium' => 'setAnnualizedPremium',
        'premiumMode' => 'setPremiumMode',
        'surrenderValue' => 'setSurrenderValue',
        'accumulatedFund' => 'setAccumulatedFund',
        'elimPeriodAcc' => 'setElimPeriodAcc',
        'elimPeriodSick' => 'setElimPeriodSick',
        'benefitPeriod' => 'setBenefitPeriod',
        'benefitAmount' => 'setBenefitAmount',
        'beneficiary' => 'setBeneficiary',
        'insureds' => 'setInsureds',
        'livesType' => 'setLivesType',
        'coverageOptions' => 'setCoverageOptions',
        'isInsured' => 'setIsInsured'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'coverageType' => 'getCoverageType',
        'product' => 'getProduct',
        'productType' => 'getProductType',
        'productSubType' => 'getProductSubType',
        'deathCapital' => 'getDeathCapital',
        'issueDate' => 'getIssueDate',
        'annualPremium' => 'getAnnualPremium',
        'modalPremium' => 'getModalPremium',
        'annualizedPremium' => 'getAnnualizedPremium',
        'premiumMode' => 'getPremiumMode',
        'surrenderValue' => 'getSurrenderValue',
        'accumulatedFund' => 'getAccumulatedFund',
        'elimPeriodAcc' => 'getElimPeriodAcc',
        'elimPeriodSick' => 'getElimPeriodSick',
        'benefitPeriod' => 'getBenefitPeriod',
        'benefitAmount' => 'getBenefitAmount',
        'beneficiary' => 'getBeneficiary',
        'insureds' => 'getInsureds',
        'livesType' => 'getLivesType',
        'coverageOptions' => 'getCoverageOptions',
        'isInsured' => 'getIsInsured'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['coverageType'] = $data['coverageType'] ?? null;
        $this->container['product'] = $data['product'] ?? null;
        $this->container['productType'] = $data['productType'] ?? null;
        $this->container['productSubType'] = $data['productSubType'] ?? null;
        $this->container['deathCapital'] = $data['deathCapital'] ?? null;
        $this->container['issueDate'] = $data['issueDate'] ?? null;
        $this->container['annualPremium'] = $data['annualPremium'] ?? null;
        $this->container['modalPremium'] = $data['modalPremium'] ?? null;
        $this->container['annualizedPremium'] = $data['annualizedPremium'] ?? null;
        $this->container['premiumMode'] = $data['premiumMode'] ?? null;
        $this->container['surrenderValue'] = $data['surrenderValue'] ?? null;
        $this->container['accumulatedFund'] = $data['accumulatedFund'] ?? null;
        $this->container['elimPeriodAcc'] = $data['elimPeriodAcc'] ?? null;
        $this->container['elimPeriodSick'] = $data['elimPeriodSick'] ?? null;
        $this->container['benefitPeriod'] = $data['benefitPeriod'] ?? null;
        $this->container['benefitAmount'] = $data['benefitAmount'] ?? null;
        $this->container['beneficiary'] = $data['beneficiary'] ?? null;
        $this->container['insureds'] = $data['insureds'] ?? null;
        $this->container['livesType'] = $data['livesType'] ?? null;
        $this->container['coverageOptions'] = $data['coverageOptions'] ?? null;
        $this->container['isInsured'] = $data['isInsured'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets coverageType
     *
     * @return string|null
     */
    public function getCoverageType()
    {
        return $this->container['coverageType'];
    }

    /**
     * Sets coverageType
     *
     * @param string|null $coverageType BASE or RIDER
     *
     * @return self
     */
    public function setCoverageType($coverageType)
    {
        $this->container['coverageType'] = $coverageType;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets productType
     *
     * @return string|null
     */
    public function getProductType()
    {
        return $this->container['productType'];
    }

    /**
     * Sets productType
     *
     * @param string|null $productType productType
     *
     * @return self
     */
    public function setProductType($productType)
    {
        $this->container['productType'] = $productType;

        return $this;
    }

    /**
     * Gets productSubType
     *
     * @return string|null
     */
    public function getProductSubType()
    {
        return $this->container['productSubType'];
    }

    /**
     * Sets productSubType
     *
     * @param string|null $productSubType productSubType
     *
     * @return self
     */
    public function setProductSubType($productSubType)
    {
        $this->container['productSubType'] = $productSubType;

        return $this;
    }

    /**
     * Gets deathCapital
     *
     * @return string|null
     */
    public function getDeathCapital()
    {
        return $this->container['deathCapital'];
    }

    /**
     * Sets deathCapital
     *
     * @param string|null $deathCapital deathCapital
     *
     * @return self
     */
    public function setDeathCapital($deathCapital)
    {
        $this->container['deathCapital'] = $deathCapital;

        return $this;
    }

    /**
     * Gets issueDate
     *
     * @return string|null
     */
    public function getIssueDate()
    {
        return $this->container['issueDate'];
    }

    /**
     * Sets issueDate
     *
     * @param string|null $issueDate issueDate
     *
     * @return self
     */
    public function setIssueDate($issueDate)
    {
        $this->container['issueDate'] = $issueDate;

        return $this;
    }

    /**
     * Gets annualPremium
     *
     * @return string|null
     */
    public function getAnnualPremium()
    {
        return $this->container['annualPremium'];
    }

    /**
     * Sets annualPremium
     *
     * @param string|null $annualPremium annualPremium
     *
     * @return self
     */
    public function setAnnualPremium($annualPremium)
    {
        $this->container['annualPremium'] = $annualPremium;

        return $this;
    }

    /**
     * Gets modalPremium
     *
     * @return string|null
     */
    public function getModalPremium()
    {
        return $this->container['modalPremium'];
    }

    /**
     * Sets modalPremium
     *
     * @param string|null $modalPremium modalPremium
     *
     * @return self
     */
    public function setModalPremium($modalPremium)
    {
        $this->container['modalPremium'] = $modalPremium;

        return $this;
    }

    /**
     * Gets annualizedPremium
     *
     * @return string|null
     */
    public function getAnnualizedPremium()
    {
        return $this->container['annualizedPremium'];
    }

    /**
     * Sets annualizedPremium
     *
     * @param string|null $annualizedPremium annualizedPremium
     *
     * @return self
     */
    public function setAnnualizedPremium($annualizedPremium)
    {
        $this->container['annualizedPremium'] = $annualizedPremium;

        return $this;
    }

    /**
     * Gets premiumMode
     *
     * @return string|null
     */
    public function getPremiumMode()
    {
        return $this->container['premiumMode'];
    }

    /**
     * Sets premiumMode
     *
     * @param string|null $premiumMode premiumMode
     *
     * @return self
     */
    public function setPremiumMode($premiumMode)
    {
        $this->container['premiumMode'] = $premiumMode;

        return $this;
    }

    /**
     * Gets surrenderValue
     *
     * @return string|null
     */
    public function getSurrenderValue()
    {
        return $this->container['surrenderValue'];
    }

    /**
     * Sets surrenderValue
     *
     * @param string|null $surrenderValue surrenderValue
     *
     * @return self
     */
    public function setSurrenderValue($surrenderValue)
    {
        $this->container['surrenderValue'] = $surrenderValue;

        return $this;
    }

    /**
     * Gets accumulatedFund
     *
     * @return string|null
     */
    public function getAccumulatedFund()
    {
        return $this->container['accumulatedFund'];
    }

    /**
     * Sets accumulatedFund
     *
     * @param string|null $accumulatedFund accumulatedFund
     *
     * @return self
     */
    public function setAccumulatedFund($accumulatedFund)
    {
        $this->container['accumulatedFund'] = $accumulatedFund;

        return $this;
    }

    /**
     * Gets elimPeriodAcc
     *
     * @return string|null
     */
    public function getElimPeriodAcc()
    {
        return $this->container['elimPeriodAcc'];
    }

    /**
     * Sets elimPeriodAcc
     *
     * @param string|null $elimPeriodAcc elimPeriodAcc
     *
     * @return self
     */
    public function setElimPeriodAcc($elimPeriodAcc)
    {
        $this->container['elimPeriodAcc'] = $elimPeriodAcc;

        return $this;
    }

    /**
     * Gets elimPeriodSick
     *
     * @return string|null
     */
    public function getElimPeriodSick()
    {
        return $this->container['elimPeriodSick'];
    }

    /**
     * Sets elimPeriodSick
     *
     * @param string|null $elimPeriodSick elimPeriodSick
     *
     * @return self
     */
    public function setElimPeriodSick($elimPeriodSick)
    {
        $this->container['elimPeriodSick'] = $elimPeriodSick;

        return $this;
    }

    /**
     * Gets benefitPeriod
     *
     * @return string|null
     */
    public function getBenefitPeriod()
    {
        return $this->container['benefitPeriod'];
    }

    /**
     * Sets benefitPeriod
     *
     * @param string|null $benefitPeriod benefitPeriod
     *
     * @return self
     */
    public function setBenefitPeriod($benefitPeriod)
    {
        $this->container['benefitPeriod'] = $benefitPeriod;

        return $this;
    }

    /**
     * Gets benefitAmount
     *
     * @return string|null
     */
    public function getBenefitAmount()
    {
        return $this->container['benefitAmount'];
    }

    /**
     * Sets benefitAmount
     *
     * @param string|null $benefitAmount benefitAmount
     *
     * @return self
     */
    public function setBenefitAmount($benefitAmount)
    {
        $this->container['benefitAmount'] = $benefitAmount;

        return $this;
    }

    /**
     * Gets beneficiary
     *
     * @return string|null
     */
    public function getBeneficiary()
    {
        return $this->container['beneficiary'];
    }

    /**
     * Sets beneficiary
     *
     * @param string|null $beneficiary beneficiary
     *
     * @return self
     */
    public function setBeneficiary($beneficiary)
    {
        $this->container['beneficiary'] = $beneficiary;

        return $this;
    }

    /**
     * Gets insureds
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePolicyCoverageInsured[]|null
     */
    public function getInsureds()
    {
        return $this->container['insureds'];
    }

    /**
     * Sets insureds
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePolicyCoverageInsured[]|null $insureds insureds
     *
     * @return self
     */
    public function setInsureds($insureds)
    {
        $this->container['insureds'] = $insureds;

        return $this;
    }

    /**
     * Gets livesType
     *
     * @return string|null
     */
    public function getLivesType()
    {
        return $this->container['livesType'];
    }

    /**
     * Sets livesType
     *
     * @param string|null $livesType livesType
     *
     * @return self
     */
    public function setLivesType($livesType)
    {
        $this->container['livesType'] = $livesType;

        return $this;
    }

    /**
     * Gets coverageOptions
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePolicyCoverageOption[]|null
     */
    public function getCoverageOptions()
    {
        return $this->container['coverageOptions'];
    }

    /**
     * Sets coverageOptions
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyFinancePolicyCoverageOption[]|null $coverageOptions coverageOptions
     *
     * @return self
     */
    public function setCoverageOptions($coverageOptions)
    {
        $this->container['coverageOptions'] = $coverageOptions;

        return $this;
    }

    /**
     * Gets isInsured
     *
     * @return string|null
     */
    public function getIsInsured()
    {
        return $this->container['isInsured'];
    }

    /**
     * Sets isInsured
     *
     * @param string|null $isInsured isInsured
     *
     * @return self
     */
    public function setIsInsured($isInsured)
    {
        $this->container['isInsured'] = $isInsured;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


