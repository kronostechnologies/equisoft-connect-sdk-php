<?php
/**
 * TasksCreateTaskPayload
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * TasksCreateTaskPayload Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TasksCreateTaskPayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tasks.CreateTaskPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'subject' => 'string',
        'dueDate' => 'string',
        'initialDate' => 'string',
        'completedDate' => 'string',
        'description' => 'string',
        'internalNotes' => 'string',
        'categoryId' => 'int',
        'subCategoryId' => 'int',
        'priority' => 'int',
        'visibility' => 'string',
        'contactIds' => 'int[]',
        'ownerIds' => 'int[]',
        'isCompleted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'subject' => null,
        'dueDate' => null,
        'initialDate' => null,
        'completedDate' => null,
        'description' => null,
        'internalNotes' => null,
        'categoryId' => null,
        'subCategoryId' => null,
        'priority' => null,
        'visibility' => null,
        'contactIds' => null,
        'ownerIds' => null,
        'isCompleted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subject' => 'subject',
        'dueDate' => 'dueDate',
        'initialDate' => 'initialDate',
        'completedDate' => 'completedDate',
        'description' => 'description',
        'internalNotes' => 'internalNotes',
        'categoryId' => 'categoryId',
        'subCategoryId' => 'subCategoryId',
        'priority' => 'priority',
        'visibility' => 'visibility',
        'contactIds' => 'contactIds',
        'ownerIds' => 'ownerIds',
        'isCompleted' => 'isCompleted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subject' => 'setSubject',
        'dueDate' => 'setDueDate',
        'initialDate' => 'setInitialDate',
        'completedDate' => 'setCompletedDate',
        'description' => 'setDescription',
        'internalNotes' => 'setInternalNotes',
        'categoryId' => 'setCategoryId',
        'subCategoryId' => 'setSubCategoryId',
        'priority' => 'setPriority',
        'visibility' => 'setVisibility',
        'contactIds' => 'setContactIds',
        'ownerIds' => 'setOwnerIds',
        'isCompleted' => 'setIsCompleted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subject' => 'getSubject',
        'dueDate' => 'getDueDate',
        'initialDate' => 'getInitialDate',
        'completedDate' => 'getCompletedDate',
        'description' => 'getDescription',
        'internalNotes' => 'getInternalNotes',
        'categoryId' => 'getCategoryId',
        'subCategoryId' => 'getSubCategoryId',
        'priority' => 'getPriority',
        'visibility' => 'getVisibility',
        'contactIds' => 'getContactIds',
        'ownerIds' => 'getOwnerIds',
        'isCompleted' => 'getIsCompleted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['subject'] = $data['subject'] ?? null;
        $this->container['dueDate'] = $data['dueDate'] ?? null;
        $this->container['initialDate'] = $data['initialDate'] ?? null;
        $this->container['completedDate'] = $data['completedDate'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['internalNotes'] = $data['internalNotes'] ?? null;
        $this->container['categoryId'] = $data['categoryId'] ?? null;
        $this->container['subCategoryId'] = $data['subCategoryId'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? null;
        $this->container['contactIds'] = $data['contactIds'] ?? null;
        $this->container['ownerIds'] = $data['ownerIds'] ?? null;
        $this->container['isCompleted'] = $data['isCompleted'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Subject/Title of the Event.
     *
     * @return self
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets dueDate
     *
     * @return string|null
     */
    public function getDueDate()
    {
        return $this->container['dueDate'];
    }

    /**
     * Sets dueDate
     *
     * @param string|null $dueDate Date the task is expected to be done. As defined by full-date - RFC3339
     *
     * @return self
     */
    public function setDueDate($dueDate)
    {
        $this->container['dueDate'] = $dueDate;

        return $this;
    }

    /**
     * Gets initialDate
     *
     * @return string|null
     */
    public function getInitialDate()
    {
        return $this->container['initialDate'];
    }

    /**
     * Sets initialDate
     *
     * @param string|null $initialDate Date the task was initially started. As defined by full-date - RFC3339
     *
     * @return self
     */
    public function setInitialDate($initialDate)
    {
        $this->container['initialDate'] = $initialDate;

        return $this;
    }

    /**
     * Gets completedDate
     *
     * @return string|null
     */
    public function getCompletedDate()
    {
        return $this->container['completedDate'];
    }

    /**
     * Sets completedDate
     *
     * @param string|null $completedDate Date the task was completed / done. As defined by full-date - RFC3339
     *
     * @return self
     */
    public function setCompletedDate($completedDate)
    {
        $this->container['completedDate'] = $completedDate;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Public description of the Event.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets internalNotes
     *
     * @return string|null
     */
    public function getInternalNotes()
    {
        return $this->container['internalNotes'];
    }

    /**
     * Sets internalNotes
     *
     * @param string|null $internalNotes Internal notes on the Event. Not synced on remote sources.
     *
     * @return self
     */
    public function setInternalNotes($internalNotes)
    {
        $this->container['internalNotes'] = $internalNotes;

        return $this;
    }

    /**
     * Gets categoryId
     *
     * @return int|null
     */
    public function getCategoryId()
    {
        return $this->container['categoryId'];
    }

    /**
     * Sets categoryId
     *
     * @param int|null $categoryId ID of the field value to use as category.
     *
     * @return self
     */
    public function setCategoryId($categoryId)
    {
        $this->container['categoryId'] = $categoryId;

        return $this;
    }

    /**
     * Gets subCategoryId
     *
     * @return int|null
     */
    public function getSubCategoryId()
    {
        return $this->container['subCategoryId'];
    }

    /**
     * Sets subCategoryId
     *
     * @param int|null $subCategoryId ID of the field value to use as sub-category.
     *
     * @return self
     */
    public function setSubCategoryId($subCategoryId)
    {
        $this->container['subCategoryId'] = $subCategoryId;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority Importance/Priority of an event or task. 5 is the most important.
     *
     * @return self
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility Confidentiality level of the Event (private or not). [NORMAL, PRIVATE]
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets contactIds
     *
     * @return int[]|null
     */
    public function getContactIds()
    {
        return $this->container['contactIds'];
    }

    /**
     * Sets contactIds
     *
     * @param int[]|null $contactIds Allow to link the task to one or many contacts.
     *
     * @return self
     */
    public function setContactIds($contactIds)
    {
        $this->container['contactIds'] = $contactIds;

        return $this;
    }

    /**
     * Gets ownerIds
     *
     * @return int[]|null
     */
    public function getOwnerIds()
    {
        return $this->container['ownerIds'];
    }

    /**
     * Sets ownerIds
     *
     * @param int[]|null $ownerIds Ids of the owner users of the task.
     *
     * @return self
     */
    public function setOwnerIds($ownerIds)
    {
        $this->container['ownerIds'] = $ownerIds;

        return $this;
    }

    /**
     * Gets isCompleted
     *
     * @return bool|null
     */
    public function getIsCompleted()
    {
        return $this->container['isCompleted'];
    }

    /**
     * Sets isCompleted
     *
     * @param bool|null $isCompleted Is the task completed.
     *
     * @return self
     */
    public function setIsCompleted($isCompleted)
    {
        $this->container['isCompleted'] = $isCompleted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


