<?php
/**
 * LegacyContactGetListOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-equisoft1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Model;

use \ArrayAccess;
use \Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * LegacyContactGetListOptions Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LegacyContactGetListOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'legacy.contact.GetListOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'filterById' => 'string',
        'filterByName' => 'string',
        'filterByClassId' => 'string',
        'filterByLastName' => 'string',
        'filterByFirstName' => 'string',
        'filterByNickName' => 'string',
        'filterByMiddleName' => 'string',
        'filterByRank' => 'string',
        'filterByUser' => 'string',
        'filterByIndividual' => 'string',
        'filterByOrganization' => 'string',
        'limit' => 'int',
        'offset' => 'int',
        'sortBy' => 'string',
        'sortDesc' => 'bool',
        'active' => 'bool',
        'mailGroup' => 'string',
        'excludeDeceased' => 'bool',
        'anniversary' => 'bool',
        'anniversaryRange' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyDateRange',
        'excludeFNA' => 'bool',
        'search' => '\Equisoft\SDK\EquisoftConnect\Model\LegacyContactOptionGetListSearch'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'filterById' => null,
        'filterByName' => null,
        'filterByClassId' => null,
        'filterByLastName' => null,
        'filterByFirstName' => null,
        'filterByNickName' => null,
        'filterByMiddleName' => null,
        'filterByRank' => null,
        'filterByUser' => null,
        'filterByIndividual' => null,
        'filterByOrganization' => null,
        'limit' => null,
        'offset' => null,
        'sortBy' => null,
        'sortDesc' => null,
        'active' => null,
        'mailGroup' => null,
        'excludeDeceased' => null,
        'anniversary' => null,
        'anniversaryRange' => null,
        'excludeFNA' => null,
        'search' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'filterById' => false,
		'filterByName' => false,
		'filterByClassId' => false,
		'filterByLastName' => false,
		'filterByFirstName' => false,
		'filterByNickName' => false,
		'filterByMiddleName' => false,
		'filterByRank' => false,
		'filterByUser' => false,
		'filterByIndividual' => false,
		'filterByOrganization' => false,
		'limit' => false,
		'offset' => false,
		'sortBy' => false,
		'sortDesc' => false,
		'active' => false,
		'mailGroup' => false,
		'excludeDeceased' => false,
		'anniversary' => false,
		'anniversaryRange' => false,
		'excludeFNA' => false,
		'search' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'filterById' => 'filterById',
        'filterByName' => 'filterByName',
        'filterByClassId' => 'filterByClassId',
        'filterByLastName' => 'filterByLastName',
        'filterByFirstName' => 'filterByFirstName',
        'filterByNickName' => 'filterByNickName',
        'filterByMiddleName' => 'filterByMiddleName',
        'filterByRank' => 'filterByRank',
        'filterByUser' => 'filterByUser',
        'filterByIndividual' => 'filterByIndividual',
        'filterByOrganization' => 'filterByOrganization',
        'limit' => 'limit',
        'offset' => 'offset',
        'sortBy' => 'sortBy',
        'sortDesc' => 'sortDesc',
        'active' => 'active',
        'mailGroup' => 'mailGroup',
        'excludeDeceased' => 'exclude_deceased',
        'anniversary' => 'anniversary',
        'anniversaryRange' => 'anniversaryRange',
        'excludeFNA' => 'excludeFNA',
        'search' => 'search'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'filterById' => 'setFilterById',
        'filterByName' => 'setFilterByName',
        'filterByClassId' => 'setFilterByClassId',
        'filterByLastName' => 'setFilterByLastName',
        'filterByFirstName' => 'setFilterByFirstName',
        'filterByNickName' => 'setFilterByNickName',
        'filterByMiddleName' => 'setFilterByMiddleName',
        'filterByRank' => 'setFilterByRank',
        'filterByUser' => 'setFilterByUser',
        'filterByIndividual' => 'setFilterByIndividual',
        'filterByOrganization' => 'setFilterByOrganization',
        'limit' => 'setLimit',
        'offset' => 'setOffset',
        'sortBy' => 'setSortBy',
        'sortDesc' => 'setSortDesc',
        'active' => 'setActive',
        'mailGroup' => 'setMailGroup',
        'excludeDeceased' => 'setExcludeDeceased',
        'anniversary' => 'setAnniversary',
        'anniversaryRange' => 'setAnniversaryRange',
        'excludeFNA' => 'setExcludeFNA',
        'search' => 'setSearch'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'filterById' => 'getFilterById',
        'filterByName' => 'getFilterByName',
        'filterByClassId' => 'getFilterByClassId',
        'filterByLastName' => 'getFilterByLastName',
        'filterByFirstName' => 'getFilterByFirstName',
        'filterByNickName' => 'getFilterByNickName',
        'filterByMiddleName' => 'getFilterByMiddleName',
        'filterByRank' => 'getFilterByRank',
        'filterByUser' => 'getFilterByUser',
        'filterByIndividual' => 'getFilterByIndividual',
        'filterByOrganization' => 'getFilterByOrganization',
        'limit' => 'getLimit',
        'offset' => 'getOffset',
        'sortBy' => 'getSortBy',
        'sortDesc' => 'getSortDesc',
        'active' => 'getActive',
        'mailGroup' => 'getMailGroup',
        'excludeDeceased' => 'getExcludeDeceased',
        'anniversary' => 'getAnniversary',
        'anniversaryRange' => 'getAnniversaryRange',
        'excludeFNA' => 'getExcludeFNA',
        'search' => 'getSearch'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FILTER_BY_INDIVIDUAL_FALSE = 'false';
    public const FILTER_BY_INDIVIDUAL_TRUE = 'true';
    public const FILTER_BY_INDIVIDUAL_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const FILTER_BY_ORGANIZATION_FALSE = 'false';
    public const FILTER_BY_ORGANIZATION_TRUE = 'true';
    public const FILTER_BY_ORGANIZATION_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const SORT_BY_NO_SORT = 'NO_SORT';
    public const SORT_BY_NAME = 'NAME';
    public const SORT_BY_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilterByIndividualAllowableValues()
    {
        return [
            self::FILTER_BY_INDIVIDUAL_FALSE,
            self::FILTER_BY_INDIVIDUAL_TRUE,
            self::FILTER_BY_INDIVIDUAL_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilterByOrganizationAllowableValues()
    {
        return [
            self::FILTER_BY_ORGANIZATION_FALSE,
            self::FILTER_BY_ORGANIZATION_TRUE,
            self::FILTER_BY_ORGANIZATION_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSortByAllowableValues()
    {
        return [
            self::SORT_BY_NO_SORT,
            self::SORT_BY_NAME,
            self::SORT_BY_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('filterById', $data ?? [], null);
        $this->setIfExists('filterByName', $data ?? [], null);
        $this->setIfExists('filterByClassId', $data ?? [], null);
        $this->setIfExists('filterByLastName', $data ?? [], null);
        $this->setIfExists('filterByFirstName', $data ?? [], null);
        $this->setIfExists('filterByNickName', $data ?? [], null);
        $this->setIfExists('filterByMiddleName', $data ?? [], null);
        $this->setIfExists('filterByRank', $data ?? [], null);
        $this->setIfExists('filterByUser', $data ?? [], null);
        $this->setIfExists('filterByIndividual', $data ?? [], null);
        $this->setIfExists('filterByOrganization', $data ?? [], null);
        $this->setIfExists('limit', $data ?? [], null);
        $this->setIfExists('offset', $data ?? [], null);
        $this->setIfExists('sortBy', $data ?? [], null);
        $this->setIfExists('sortDesc', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('mailGroup', $data ?? [], null);
        $this->setIfExists('excludeDeceased', $data ?? [], null);
        $this->setIfExists('anniversary', $data ?? [], null);
        $this->setIfExists('anniversaryRange', $data ?? [], null);
        $this->setIfExists('excludeFNA', $data ?? [], null);
        $this->setIfExists('search', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFilterByIndividualAllowableValues();
        if (!is_null($this->container['filterByIndividual']) && !in_array($this->container['filterByIndividual'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'filterByIndividual', must be one of '%s'",
                $this->container['filterByIndividual'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFilterByOrganizationAllowableValues();
        if (!is_null($this->container['filterByOrganization']) && !in_array($this->container['filterByOrganization'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'filterByOrganization', must be one of '%s'",
                $this->container['filterByOrganization'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSortByAllowableValues();
        if (!is_null($this->container['sortBy']) && !in_array($this->container['sortBy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sortBy', must be one of '%s'",
                $this->container['sortBy'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets filterById
     *
     * @return string|null
     */
    public function getFilterById()
    {
        return $this->container['filterById'];
    }

    /**
     * Sets filterById
     *
     * @param string|null $filterById Filter by id.
     *
     * @return self
     */
    public function setFilterById($filterById)
    {
        if (is_null($filterById)) {
            throw new \InvalidArgumentException('non-nullable filterById cannot be null');
        }
        $this->container['filterById'] = $filterById;

        return $this;
    }

    /**
     * Gets filterByName
     *
     * @return string|null
     */
    public function getFilterByName()
    {
        return $this->container['filterByName'];
    }

    /**
     * Sets filterByName
     *
     * @param string|null $filterByName Filter by first char of last name or first name.
     *
     * @return self
     */
    public function setFilterByName($filterByName)
    {
        if (is_null($filterByName)) {
            throw new \InvalidArgumentException('non-nullable filterByName cannot be null');
        }
        $this->container['filterByName'] = $filterByName;

        return $this;
    }

    /**
     * Gets filterByClassId
     *
     * @return string|null
     */
    public function getFilterByClassId()
    {
        return $this->container['filterByClassId'];
    }

    /**
     * Sets filterByClassId
     *
     * @param string|null $filterByClassId Filter by the class unique id or the class unique system name.
     *
     * @return self
     */
    public function setFilterByClassId($filterByClassId)
    {
        if (is_null($filterByClassId)) {
            throw new \InvalidArgumentException('non-nullable filterByClassId cannot be null');
        }
        $this->container['filterByClassId'] = $filterByClassId;

        return $this;
    }

    /**
     * Gets filterByLastName
     *
     * @return string|null
     */
    public function getFilterByLastName()
    {
        return $this->container['filterByLastName'];
    }

    /**
     * Sets filterByLastName
     *
     * @param string|null $filterByLastName Filter by first char of last name.
     *
     * @return self
     */
    public function setFilterByLastName($filterByLastName)
    {
        if (is_null($filterByLastName)) {
            throw new \InvalidArgumentException('non-nullable filterByLastName cannot be null');
        }
        $this->container['filterByLastName'] = $filterByLastName;

        return $this;
    }

    /**
     * Gets filterByFirstName
     *
     * @return string|null
     */
    public function getFilterByFirstName()
    {
        return $this->container['filterByFirstName'];
    }

    /**
     * Sets filterByFirstName
     *
     * @param string|null $filterByFirstName Filter by first char of first name.
     *
     * @return self
     */
    public function setFilterByFirstName($filterByFirstName)
    {
        if (is_null($filterByFirstName)) {
            throw new \InvalidArgumentException('non-nullable filterByFirstName cannot be null');
        }
        $this->container['filterByFirstName'] = $filterByFirstName;

        return $this;
    }

    /**
     * Gets filterByNickName
     *
     * @return string|null
     */
    public function getFilterByNickName()
    {
        return $this->container['filterByNickName'];
    }

    /**
     * Sets filterByNickName
     *
     * @param string|null $filterByNickName Filter by first char of nickname.
     *
     * @return self
     */
    public function setFilterByNickName($filterByNickName)
    {
        if (is_null($filterByNickName)) {
            throw new \InvalidArgumentException('non-nullable filterByNickName cannot be null');
        }
        $this->container['filterByNickName'] = $filterByNickName;

        return $this;
    }

    /**
     * Gets filterByMiddleName
     *
     * @return string|null
     */
    public function getFilterByMiddleName()
    {
        return $this->container['filterByMiddleName'];
    }

    /**
     * Sets filterByMiddleName
     *
     * @param string|null $filterByMiddleName Filter by first char of middle name.
     *
     * @return self
     */
    public function setFilterByMiddleName($filterByMiddleName)
    {
        if (is_null($filterByMiddleName)) {
            throw new \InvalidArgumentException('non-nullable filterByMiddleName cannot be null');
        }
        $this->container['filterByMiddleName'] = $filterByMiddleName;

        return $this;
    }

    /**
     * Gets filterByRank
     *
     * @return string|null
     */
    public function getFilterByRank()
    {
        return $this->container['filterByRank'];
    }

    /**
     * Sets filterByRank
     *
     * @param string|null $filterByRank Filter by first char of rank. (Industrial Alliance only).
     *
     * @return self
     */
    public function setFilterByRank($filterByRank)
    {
        if (is_null($filterByRank)) {
            throw new \InvalidArgumentException('non-nullable filterByRank cannot be null');
        }
        $this->container['filterByRank'] = $filterByRank;

        return $this;
    }

    /**
     * Gets filterByUser
     *
     * @return string|null
     */
    public function getFilterByUser()
    {
        return $this->container['filterByUser'];
    }

    /**
     * Sets filterByUser
     *
     * @param string|null $filterByUser Filter by exact username.
     *
     * @return self
     */
    public function setFilterByUser($filterByUser)
    {
        if (is_null($filterByUser)) {
            throw new \InvalidArgumentException('non-nullable filterByUser cannot be null');
        }
        $this->container['filterByUser'] = $filterByUser;

        return $this;
    }

    /**
     * Gets filterByIndividual
     *
     * @return string|null
     */
    public function getFilterByIndividual()
    {
        return $this->container['filterByIndividual'];
    }

    /**
     * Sets filterByIndividual
     *
     * @param string|null $filterByIndividual Filter by individual only. Default: false.
     *
     * @return self
     */
    public function setFilterByIndividual($filterByIndividual)
    {
        if (is_null($filterByIndividual)) {
            throw new \InvalidArgumentException('non-nullable filterByIndividual cannot be null');
        }
        $allowedValues = $this->getFilterByIndividualAllowableValues();
        if (!in_array($filterByIndividual, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'filterByIndividual', must be one of '%s'",
                    $filterByIndividual,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filterByIndividual'] = $filterByIndividual;

        return $this;
    }

    /**
     * Gets filterByOrganization
     *
     * @return string|null
     */
    public function getFilterByOrganization()
    {
        return $this->container['filterByOrganization'];
    }

    /**
     * Sets filterByOrganization
     *
     * @param string|null $filterByOrganization Filter by organization only. Default: false.
     *
     * @return self
     */
    public function setFilterByOrganization($filterByOrganization)
    {
        if (is_null($filterByOrganization)) {
            throw new \InvalidArgumentException('non-nullable filterByOrganization cannot be null');
        }
        $allowedValues = $this->getFilterByOrganizationAllowableValues();
        if (!in_array($filterByOrganization, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'filterByOrganization', must be one of '%s'",
                    $filterByOrganization,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filterByOrganization'] = $filterByOrganization;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int|null $limit Limit result to N record(s).
     *
     * @return self
     */
    public function setLimit($limit)
    {
        if (is_null($limit)) {
            throw new \InvalidArgumentException('non-nullable limit cannot be null');
        }
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets offset
     *
     * @return int|null
     */
    public function getOffset()
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     *
     * @param int|null $offset Return results skipping N first rows (\"limit\" must be specified for offset to works).
     *
     * @return self
     */
    public function setOffset($offset)
    {
        if (is_null($offset)) {
            throw new \InvalidArgumentException('non-nullable offset cannot be null');
        }
        $this->container['offset'] = $offset;

        return $this;
    }

    /**
     * Gets sortBy
     *
     * @return string|null
     */
    public function getSortBy()
    {
        return $this->container['sortBy'];
    }

    /**
     * Sets sortBy
     *
     * @param string|null $sortBy Sort by (NO_SORT|NAME). Default: NO_SORT.
     *
     * @return self
     */
    public function setSortBy($sortBy)
    {
        if (is_null($sortBy)) {
            throw new \InvalidArgumentException('non-nullable sortBy cannot be null');
        }
        $allowedValues = $this->getSortByAllowableValues();
        if (!in_array($sortBy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sortBy', must be one of '%s'",
                    $sortBy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sortBy'] = $sortBy;

        return $this;
    }

    /**
     * Gets sortDesc
     *
     * @return bool|null
     */
    public function getSortDesc()
    {
        return $this->container['sortDesc'];
    }

    /**
     * Sets sortDesc
     *
     * @param bool|null $sortDesc Sort in descending order (\"sortBy\" must be specified). Default: false.
     *
     * @return self
     */
    public function setSortDesc($sortDesc)
    {
        if (is_null($sortDesc)) {
            throw new \InvalidArgumentException('non-nullable sortDesc cannot be null');
        }
        $this->container['sortDesc'] = $sortDesc;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Return only the active contacts. Default: false.
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets mailGroup
     *
     * @return string|null
     */
    public function getMailGroup()
    {
        return $this->container['mailGroup'];
    }

    /**
     * Sets mailGroup
     *
     * @param string|null $mailGroup Return only contacts in the specified mail group. This can be the id of the mail group or the system name.
     *
     * @return self
     */
    public function setMailGroup($mailGroup)
    {
        if (is_null($mailGroup)) {
            throw new \InvalidArgumentException('non-nullable mailGroup cannot be null');
        }
        $this->container['mailGroup'] = $mailGroup;

        return $this;
    }

    /**
     * Gets excludeDeceased
     *
     * @return bool|null
     */
    public function getExcludeDeceased()
    {
        return $this->container['excludeDeceased'];
    }

    /**
     * Sets excludeDeceased
     *
     * @param bool|null $excludeDeceased Set to true to exclude contact that are deceased.
     *
     * @return self
     */
    public function setExcludeDeceased($excludeDeceased)
    {
        if (is_null($excludeDeceased)) {
            throw new \InvalidArgumentException('non-nullable excludeDeceased cannot be null');
        }
        $this->container['excludeDeceased'] = $excludeDeceased;

        return $this;
    }

    /**
     * Gets anniversary
     *
     * @return bool|null
     */
    public function getAnniversary()
    {
        return $this->container['anniversary'];
    }

    /**
     * Sets anniversary
     *
     * @param bool|null $anniversary Returns only contacts that their anniversary is today.
     *
     * @return self
     */
    public function setAnniversary($anniversary)
    {
        if (is_null($anniversary)) {
            throw new \InvalidArgumentException('non-nullable anniversary cannot be null');
        }
        $this->container['anniversary'] = $anniversary;

        return $this;
    }

    /**
     * Gets anniversaryRange
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyDateRange|null
     */
    public function getAnniversaryRange()
    {
        return $this->container['anniversaryRange'];
    }

    /**
     * Sets anniversaryRange
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyDateRange|null $anniversaryRange anniversaryRange
     *
     * @return self
     */
    public function setAnniversaryRange($anniversaryRange)
    {
        if (is_null($anniversaryRange)) {
            throw new \InvalidArgumentException('non-nullable anniversaryRange cannot be null');
        }
        $this->container['anniversaryRange'] = $anniversaryRange;

        return $this;
    }

    /**
     * Gets excludeFNA
     *
     * @return bool|null
     */
    public function getExcludeFNA()
    {
        return $this->container['excludeFNA'];
    }

    /**
     * Sets excludeFNA
     *
     * @param bool|null $excludeFNA Exclude contacts linked to Equisoft/plan. Default: false.
     *
     * @return self
     */
    public function setExcludeFNA($excludeFNA)
    {
        if (is_null($excludeFNA)) {
            throw new \InvalidArgumentException('non-nullable excludeFNA cannot be null');
        }
        $this->container['excludeFNA'] = $excludeFNA;

        return $this;
    }

    /**
     * Gets search
     *
     * @return \Equisoft\SDK\EquisoftConnect\Model\LegacyContactOptionGetListSearch|null
     */
    public function getSearch()
    {
        return $this->container['search'];
    }

    /**
     * Sets search
     *
     * @param \Equisoft\SDK\EquisoftConnect\Model\LegacyContactOptionGetListSearch|null $search search
     *
     * @return self
     */
    public function setSearch($search)
    {
        if (is_null($search)) {
            throw new \InvalidArgumentException('non-nullable search cannot be null');
        }
        $this->container['search'] = $search;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


