<?php
/**
 * ContactsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equisoft /connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-equisoft1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Equisoft\SDK\EquisoftConnect\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Equisoft\SDK\EquisoftConnect\ApiException;
use Equisoft\SDK\EquisoftConnect\Configuration;
use Equisoft\SDK\EquisoftConnect\HeaderSelector;
use Equisoft\SDK\EquisoftConnect\ObjectSerializer;

/**
 * ContactsApi Class Doc Comment
 *
 * @category Class
 * @package  Equisoft\SDK\EquisoftConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ContactsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getByUuid' => [
            'application/json',
        ],
        'listContact' => [
            'application/json',
        ],
        'patchContact' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getByUuid
     *
     * Get contact by Uuid
     *
     * @param  string $contactUuid Contact unique identifier. (required)
     * @param  string|null $acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getByUuid'] to see the possible values for this operation
     *
     * @throws \Equisoft\SDK\EquisoftConnect\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsLegacyContact|\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse|\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse|\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse
     */
    public function getByUuid($contactUuid, $acceptLanguage = null, string $contentType = self::contentTypes['getByUuid'][0])
    {
        list($response) = $this->getByUuidWithHttpInfo($contactUuid, $acceptLanguage, $contentType);
        return $response;
    }

    /**
     * Operation getByUuidWithHttpInfo
     *
     * Get contact by Uuid
     *
     * @param  string $contactUuid Contact unique identifier. (required)
     * @param  string|null $acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getByUuid'] to see the possible values for this operation
     *
     * @throws \Equisoft\SDK\EquisoftConnect\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Equisoft\SDK\EquisoftConnect\Model\ContactsLegacyContact|\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse|\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse|\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getByUuidWithHttpInfo($contactUuid, $acceptLanguage = null, string $contentType = self::contentTypes['getByUuid'][0])
    {
        $request = $this->getByUuidRequest($contactUuid, $acceptLanguage, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Equisoft\SDK\EquisoftConnect\Model\ContactsLegacyContact',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Equisoft\SDK\EquisoftConnect\Model\ContactsLegacyContact',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\EquisoftConnect\Model\ContactsLegacyContact',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getByUuidAsync
     *
     * Get contact by Uuid
     *
     * @param  string $contactUuid Contact unique identifier. (required)
     * @param  string|null $acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getByUuidAsync($contactUuid, $acceptLanguage = null, string $contentType = self::contentTypes['getByUuid'][0])
    {
        return $this->getByUuidAsyncWithHttpInfo($contactUuid, $acceptLanguage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getByUuidAsyncWithHttpInfo
     *
     * Get contact by Uuid
     *
     * @param  string $contactUuid Contact unique identifier. (required)
     * @param  string|null $acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getByUuidAsyncWithHttpInfo($contactUuid, $acceptLanguage = null, string $contentType = self::contentTypes['getByUuid'][0])
    {
        $returnType = '\Equisoft\SDK\EquisoftConnect\Model\ContactsLegacyContact';
        $request = $this->getByUuidRequest($contactUuid, $acceptLanguage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getByUuid'
     *
     * @param  string $contactUuid Contact unique identifier. (required)
     * @param  string|null $acceptLanguage Specify preferred language for returned data. Format is https://tools.ietf.org/html/rfc3282. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getByUuidRequest($contactUuid, $acceptLanguage = null, string $contentType = self::contentTypes['getByUuid'][0])
    {

        // verify the required parameter 'contactUuid' is set
        if ($contactUuid === null || (is_array($contactUuid) && count($contactUuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contactUuid when calling getByUuid'
            );
        }



        $resourcePath = '/crm/api/v1/contacts/{contactUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($acceptLanguage !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($acceptLanguage);
        }

        // path params
        if ($contactUuid !== null) {
            $resourcePath = str_replace(
                '{' . 'contactUuid' . '}',
                ObjectSerializer::toPathValue($contactUuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        if (is_string($formParamValueItem)) {
                            // JSON part
                            $multipartContents[] = [
                                'name' => $formParamName,
                                'contents' => $formParamValueItem,
                                'headers' => [
                                    'Content-Disposition' => "form-data; name=\"$formParamName\"; filename=\"$formParamName.json\"",
                                    'Content-Type' => 'application/json; charset=UTF-8'
                                ]
                            ];
                        } else {
                            $multipartContents[] = [
                                'name' => $formParamName,
                                'contents' => $formParamValueItem
                            ];
                        }
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listContact
     *
     * List contact
     *
     * @param  string|null $search Search value for the contact. (optional)
     * @param  int[]|null $ids Filter by id. (optional)
     * @param  string|null $name Filter by last name or first name. (optional)
     * @param  int[]|null $classIds Filter by the class unique id. (optional)
     * @param  string[]|null $classNames Filter by the class unique system name. (optional)
     * @param  string|null $lastName Filter by last name. (optional)
     * @param  string|null $firstName Filter by first name. (optional)
     * @param  string|null $nickname Filter by nickname. (optional)
     * @param  string|null $middleName Filter by middle name. (optional)
     * @param  string|null $userEmail Filter by exact user email. (optional)
     * @param  bool|null $individual Filter by individual only. Default: false. (optional)
     * @param  bool|null $organization Filter by organization only. Default: false. (optional)
     * @param  string|null $sort Sort by (NO_SORT|NAME). Default: NO_SORT. (optional, default to 'NO_SORT')
     * @param  bool|null $sortDesc Sort in descending order (\&quot;sort\&quot; must be specified). Default: false. (optional)
     * @param  bool|null $active Return only the active contacts. Default: false. (optional)
     * @param  bool|null $excludeDeceased Set to true to exclude contact that are deceased. (optional)
     * @param  string[]|null $mailGroupNames Return only contacts in the specified mail group system names. (optional)
     * @param  int[]|null $mailGroupIds Return only contacts in the specified mail group ids. (optional)
     * @param  bool|null $anniversary Returns only contacts that their anniversary is today. (optional)
     * @param  \DateTime|null $anniversaryStartDate Returns only contacts whose anniversary occurs on this date or after. (optional)
     * @param  \DateTime|null $anniversaryEndDate Returns only contacts whose anniversary occurs on this date or before. (optional)
     * @param  string|null $pageToken Token to specify which page to fetch. (optional)
     * @param  string|null $maxResults Maximum number of records for one result page. If the query return more records, nextPageToken will be specified in the result to get the records of the next page. Defaults to 250 records. Can never be more than 2500 records. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listContact'] to see the possible values for this operation
     *
     * @throws \Equisoft\SDK\EquisoftConnect\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsListContactResponse|\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse|\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse
     */
    public function listContact($search = null, $ids = null, $name = null, $classIds = null, $classNames = null, $lastName = null, $firstName = null, $nickname = null, $middleName = null, $userEmail = null, $individual = null, $organization = null, $sort = 'NO_SORT', $sortDesc = null, $active = null, $excludeDeceased = null, $mailGroupNames = null, $mailGroupIds = null, $anniversary = null, $anniversaryStartDate = null, $anniversaryEndDate = null, $pageToken = null, $maxResults = null, string $contentType = self::contentTypes['listContact'][0])
    {
        list($response) = $this->listContactWithHttpInfo($search, $ids, $name, $classIds, $classNames, $lastName, $firstName, $nickname, $middleName, $userEmail, $individual, $organization, $sort, $sortDesc, $active, $excludeDeceased, $mailGroupNames, $mailGroupIds, $anniversary, $anniversaryStartDate, $anniversaryEndDate, $pageToken, $maxResults, $contentType);
        return $response;
    }

    /**
     * Operation listContactWithHttpInfo
     *
     * List contact
     *
     * @param  string|null $search Search value for the contact. (optional)
     * @param  int[]|null $ids Filter by id. (optional)
     * @param  string|null $name Filter by last name or first name. (optional)
     * @param  int[]|null $classIds Filter by the class unique id. (optional)
     * @param  string[]|null $classNames Filter by the class unique system name. (optional)
     * @param  string|null $lastName Filter by last name. (optional)
     * @param  string|null $firstName Filter by first name. (optional)
     * @param  string|null $nickname Filter by nickname. (optional)
     * @param  string|null $middleName Filter by middle name. (optional)
     * @param  string|null $userEmail Filter by exact user email. (optional)
     * @param  bool|null $individual Filter by individual only. Default: false. (optional)
     * @param  bool|null $organization Filter by organization only. Default: false. (optional)
     * @param  string|null $sort Sort by (NO_SORT|NAME). Default: NO_SORT. (optional, default to 'NO_SORT')
     * @param  bool|null $sortDesc Sort in descending order (\&quot;sort\&quot; must be specified). Default: false. (optional)
     * @param  bool|null $active Return only the active contacts. Default: false. (optional)
     * @param  bool|null $excludeDeceased Set to true to exclude contact that are deceased. (optional)
     * @param  string[]|null $mailGroupNames Return only contacts in the specified mail group system names. (optional)
     * @param  int[]|null $mailGroupIds Return only contacts in the specified mail group ids. (optional)
     * @param  bool|null $anniversary Returns only contacts that their anniversary is today. (optional)
     * @param  \DateTime|null $anniversaryStartDate Returns only contacts whose anniversary occurs on this date or after. (optional)
     * @param  \DateTime|null $anniversaryEndDate Returns only contacts whose anniversary occurs on this date or before. (optional)
     * @param  string|null $pageToken Token to specify which page to fetch. (optional)
     * @param  string|null $maxResults Maximum number of records for one result page. If the query return more records, nextPageToken will be specified in the result to get the records of the next page. Defaults to 250 records. Can never be more than 2500 records. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listContact'] to see the possible values for this operation
     *
     * @throws \Equisoft\SDK\EquisoftConnect\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Equisoft\SDK\EquisoftConnect\Model\ContactsListContactResponse|\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse|\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listContactWithHttpInfo($search = null, $ids = null, $name = null, $classIds = null, $classNames = null, $lastName = null, $firstName = null, $nickname = null, $middleName = null, $userEmail = null, $individual = null, $organization = null, $sort = 'NO_SORT', $sortDesc = null, $active = null, $excludeDeceased = null, $mailGroupNames = null, $mailGroupIds = null, $anniversary = null, $anniversaryStartDate = null, $anniversaryEndDate = null, $pageToken = null, $maxResults = null, string $contentType = self::contentTypes['listContact'][0])
    {
        $request = $this->listContactRequest($search, $ids, $name, $classIds, $classNames, $lastName, $firstName, $nickname, $middleName, $userEmail, $individual, $organization, $sort, $sortDesc, $active, $excludeDeceased, $mailGroupNames, $mailGroupIds, $anniversary, $anniversaryStartDate, $anniversaryEndDate, $pageToken, $maxResults, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Equisoft\SDK\EquisoftConnect\Model\ContactsListContactResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Equisoft\SDK\EquisoftConnect\Model\ContactsListContactResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\EquisoftConnect\Model\ContactsListContactResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listContactAsync
     *
     * List contact
     *
     * @param  string|null $search Search value for the contact. (optional)
     * @param  int[]|null $ids Filter by id. (optional)
     * @param  string|null $name Filter by last name or first name. (optional)
     * @param  int[]|null $classIds Filter by the class unique id. (optional)
     * @param  string[]|null $classNames Filter by the class unique system name. (optional)
     * @param  string|null $lastName Filter by last name. (optional)
     * @param  string|null $firstName Filter by first name. (optional)
     * @param  string|null $nickname Filter by nickname. (optional)
     * @param  string|null $middleName Filter by middle name. (optional)
     * @param  string|null $userEmail Filter by exact user email. (optional)
     * @param  bool|null $individual Filter by individual only. Default: false. (optional)
     * @param  bool|null $organization Filter by organization only. Default: false. (optional)
     * @param  string|null $sort Sort by (NO_SORT|NAME). Default: NO_SORT. (optional, default to 'NO_SORT')
     * @param  bool|null $sortDesc Sort in descending order (\&quot;sort\&quot; must be specified). Default: false. (optional)
     * @param  bool|null $active Return only the active contacts. Default: false. (optional)
     * @param  bool|null $excludeDeceased Set to true to exclude contact that are deceased. (optional)
     * @param  string[]|null $mailGroupNames Return only contacts in the specified mail group system names. (optional)
     * @param  int[]|null $mailGroupIds Return only contacts in the specified mail group ids. (optional)
     * @param  bool|null $anniversary Returns only contacts that their anniversary is today. (optional)
     * @param  \DateTime|null $anniversaryStartDate Returns only contacts whose anniversary occurs on this date or after. (optional)
     * @param  \DateTime|null $anniversaryEndDate Returns only contacts whose anniversary occurs on this date or before. (optional)
     * @param  string|null $pageToken Token to specify which page to fetch. (optional)
     * @param  string|null $maxResults Maximum number of records for one result page. If the query return more records, nextPageToken will be specified in the result to get the records of the next page. Defaults to 250 records. Can never be more than 2500 records. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listContact'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listContactAsync($search = null, $ids = null, $name = null, $classIds = null, $classNames = null, $lastName = null, $firstName = null, $nickname = null, $middleName = null, $userEmail = null, $individual = null, $organization = null, $sort = 'NO_SORT', $sortDesc = null, $active = null, $excludeDeceased = null, $mailGroupNames = null, $mailGroupIds = null, $anniversary = null, $anniversaryStartDate = null, $anniversaryEndDate = null, $pageToken = null, $maxResults = null, string $contentType = self::contentTypes['listContact'][0])
    {
        return $this->listContactAsyncWithHttpInfo($search, $ids, $name, $classIds, $classNames, $lastName, $firstName, $nickname, $middleName, $userEmail, $individual, $organization, $sort, $sortDesc, $active, $excludeDeceased, $mailGroupNames, $mailGroupIds, $anniversary, $anniversaryStartDate, $anniversaryEndDate, $pageToken, $maxResults, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listContactAsyncWithHttpInfo
     *
     * List contact
     *
     * @param  string|null $search Search value for the contact. (optional)
     * @param  int[]|null $ids Filter by id. (optional)
     * @param  string|null $name Filter by last name or first name. (optional)
     * @param  int[]|null $classIds Filter by the class unique id. (optional)
     * @param  string[]|null $classNames Filter by the class unique system name. (optional)
     * @param  string|null $lastName Filter by last name. (optional)
     * @param  string|null $firstName Filter by first name. (optional)
     * @param  string|null $nickname Filter by nickname. (optional)
     * @param  string|null $middleName Filter by middle name. (optional)
     * @param  string|null $userEmail Filter by exact user email. (optional)
     * @param  bool|null $individual Filter by individual only. Default: false. (optional)
     * @param  bool|null $organization Filter by organization only. Default: false. (optional)
     * @param  string|null $sort Sort by (NO_SORT|NAME). Default: NO_SORT. (optional, default to 'NO_SORT')
     * @param  bool|null $sortDesc Sort in descending order (\&quot;sort\&quot; must be specified). Default: false. (optional)
     * @param  bool|null $active Return only the active contacts. Default: false. (optional)
     * @param  bool|null $excludeDeceased Set to true to exclude contact that are deceased. (optional)
     * @param  string[]|null $mailGroupNames Return only contacts in the specified mail group system names. (optional)
     * @param  int[]|null $mailGroupIds Return only contacts in the specified mail group ids. (optional)
     * @param  bool|null $anniversary Returns only contacts that their anniversary is today. (optional)
     * @param  \DateTime|null $anniversaryStartDate Returns only contacts whose anniversary occurs on this date or after. (optional)
     * @param  \DateTime|null $anniversaryEndDate Returns only contacts whose anniversary occurs on this date or before. (optional)
     * @param  string|null $pageToken Token to specify which page to fetch. (optional)
     * @param  string|null $maxResults Maximum number of records for one result page. If the query return more records, nextPageToken will be specified in the result to get the records of the next page. Defaults to 250 records. Can never be more than 2500 records. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listContact'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listContactAsyncWithHttpInfo($search = null, $ids = null, $name = null, $classIds = null, $classNames = null, $lastName = null, $firstName = null, $nickname = null, $middleName = null, $userEmail = null, $individual = null, $organization = null, $sort = 'NO_SORT', $sortDesc = null, $active = null, $excludeDeceased = null, $mailGroupNames = null, $mailGroupIds = null, $anniversary = null, $anniversaryStartDate = null, $anniversaryEndDate = null, $pageToken = null, $maxResults = null, string $contentType = self::contentTypes['listContact'][0])
    {
        $returnType = '\Equisoft\SDK\EquisoftConnect\Model\ContactsListContactResponse';
        $request = $this->listContactRequest($search, $ids, $name, $classIds, $classNames, $lastName, $firstName, $nickname, $middleName, $userEmail, $individual, $organization, $sort, $sortDesc, $active, $excludeDeceased, $mailGroupNames, $mailGroupIds, $anniversary, $anniversaryStartDate, $anniversaryEndDate, $pageToken, $maxResults, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listContact'
     *
     * @param  string|null $search Search value for the contact. (optional)
     * @param  int[]|null $ids Filter by id. (optional)
     * @param  string|null $name Filter by last name or first name. (optional)
     * @param  int[]|null $classIds Filter by the class unique id. (optional)
     * @param  string[]|null $classNames Filter by the class unique system name. (optional)
     * @param  string|null $lastName Filter by last name. (optional)
     * @param  string|null $firstName Filter by first name. (optional)
     * @param  string|null $nickname Filter by nickname. (optional)
     * @param  string|null $middleName Filter by middle name. (optional)
     * @param  string|null $userEmail Filter by exact user email. (optional)
     * @param  bool|null $individual Filter by individual only. Default: false. (optional)
     * @param  bool|null $organization Filter by organization only. Default: false. (optional)
     * @param  string|null $sort Sort by (NO_SORT|NAME). Default: NO_SORT. (optional, default to 'NO_SORT')
     * @param  bool|null $sortDesc Sort in descending order (\&quot;sort\&quot; must be specified). Default: false. (optional)
     * @param  bool|null $active Return only the active contacts. Default: false. (optional)
     * @param  bool|null $excludeDeceased Set to true to exclude contact that are deceased. (optional)
     * @param  string[]|null $mailGroupNames Return only contacts in the specified mail group system names. (optional)
     * @param  int[]|null $mailGroupIds Return only contacts in the specified mail group ids. (optional)
     * @param  bool|null $anniversary Returns only contacts that their anniversary is today. (optional)
     * @param  \DateTime|null $anniversaryStartDate Returns only contacts whose anniversary occurs on this date or after. (optional)
     * @param  \DateTime|null $anniversaryEndDate Returns only contacts whose anniversary occurs on this date or before. (optional)
     * @param  string|null $pageToken Token to specify which page to fetch. (optional)
     * @param  string|null $maxResults Maximum number of records for one result page. If the query return more records, nextPageToken will be specified in the result to get the records of the next page. Defaults to 250 records. Can never be more than 2500 records. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listContact'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listContactRequest($search = null, $ids = null, $name = null, $classIds = null, $classNames = null, $lastName = null, $firstName = null, $nickname = null, $middleName = null, $userEmail = null, $individual = null, $organization = null, $sort = 'NO_SORT', $sortDesc = null, $active = null, $excludeDeceased = null, $mailGroupNames = null, $mailGroupIds = null, $anniversary = null, $anniversaryStartDate = null, $anniversaryEndDate = null, $pageToken = null, $maxResults = null, string $contentType = self::contentTypes['listContact'][0])
    {

























        $resourcePath = '/crm/api/v1/contacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $classIds,
            'classIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $classNames,
            'classNames', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lastName,
            'lastName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $firstName,
            'firstName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nickname,
            'nickname', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $middleName,
            'middleName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $userEmail,
            'userEmail', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $individual,
            'individual', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $organization,
            'organization', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sortDesc,
            'sortDesc', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $active,
            'active', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludeDeceased,
            'excludeDeceased', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mailGroupNames,
            'mailGroupNames', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mailGroupIds,
            'mailGroupIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $anniversary,
            'anniversary', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $anniversaryStartDate,
            'anniversaryStartDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $anniversaryEndDate,
            'anniversaryEndDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageToken,
            'pageToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $maxResults,
            'maxResults', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        if (is_string($formParamValueItem)) {
                            // JSON part
                            $multipartContents[] = [
                                'name' => $formParamName,
                                'contents' => $formParamValueItem,
                                'headers' => [
                                    'Content-Disposition' => "form-data; name=\"$formParamName\"; filename=\"$formParamName.json\"",
                                    'Content-Type' => 'application/json; charset=UTF-8'
                                ]
                            ];
                        } else {
                            $multipartContents[] = [
                                'name' => $formParamName,
                                'contents' => $formParamValueItem
                            ];
                        }
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchContact
     *
     * Update a contact
     *
     * @param  string $contactUuid Contact unique identifier. (required)
     * @param  \Equisoft\SDK\EquisoftConnect\Model\ContactPatchContactPayload $contactPatchContactPayload contactPatchContactPayload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchContact'] to see the possible values for this operation
     *
     * @throws \Equisoft\SDK\EquisoftConnect\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Equisoft\SDK\EquisoftConnect\Model\ContactsContact|\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse|\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse|\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse|\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse
     */
    public function patchContact($contactUuid, $contactPatchContactPayload, string $contentType = self::contentTypes['patchContact'][0])
    {
        list($response) = $this->patchContactWithHttpInfo($contactUuid, $contactPatchContactPayload, $contentType);
        return $response;
    }

    /**
     * Operation patchContactWithHttpInfo
     *
     * Update a contact
     *
     * @param  string $contactUuid Contact unique identifier. (required)
     * @param  \Equisoft\SDK\EquisoftConnect\Model\ContactPatchContactPayload $contactPatchContactPayload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchContact'] to see the possible values for this operation
     *
     * @throws \Equisoft\SDK\EquisoftConnect\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Equisoft\SDK\EquisoftConnect\Model\ContactsContact|\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse|\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse|\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse|\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchContactWithHttpInfo($contactUuid, $contactPatchContactPayload, string $contentType = self::contentTypes['patchContact'][0])
    {
        $request = $this->patchContactRequest($contactUuid, $contactPatchContactPayload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Equisoft\SDK\EquisoftConnect\Model\ContactsContact',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Equisoft\SDK\EquisoftConnect\Model\ContactsContact',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\EquisoftConnect\Model\ContactsContact',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Equisoft\SDK\EquisoftConnect\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation patchContactAsync
     *
     * Update a contact
     *
     * @param  string $contactUuid Contact unique identifier. (required)
     * @param  \Equisoft\SDK\EquisoftConnect\Model\ContactPatchContactPayload $contactPatchContactPayload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchContact'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchContactAsync($contactUuid, $contactPatchContactPayload, string $contentType = self::contentTypes['patchContact'][0])
    {
        return $this->patchContactAsyncWithHttpInfo($contactUuid, $contactPatchContactPayload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchContactAsyncWithHttpInfo
     *
     * Update a contact
     *
     * @param  string $contactUuid Contact unique identifier. (required)
     * @param  \Equisoft\SDK\EquisoftConnect\Model\ContactPatchContactPayload $contactPatchContactPayload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchContact'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchContactAsyncWithHttpInfo($contactUuid, $contactPatchContactPayload, string $contentType = self::contentTypes['patchContact'][0])
    {
        $returnType = '\Equisoft\SDK\EquisoftConnect\Model\ContactsContact';
        $request = $this->patchContactRequest($contactUuid, $contactPatchContactPayload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchContact'
     *
     * @param  string $contactUuid Contact unique identifier. (required)
     * @param  \Equisoft\SDK\EquisoftConnect\Model\ContactPatchContactPayload $contactPatchContactPayload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchContact'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchContactRequest($contactUuid, $contactPatchContactPayload, string $contentType = self::contentTypes['patchContact'][0])
    {

        // verify the required parameter 'contactUuid' is set
        if ($contactUuid === null || (is_array($contactUuid) && count($contactUuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contactUuid when calling patchContact'
            );
        }

        // verify the required parameter 'contactPatchContactPayload' is set
        if ($contactPatchContactPayload === null || (is_array($contactPatchContactPayload) && count($contactPatchContactPayload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contactPatchContactPayload when calling patchContact'
            );
        }


        $resourcePath = '/crm/api/v1/contacts/{contactUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($contactUuid !== null) {
            $resourcePath = str_replace(
                '{' . 'contactUuid' . '}',
                ObjectSerializer::toPathValue($contactUuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contactPatchContactPayload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contactPatchContactPayload));
            } else {
                $httpBody = $contactPatchContactPayload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        if (is_string($formParamValueItem)) {
                            // JSON part
                            $multipartContents[] = [
                                'name' => $formParamName,
                                'contents' => $formParamValueItem,
                                'headers' => [
                                    'Content-Disposition' => "form-data; name=\"$formParamName\"; filename=\"$formParamName.json\"",
                                    'Content-Type' => 'application/json; charset=UTF-8'
                                ]
                            ];
                        } else {
                            $multipartContents[] = [
                                'name' => $formParamName,
                                'contents' => $formParamValueItem
                            ];
                        }
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
